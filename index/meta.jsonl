{"url": "https://docs.python.org/3/tutorial/index.html", "title": "", "text": "The Python TutorialÂ¶\nTip\nThis tutorial is designed for programmers that are new to the Python language, not beginners who are new to programming.\nPython is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Pythonâs elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and features of the Python language and system. Be aware that it expects you to have a basic understanding of programming in general. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Pythonâs most noteworthy features, and will give you a good idea of the l"}
{"url": "https://docs.python.org/3/library/index.html", "title": "", "text": "The Python Standard LibraryÂ¶\nWhile The Python Language Reference describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.\nPythonâs standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.\nThe Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.\nIn addition to the standard library, there is an active collection of hundreds of thousands of components (from individual programs and modules to packages and entire application development frameworks), available from the Python Package Index.\n- Introduction\n- Built-in Functions\n- Built-in Constants\n- Built-in Types\n- Truth Value Testing\n- Boolean Operations â\nand\n,or\n,not\n- Comparisons\n- Numeric Types â\nint\n,float\n,complex\n- Boolean Type -\nbool\n- Iterator Types\n- Sequence Types â\nlist\n,tuple\n,range\n- Text Sequence Type â\nstr\n- Binary Sequence Types â\nbytes\n,bytearray\n,memoryview\n- Set Types â\nset\n,frozenset\n- Mapping Types â\ndict\n- Context Manager Types\n- Type Annotation Types â Gener"}
{"url": "https://docs.python.org/3/faq/programming.html", "title": "", "text": "Programming FAQÂ¶\nGeneral QuestionsÂ¶\nIs there a source code level debugger with breakpoints, single-stepping, etc.?Â¶\nYes.\nSeveral debuggers for Python are described below, and the built-in function\nbreakpoint()\nallows you to drop into any of them.\nThe pdb module is a simple but adequate console-mode debugger for Python. It is\npart of the standard Python library, and is documented in the Library\nReference Manual\n. You can also write your own debugger by using the code\nfor pdb as an example.\nThe IDLE interactive development environment, which is part of the standard Python distribution (normally available as Tools/scripts/idle3), includes a graphical debugger.\nPythonWin is a Python IDE that includes a GUI debugger based on pdb. The PythonWin debugger colors breakpoints and has quite a few cool features such as debugging non-PythonWin programs. PythonWin is available as part of pywin32 project and as a part of the ActivePython distribution.\nEric is an IDE built on PyQt and the Scintilla editing component.\ntrepan3k is a gdb-like debugger.\nVisual Studio Code is an IDE with debugging tools that integrates with version-control software.\nThere are a number of commercial Python IDEs that include graphical debuggers. They include:\nAre there tools to help find bugs or perform static analysis?Â¶\nYes.\nPylint and Pyflakes do basic checking that will help you catch bugs sooner.\nStatic type checkers such as Mypy, Pyre, and Pytype can check type hints in Python source code.\nHow can I create a stand-alone binary from a Python script?Â¶\nYou donât need the ability to compile Python to C code if all you want is a stand-alone program that users can download and run without having to install the Python distribution first. There are a number of tools that determine the set of modules required by a program and bind these modules together with a Python binary to produce a single executable.\nOne is to use the freeze tool, which is included in the Python source tree as Tools/freeze. It conve"}
{"url": "https://docs.python.org/3/howto/logging.html", "title": "", "text": "Logging HOWTOÂ¶\n- Author:\nVinay Sajip <vinay_sajip at red-dove dot com>\nThis page contains tutorial information. For links to reference information and a logging cookbook, please see Other resources.\nBasic Logging TutorialÂ¶\nLogging is a means of tracking events that happen when some software runs. The softwareâs developer adds logging calls to their code to indicate that certain events have occurred. An event is described by a descriptive message which can optionally contain variable data (i.e. data that is potentially different for each occurrence of the event). Events also have an importance which the developer ascribes to the event; the importance can also be called the level or severity.\nWhen to use loggingÂ¶\nYou can access logging functionality by creating a logger via logger =\ngetLogger(__name__)\n, and then calling the loggerâs debug()\n,\ninfo()\n, warning()\n, error()\nand\ncritical()\nmethods. To determine when to use logging, and to see\nwhich logger methods to use when, see the table below. It states, for each of a\nset of common tasks, the best tool to use for that task.\nTask you want to perform |\nThe best tool for the task |\n|---|---|\nDisplay console output for ordinary usage of a command line script or program |\n|\nReport events that occur during normal operation of a program (e.g. for status monitoring or fault investigation) |\nA loggerâs |\nIssue a warning regarding a particular runtime event |\nA loggerâs |\nReport an error regarding a particular runtime event |\nRaise an exception |\nReport suppression of an error without raising an exception (e.g. error handler in a long-running server process) |\nA loggerâs |\nThe logger methods are named after the level or severity of the events they are used to track. The standard levels and their applicability are described below (in increasing order of severity):\nLevel |\nWhen itâs used |\n|---|---|\n|\nDetailed information, typically of interest only when diagnosing problems. |\n|\nConfirmation that things are working as expected"}
{"url": "https://docs.python.org/3/tutorial/introduction.html", "title": "", "text": "3. An Informal Introduction to PythonÂ¶\nIn the following examples, input and output are distinguished by the presence or absence of prompts (>>> and â¦): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.\nYou can use the âCopyâ button (it appears in the upper-right corner when hovering over or tapping a code example), which strips prompts and omits output, to copy and paste the input lines into your interpreter.\nMany of the examples in this manual, even those entered at the interactive\nprompt, include comments. Comments in Python start with the hash character,\n#\n, and extend to the end of the physical line. A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral. A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.\nSome examples:\n# this is the first comment\nspam = 1 # and this is the second comment\n# ... and now a third!\ntext = \"# This is not a comment because it's inside quotes.\"\n3.1. Using Python as a CalculatorÂ¶\nLetâs try some simple Python commands. Start the interpreter and wait for the\nprimary prompt, >>>\n. (It shouldnât take long.)\n3.1.1. NumbersÂ¶\nThe interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value. Expression syntax is straightforward: the\noperators +\n, -\n, *\nand /\ncan be used to perform\narithmetic; parentheses (()\n) can be used for grouping.\nFor example:\n>>> 2 + 2\n4\n>>> 50 - 5*6\n20\n>>> (50 - 5*6) / 4\n5.0\n>>> 8 / 5 # division always returns a floating-point number\n1.6\nThe integer numbers (e.g. 2\n, 4\n, 20\n) have type int\n,\nthe ones with a fractional part (e.g. 5.0\n, 1.6\n) have typ"}
{"url": "https://docs.python.org/3/tutorial/interactive.html", "title": "", "text": "14. Interactive Input Editing and History SubstitutionÂ¶\nSome versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU Readline library, which supports various styles of editing. This library has its own documentation which we wonât duplicate here.\n14.1. Tab Completion and History EditingÂ¶\nCompletion of variable and module names is\nautomatically enabled at interpreter startup so\nthat the Tab key invokes the completion function; it looks at\nPython statement names, the current local variables, and the available\nmodule names. For dotted expressions such as string.a\n, it will evaluate\nthe expression up to the final '.'\nand then suggest completions from\nthe attributes of the resulting object. Note that this may execute\napplication-defined code if an object with a __getattr__()\nmethod\nis part of the expression. The default configuration also saves your\nhistory into a file named .python_history\nin your user directory.\nThe history will be available again during the next interactive interpreter\nsession.\n14.2. Alternatives to the Interactive InterpreterÂ¶\nThis facility is an enormous step forward compared to earlier versions of the\ninterpreter; however, some wishes are left: It would be nice if the proper\nindentation were suggested on continuation lines (the parser knows if an\nINDENT\ntoken is required next). The completion mechanism might\nuse the interpreterâs symbol table. A command to check (or even suggest)\nmatching parentheses, quotes, etc., would also be useful.\nOne alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management. It can also be thoroughly customized and embedded into other applications. Another similar enhanced interactive environment is bpython."}
{"url": "https://docs.python.org/3/tutorial/appendix.html", "title": "", "text": "16. AppendixÂ¶\n16.1. Interactive ModeÂ¶\nThere are two variants of the interactive REPL. The classic basic interpreter is supported on all platforms with minimal line control capabilities.\nOn Windows, or Unix-like systems with curses\nsupport,\na new interactive shell is used by default since Python 3.13.\nThis one supports color, multiline editing, history browsing, and\npaste mode. To disable color, see Controlling color for\ndetails. Function keys provide some additional functionality.\nF1 enters the interactive help browser pydoc\n.\nF2 allows for browsing command-line history with neither output nor the\n>>> and â¦ prompts. F3 enters âpaste modeâ, which\nmakes pasting larger blocks of code easier. Press F3 to return to\nthe regular prompt.\nWhen using the new interactive shell, exit the shell by typing exit or quit. Adding call parentheses after those commands is not required.\nIf the new interactive shell is not desired, it can be disabled via\nthe PYTHON_BASIC_REPL\nenvironment variable.\n16.1.1. Error HandlingÂ¶\nWhen an error occurs, the interpreter prints an error message and a stack trace.\nIn interactive mode, it then returns to the primary prompt; when input came from\na file, it exits with a nonzero exit status after printing the stack trace.\n(Exceptions handled by an except\nclause in a try\nstatement\nare not errors in this context.) Some errors are unconditionally fatal and\ncause an exit with a nonzero exit status; this applies to internal inconsistencies and\nsome cases of running out of memory. All error messages are written to the\nstandard error stream; normal output from executed commands is written to\nstandard output.\nTyping the interrupt character (usually Control-C or Delete) to the primary or\nsecondary prompt cancels the input and returns to the primary prompt. [1]\nTyping an interrupt while a command is executing raises the\nKeyboardInterrupt\nexception, which may be handled by a try\nstatement.\n16.1.2. Executable Python ScriptsÂ¶\nOn BSDâish Unix systems, Python scrip"}
{"url": "https://docs.python.org/3/index.html", "title": "", "text": "Python 3.13.7 documentation\nWelcome! This is the official documentation for Python 3.13.7.\nDocumentation sections:\n|\nWhat's new in Python 3.13?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3/tutorial/modules.html", "title": "", "text": "6. ModulesÂ¶\nIf you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that youâve written in several programs without copying its definition into each program.\nTo support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).\nA module is a file containing Python definitions and statements. The file name\nis the module name with the suffix .py\nappended. Within a module, the\nmoduleâs name (as a string) is available as the value of the global variable\n__name__\n. For instance, use your favorite text editor to create a file\ncalled fibo.py\nin the current directory with the following contents:\n# Fibonacci numbers module\ndef fib(n):\n\"\"\"Write Fibonacci series up to n.\"\"\"\na, b = 0, 1\nwhile a < n:\nprint(a, end=' ')\na, b = b, a+b\nprint()\ndef fib2(n):\n\"\"\"Return Fibonacci series up to n.\"\"\"\nresult = []\na, b = 0, 1\nwhile a < n:\nresult.append(a)\na, b = b, a+b\nreturn result\nNow enter the Python interpreter and import this module with the following command:\n>>> import fibo\nThis does not add the names of the functions defined in fibo\ndirectly to\nthe current namespace (see Python Scopes and Namespaces for more details);\nit only adds the module name fibo\nthere. Using\nthe module name you can access the functions:\n>>> fibo.fib(1000)\n0 1 1 2 3 5 8 13 21 34 55 89 144 23"}
{"url": "https://docs.python.org/3/tutorial/errors.html", "title": "", "text": "8. Errors and ExceptionsÂ¶\nUntil now error messages havenât been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.\n8.1. Syntax ErrorsÂ¶\nSyntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:\n>>> while True print('Hello world')\nFile \"<stdin>\", line 1\nwhile True print('Hello world')\n^^^^^\nSyntaxError: invalid syntax\nThe parser repeats the offending line and displays little arrows pointing\nat the place where the error was detected. Note that this is not always the\nplace that needs to be fixed. In the example, the error is detected at the\nfunction print()\n, since a colon (':'\n) is missing just before it.\nThe file name (<stdin>\nin our example) and line number are printed so you\nknow where to look in case the input came from a file.\n8.2. ExceptionsÂ¶\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:\n>>> 10 * (1/0)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n10 * (1/0)\n~^~\nZeroDivisionError: division by zero\n>>> 4 + spam*3\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n4 + spam*3\n^^^^\nNameError: name 'spam' is not defined\n>>> '2' + 2\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n'2' + 2\n~~~~^~~\nTypeError: can only concatenate str (not \"int\") to str\nThe last line of the error message indicates what happened. Exceptions come in\ndifferent types, and the type is printed as part of the message: the types in\nthe example are ZeroDivisionError\n, NameError\nand TypeError\n.\nThe string printed "}
{"url": "https://docs.python.org/3/reference/index.html", "title": "", "text": "The Python Language ReferenceÂ¶\nThis reference manual describes the syntax and âcore semanticsâ of the language. It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the built-in functions and modules are described in The Python Standard Library. For an informal introduction to the language, see The Python Tutorial. For C or C++ programmers, two additional manuals exist: Extending and Embedding the Python Interpreter describes the high-level picture of how to write a Python extension module, and the Python/C API Reference Manual describes the interfaces available to C/C++ programmers in detail.\n- 1. Introduction\n- 2. Lexical analysis\n- 3. Data model\n- 4. Execution model\n- 5. The import system\n- 6. Expressions\n- 6.1. Arithmetic conversions\n- 6.2. Atoms\n- 6.3. Primaries\n- 6.4. Await expression\n- 6.5. The power operator\n- 6.6. Unary arithmetic and bitwise operations\n- 6.7. Binary arithmetic operations\n- 6.8. Shifting operations\n- 6.9. Binary bitwise operations\n- 6.10. Comparisons\n- 6.11. Boolean operations\n- 6.12. Assignment expressions\n- 6.13. Conditional expressions\n- 6.14. Lambdas\n- 6.15. Expression lists\n- 6.16. Evaluation order\n- 6.17. Operator precedence\n- 7. Simple statements\n- 7.1. Expression statements\n- 7.2. Assignment statements\n- 7.3. The\nassert\nstatement - 7.4. The\npass\nstatement - 7.5. The\ndel\nstatement - 7.6. The\nreturn\nstatement - 7.7. The\nyield\nstatement - 7.8. The\nraise\nstatement - 7.9. The\nbreak\nstatement - 7.10. The\ncontinue\nstatement - 7.11. The\nimport\nstatement - 7.12. The\nglobal\nstatement - 7.13. The\nnonlocal\nstatement - 7.14. The\ntype\nstatement\n- 8. Compound statements\n- 9. Top-level components\n- 10. Full Grammar specification"}
{"url": "https://docs.python.org/3/genindex.html", "title": "", "text": "Index pages by letter:\nSymbols | _ | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z\nFull index on one page (can be huge)"}
{"url": "https://docs.python.org/3/tutorial/classes.html", "title": "", "text": "9. ClassesÂ¶\nClasses provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\nCompared with other programming languages, Pythonâs class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.\nIn C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual. As in Modula-3, there are no shorthands for referencing the objectâs members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.\n(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms. I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few rea"}
{"url": "https://docs.python.org/3/tutorial/stdlib.html", "title": "", "text": "10. Brief Tour of the Standard LibraryÂ¶\n10.1. Operating System InterfaceÂ¶\nThe os\nmodule provides dozens of functions for interacting with the\noperating system:\n>>> import os\n>>> os.getcwd() # Return the current working directory\n'C:\\\\Python313'\n>>> os.chdir('/server/accesslogs') # Change current working directory\n>>> os.system('mkdir today') # Run the command mkdir in the system shell\n0\nBe sure to use the import os\nstyle instead of from os import *\n. This\nwill keep os.open()\nfrom shadowing the built-in open()\nfunction which\noperates much differently.\nThe built-in dir()\nand help()\nfunctions are useful as interactive\naids for working with large modules like os\n:\n>>> import os\n>>> dir(os)\n<returns a list of all module functions>\n>>> help(os)\n<returns an extensive manual page created from the module's docstrings>\nFor daily file and directory management tasks, the shutil\nmodule provides\na higher level interface that is easier to use:\n>>> import shutil\n>>> shutil.copyfile('data.db', 'archive.db')\n'archive.db'\n>>> shutil.move('/build/executables', 'installdir')\n'installdir'\n10.2. File WildcardsÂ¶\nThe glob\nmodule provides a function for making file lists from directory\nwildcard searches:\n>>> import glob\n>>> glob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']\n10.3. Command Line ArgumentsÂ¶\nCommon utility scripts often need to process command line arguments. These\narguments are stored in the sys\nmoduleâs argv attribute as a list. For\ninstance, letâs take the following demo.py\nfile:\n# File demo.py\nimport sys\nprint(sys.argv)\nHere is the output from running python demo.py one two three\nat the command\nline:\n['demo.py', 'one', 'two', 'three']\nThe argparse\nmodule provides a more sophisticated mechanism to process\ncommand line arguments. The following script extracts one or more filenames\nand an optional number of lines to be displayed:\nimport argparse\nparser = argparse.ArgumentParser(\nprog='top',\ndescription='Show top lines from each file')\nparser.add_argument('filenames', n"}
{"url": "https://docs.python.org/3/tutorial/inputoutput.html", "title": "", "text": "7. Input and OutputÂ¶\nThere are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.\n7.1. Fancier Output FormattingÂ¶\nSo far weâve encountered two ways of writing values: expression statements and\nthe print()\nfunction. (A third way is using the write()\nmethod\nof file objects; the standard output file can be referenced as sys.stdout\n.\nSee the Library Reference for more information on this.)\nOften youâll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.\nTo use formatted string literals, begin a string with\nf\norF\nbefore the opening quotation mark or triple quotation mark. Inside this string, you can write a Python expression between{\nand}\ncharacters that can refer to variables or literal values.>>> year = 2016 >>> event = 'Referendum' >>> f'Results of the {year} {event}' 'Results of the 2016 Referendum'\nThe\nstr.format()\nmethod of strings requires more manual effort. Youâll still use{\nand}\nto mark where a variable will be substituted and can provide detailed formatting directives, but youâll also need to provide the information to be formatted. In the following code block there are two examples of how to format variables:>>> yes_votes = 42_572_654 >>> total_votes = 85_705_149 >>> percentage = yes_votes / total_votes >>> '{:-9} YES votes {:2.2%}'.format(yes_votes, percentage) ' 42572654 YES votes 49.67%'\nNotice how the\nyes_votes\nare padded with spaces and a negative sign only for negative numbers. The example also printspercentage\nmultiplied by 100, with 2 decimal places and followed by a percent sign (see Format Specification Mini-Language for details).Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operati"}
{"url": "https://docs.python.org/3/tutorial/whatnow.html", "title": "", "text": "13. What Now?Â¶\nReading this tutorial has probably reinforced your interest in using Python â you should be eager to apply Python to solving your real-world problems. Where should you go to learn more?\nThis tutorial is part of Pythonâs documentation set. Some other documents in the set are:\n-\nYou should browse through this manual, which gives complete (though terse) reference material about types, functions, and the modules in the standard library. The standard Python distribution includes a lot of additional code. There are modules to read Unix mailboxes, retrieve documents via HTTP, generate random numbers, parse command-line options, compress data, and many other tasks. Skimming through the Library Reference will give you an idea of whatâs available.\nInstalling Python Modules explains how to install additional modules written by other Python users.\nThe Python Language Reference: A detailed explanation of Pythonâs syntax and semantics. Itâs heavy reading, but is useful as a complete guide to the language itself.\nMore Python resources:\nhttps://www.python.org: The major Python web site. It contains code, documentation, and pointers to Python-related pages around the web.\nhttps://docs.python.org: Fast access to Pythonâs documentation.\nhttps://pypi.org: The Python Package Index, previously also nicknamed the Cheese Shop [1], is an index of user-created Python modules that are available for download. Once you begin releasing code, you can register it here so that others can find it.\nhttps://code.activestate.com/recipes/langs/python/: The Python Cookbook is a sizable collection of code examples, larger modules, and useful scripts. Particularly notable contributions are collected in a book also titled Python Cookbook (OâReilly & Associates, ISBN 0-596-00797-3.)\nhttps://pyvideo.org collects links to Python-related videos from conferences and user-group meetings.\nhttps://scipy.org: The Scientific Python project includes modules for fast array computations and manipulations"}
{"url": "https://docs.python.org/3/tutorial/controlflow.html", "title": "", "text": "4. More Control Flow ToolsÂ¶\nAs well as the while\nstatement just introduced, Python uses a few more\nthat we will encounter in this chapter.\n4.1. if\nStatementsÂ¶\nPerhaps the most well-known statement type is the if\nstatement. For\nexample:\n>>> x = int(input(\"Please enter an integer: \"))\nPlease enter an integer: 42\n>>> if x < 0:\n... x = 0\n... print('Negative changed to zero')\n... elif x == 0:\n... print('Zero')\n... elif x == 1:\n... print('Single')\n... else:\n... print('More')\n...\nMore\nThere can be zero or more elif\nparts, and the else\npart is\noptional. The keyword âelif\nâ is short for âelse ifâ, and is useful\nto avoid excessive indentation. An if\nâ¦ elif\nâ¦\nelif\nâ¦ sequence is a substitute for the switch\nor\ncase\nstatements found in other languages.\nIf youâre comparing the same value to several constants, or checking for specific types or\nattributes, you may also find the match\nstatement useful. For more\ndetails see match Statements.\n4.2. for\nStatementsÂ¶\nThe for\nstatement in Python differs a bit from what you may be used\nto in C or Pascal. Rather than always iterating over an arithmetic progression\nof numbers (like in Pascal), or giving the user the ability to define both the\niteration step and halting condition (as C), Pythonâs for\nstatement\niterates over the items of any sequence (a list or a string), in the order that\nthey appear in the sequence. For example (no pun intended):\n>>> # Measure some strings:\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words:\n... print(w, len(w))\n...\ncat 3\nwindow 6\ndefenestrate 12\nCode that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:\n# Create a sample collection\nusers = {'Hans': 'active', 'ÃlÃ©onore': 'inactive', 'æ¯å¤ªé': 'active'}\n# Strategy: Iterate over a copy\nfor user, status in users.copy().items():\nif status == 'inactive':\ndel users[user]\n# Strategy: Create a"}
{"url": "https://docs.python.org/3/tutorial/floatingpoint.html", "title": "", "text": "15. Floating-Point Arithmetic: Issues and LimitationsÂ¶\nFloating-point numbers are represented in computer hardware as base 2 (binary)\nfractions. For example, the decimal fraction 0.625\nhas value 6/10 + 2/100 + 5/1000, and in the same way the binary fraction 0.101\nhas value 1/2 + 0/4 + 1/8. These two fractions have identical values, the only\nreal difference being that the first is written in base 10 fractional notation,\nand the second in base 2.\nUnfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is that, in general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers actually stored in the machine.\nThe problem is easier to understand at first in base 10. Consider the fraction 1/3. You can approximate that as a base 10 fraction:\n0.3\nor, better,\n0.33\nor, better,\n0.333\nand so on. No matter how many digits youâre willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3.\nIn the same way, no matter how many base 2 digits youâre willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction. In base 2, 1/10 is the infinitely repeating fraction\n0.0001100110011001100110011001100110011001100110011...\nStop at any finite number of bits, and you get an approximation. On most\nmachines today, floats are approximated using a binary fraction with\nthe numerator using the first 53 bits starting with the most significant bit and\nwith the denominator as a power of two. In the case of 1/10, the binary fraction\nis 3602879701896397 / 2 ** 55\nwhich is close to but not exactly\nequal to the true value of 1/10.\nMany users are not aware of the approximation because of the way values are displayed. Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine. On most machines, if Python were to print the true decimal value of the binary approximation s"}
{"url": "https://docs.python.org/3/whatsnew/changelog.html", "title": "", "text": "ChangelogÂ¶\nPython nextÂ¶\nRelease date: XXXX-XX-XX\nWindowsÂ¶\ngh-138896: Fix error installing C runtime on non-updated Windows machines\nTools/DemosÂ¶\ngh-139330: SBOM generation tool didnât cross-check the version and checksum values against the\nModules/expat/refresh.sh\nscript, leading to the values becoming out-of-date during routine updates.gh-137873: The iOS test runner has been simplified, resolving some issues that have been observed using the runner in GitHub Actions and Azure Pipelines test environments.\nTestsÂ¶\ngh-139208: Fix regrtest\n--fast-ci --verbose\n: donât ignore the--verbose\noption anymore. Patch by Victor Stinner.\nSecurityÂ¶\ngh-135661: Fix CDATA section parsing in\nhtml.parser.HTMLParser\naccording to the HTML5 standard:] ]>\nand]] >\nno longer end the CDATA section. Add private method_set_support_cdata()\nwhich can be used to specify how to parse<[CDATA[\nâ as a CDATA section in foreign content (SVG or MathML) or as a bogus comment in the HTML namespace.\nLibraryÂ¶\ngh-139312: Upgrade bundled libexpat to 2.7.3\ngh-139289: Do a real lazy-import on\nrlcompleter\ninpdb\nand restore the existing completer after importingrlcompleter\n.gh-139210: Fix use-after-free when reporting unknown event in\nxml.etree.ElementTree.iterparse()\n. Patch by Ken Jin.gh-138860: Lazy import\nrlcompleter\ninpdb\nto avoid deadlock in subprocess.gh-112729: Fix crash when calling\n_interpreters.create\nwhen the process is out of memory.gh-139076: Fix a bug in the\npydoc\nmodule that was hiding functions in a Python module if they were implemented in an extension module and the module did not have__all__\n.gh-138998: Update bundled libexpat to 2.7.2\ngh-130567: Fix possible crash in\nlocale.strxfrm()\ndue to a platform bug on macOS.gh-138779: Support device numbers larger than\n2**63-1\nfor thest_rdev\nfield of theos.stat_result\nstructure.gh-128636: Fix crash in PyREPL when os.environ is overwritten with an invalid value for mac\ngh-88375: Fix normalization of the\nrobots.txt\nrules and URLs in theurllib.robotp"}
{"url": "https://docs.python.org/license.html", "title": "", "text": "History and LicenseÂ¶\nHistory of the softwareÂ¶\nPython was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Pythonâs principal author, although it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, see https://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF.\nAll Python releases are Open Source (see https://opensource.org for the Open Source Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases.\nRelease |\nDerived from |\nYear |\nOwner |\nGPL-compatible? (1) |\n|---|---|---|---|---|\n0.9.0 thru 1.2 |\nn/a |\n1991-1995 |\nCWI |\nyes |\n1.3 thru 1.5.2 |\n1.2 |\n1995-1999 |\nCNRI |\nyes |\n1.6 |\n1.5.2 |\n2000 |\nCNRI |\nno |\n2.0 |\n1.6 |\n2000 |\nBeOpen.com |\nno |\n1.6.1 |\n1.6 |\n2001 |\nCNRI |\nyes (2) |\n2.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nno |\n2.0.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nyes |\n2.1.1 |\n2.1+2.0.1 |\n2001 |\nPSF |\nyes |\n2.1.2 |\n2.1.1 |\n2002 |\nPSF |\nyes |\n2.1.3 |\n2.1.2 |\n2002 |\nPSF |\nyes |\n2.2 and above |\n2.1.1 |\n2001-now |\nPSF |\nyes |\nNote\nGPL-compatible doesnât mean that weâre distributing Python under the GPL. All Python licenses, unlike the GPL, let you distribute a modified version without making your changes open source. The GPL-compatible licenses make it possible to combine Python with ot"}
{"url": "https://docs.python.org/3/py-modindex.html", "title": "", "text": "Python Module Index\n_ |\na |\nb |\nc |\nd |\ne |\nf |\ng |\nh |\ni |\nj |\nk |\nl |\nm |\nn |\no |\np |\nq |\nr |\ns |\nt |\nu |\nv |\nw |\nx |\nz\n| _ | ||\n__future__ | Future statement definitions | |\n__main__ | The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``. | |\n_thread | Low-level threading API. | |\n_tkinter | A binary module that contains the low-level interface to Tcl/Tk. | |\n| a | ||\nabc | Abstract base classes according to :pep:`3119`. | |\naifc | Deprecated: Removed in 3.13. | |\nargparse | Command-line option and argument parsing library. | |\narray | Space efficient arrays of uniformly typed numeric values. | |\nast | Abstract Syntax Tree classes and manipulation. | |\nasynchat | Deprecated: Removed in 3.12. | |\nasyncio | Asynchronous I/O. | |\nasyncore | Deprecated: Removed in 3.12. | |\natexit | Register and execute cleanup functions. | |\naudioop | Deprecated: Removed in 3.13. | |\n| b | ||\nbase64 | RFC 4648: Base16, Base32, Base64 Data Encodings; Base85 and Ascii85 | |\nbdb | Debugger framework. | |\nbinascii | Tools for converting between binary and various ASCII-encoded binary representations. | |\nbisect | Array bisection algorithms for binary searching. | |\nbuiltins | The module that provides the built-in namespace. | |\nbz2 | Interfaces for bzip2 compression and decompression. | |\n| c | ||\ncalendar | Functions for working with calendars, including some emulation of the Unix cal program. | |\ncgi | Deprecated: Removed in 3.13. | |\ncgitb | Deprecated: Removed in 3.13. | |\nchunk | Deprecated: Removed in 3.13. | |\ncmath | Mathematical functions for complex numbers. | |\ncmd | Build line-oriented command interpreters. | |\ncode | Facilities to implement read-eval-print loops. | |\ncodecs | Encode and decode data and streams. | |\ncodeop | Compile (possibly incomplete) Python code. | |\ncollections | Container datatypes | |\ncollections.abc | Abstract base classes for containers | |\ncolorsys | Conversion functions b"}
{"url": "https://docs.python.org/3/bugs.html", "title": "", "text": "Dealing with BugsÂ¶\nPython is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how to contribute.\nDocumentation bugsÂ¶\nIf you find a bug in this documentation or would like to propose an improvement, please submit a bug report on the tracker. If you have a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our Documentation Discourse forum.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on the python-doc-theme bug tracker.\nIf youâre short on time, you can also email documentation bug reports to docs@python.org (behavioral bugs can be sent to python-list@python.org). âdocs@â is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.\nSee also\n- Documentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\n- Issue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\n- Helping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\n- Documentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue trackerÂ¶\nIssue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developersâ time, is that you learn what has been "}
{"url": "https://docs.python.org/3/extending/index.html", "title": "", "text": "Extending and Embedding the Python InterpreterÂ¶\nThis document describes how to write modules in C or C++ to extend the Python interpreter with new modules. Those modules can not only define new functions but also new object types and their methods. The document also describes how to embed the Python interpreter in another application, for use as an extension language. Finally, it shows how to compile and link extension modules so that they can be loaded dynamically (at run time) into the interpreter, if the underlying operating system supports this feature.\nThis document assumes basic knowledge about Python. For an informal introduction to the language, see The Python Tutorial. The Python Language Reference gives a more formal definition of the language. The Python Standard Library documents the existing object types, functions and modules (both built-in and written in Python) that give the language its wide application range.\nFor a detailed description of the whole Python/C API, see the separate Python/C API Reference Manual.\nRecommended third party toolsÂ¶\nThis guide only covers the basic tools for creating extensions provided as part of this version of CPython. Some third party tools offer both simpler and more sophisticated approaches to creating C and C++ extensions for Python.\nCreating extensions without third party toolsÂ¶\nThis section of the guide covers creating C and C++ extensions without assistance from third party tools. It is intended primarily for creators of those tools, rather than being a recommended way to create your own C extensions.\nSee also\nPEP 489 â Multi-phase extension module initialization\n- 1. Extending Python with C or C++\n- 1.1. A Simple Example\n- 1.2. Intermezzo: Errors and Exceptions\n- 1.3. Back to the Example\n- 1.4. The Moduleâs Method Table and Initialization Function\n- 1.5. Compilation and Linkage\n- 1.6. Calling Python Functions from C\n- 1.7. Extracting Parameters in Extension Functions\n- 1.8. Keyword Parameters for Extension Func"}
{"url": "https://docs.python.org/3/tutorial/venv.html", "title": "", "text": "12. Virtual Environments and PackagesÂ¶\n12.1. IntroductionÂ¶\nPython applications will often use packages and modules that donât come as part of the standard library. Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the libraryâs interface.\nThis means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.\nThe solution for this problem is to create a virtual environment, a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.\nDifferent applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application Aâs environment.\n12.2. Creating Virtual EnvironmentsÂ¶\nThe module used to create and manage virtual environments is called\nvenv\n. venv\nwill install the Python version from which\nthe command was run (as reported by the --version\noption).\nFor instance, executing the command with python3.12\nwill install\nversion 3.12.\nTo create a virtual environment, decide upon a directory where you want to\nplace it, and run the venv\nmodule as a script with the directory path:\npython -m venv tutorial-env\nThis will create the tutorial-env\ndirectory if it doesnât exist,\nand also create directories inside it containing a copy of the Python\ninterpreter and various supporting files.\nA common directory location for a "}
{"url": "https://docs.python.org/3/c-api/index.html", "title": "", "text": "Python/C API Reference ManualÂ¶\nThis manual documents the API used by C and C++ programmers who want to write extension modules or embed Python. It is a companion to Extending and Embedding the Python Interpreter, which describes the general principles of extension writing but does not document the API functions in detail.\n- Introduction\n- C API Stability\n- The Very High Level Layer\n- Reference Counting\n- Exception Handling\n- Utilities\n- Abstract Objects Layer\n- Concrete Objects Layer\n- Initialization, Finalization, and Threads\n- Before Python Initialization\n- Global configuration variables\n- Initializing and finalizing the interpreter\n- Process-wide parameters\n- Thread State and the Global Interpreter Lock\n- Sub-interpreter support\n- Asynchronous Notifications\n- Profiling and Tracing\n- Reference tracing\n- Advanced Debugger Support\n- Thread Local Storage Support\n- Synchronization Primitives\n- Python Initialization Configuration\n- Memory Management\n- Object Implementation Support\n- API and ABI Versioning\n- Monitoring C API\n- Generating Execution Events"}
{"url": "https://docs.python.org/bugs.html", "title": "", "text": "Dealing with BugsÂ¶\nPython is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how to contribute.\nDocumentation bugsÂ¶\nIf you find a bug in this documentation or would like to propose an improvement, please submit a bug report on the tracker. If you have a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our Documentation Discourse forum.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on the python-doc-theme bug tracker.\nIf youâre short on time, you can also email documentation bug reports to docs@python.org (behavioral bugs can be sent to python-list@python.org). âdocs@â is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.\nSee also\n- Documentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\n- Issue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\n- Helping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\n- Documentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue trackerÂ¶\nIssue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developersâ time, is that you learn what has been "}
{"url": "https://docs.python.org/3/tutorial/stdlib2.html", "title": "", "text": "11. Brief Tour of the Standard Library â Part IIÂ¶\nThis second tour covers more advanced modules that support professional programming needs. These modules rarely occur in small scripts.\n11.1. Output FormattingÂ¶\nThe reprlib\nmodule provides a version of repr()\ncustomized for\nabbreviated displays of large or deeply nested containers:\n>>> import reprlib\n>>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"\nThe pprint\nmodule offers more sophisticated control over printing both\nbuilt-in and user defined objects in a way that is readable by the interpreter.\nWhen the result is longer than one line, the âpretty printerâ adds line breaks\nand indentation to more clearly reveal data structure:\n>>> import pprint\n>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n... 'yellow'], 'blue']]]\n...\n>>> pprint.pprint(t, width=30)\n[[[['black', 'cyan'],\n'white',\n['green', 'red']],\n[['magenta', 'yellow'],\n'blue']]]\nThe textwrap\nmodule formats paragraphs of text to fit a given screen\nwidth:\n>>> import textwrap\n>>> doc = \"\"\"The wrap() method is just like fill() except that it returns\n... a list of strings instead of one big string with newlines to separate\n... the wrapped lines.\"\"\"\n...\n>>> print(textwrap.fill(doc, width=40))\nThe wrap() method is just like fill()\nexcept that it returns a list of strings\ninstead of one big string with newlines\nto separate the wrapped lines.\nThe locale\nmodule accesses a database of culture specific data formats.\nThe grouping attribute of localeâs format function provides a direct way of\nformatting numbers with group separators:\n>>> import locale\n>>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n'English_United States.1252'\n>>> conv = locale.localeconv() # get a mapping of conventions\n>>> x = 1234567.8\n>>> locale.format_string(\"%d\", x, grouping=True)\n'1,234,567'\n>>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n... conv['frac_digits'], x), grouping=True)\n'$1,234,567.80'\n1"}
{"url": "https://docs.python.org/3/glossary.html", "title": "", "text": "GlossaryÂ¶\n>>>\nÂ¶The default Python prompt of the interactive shell. Often seen for code examples which can be executed interactively in the interpreter.\n...\nÂ¶Can refer to:\nThe default Python prompt of the interactive shell when entering the code for an indented code block, when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or triple quotes), or after specifying a decorator.\nThe three dots form of the Ellipsis object.\n- abstract base classÂ¶\nAbstract base classes complement duck-typing by providing a way to define interfaces when other techniques like\nhasattr()\nwould be clumsy or subtly wrong (for example with magic methods). ABCs introduce virtual subclasses, which are classes that donât inherit from a class but are still recognized byisinstance()\nandissubclass()\n; see theabc\nmodule documentation. Python comes with many built-in ABCs for data structures (in thecollections.abc\nmodule), numbers (in thenumbers\nmodule), streams (in theio\nmodule), import finders and loaders (in theimportlib.abc\nmodule). You can create your own ABCs with theabc\nmodule.- annotationÂ¶\nA label associated with a variable, a class attribute or a function parameter or return value, used by convention as a type hint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the\n__annotations__\nspecial attribute of modules, classes, and functions, respectively.See variable annotation, function annotation, PEP 484 and PEP 526, which describe this functionality. Also see Annotations Best Practices for best practices on working with annotations.\n- argumentÂ¶\nA value passed to a function (or method) when calling the function. There are two kinds of argument:\nkeyword argument: an argument preceded by an identifier (e.g.\nname=\n) in a function call or passed as a value in a dictionary preceded by**\n. For example,3\nand5\nare both keyword arguments in the following call"}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "title": "", "text": "5. Data StructuresÂ¶\nThis chapter describes some things youâve learned about already in more detail, and adds some new things as well.\n5.1. More on ListsÂ¶\nThe list data type has some more methods. Here are all of the methods of list objects:\n- list.append(x)\nAdd an item to the end of the list. Similar to\na[len(a):] = [x]\n.\n- list.extend(iterable)\nExtend the list by appending all the items from the iterable. Similar to\na[len(a):] = iterable\n.\n- list.insert(i, x)\nInsert an item at a given position. The first argument is the index of the element before which to insert, so\na.insert(0, x)\ninserts at the front of the list, anda.insert(len(a), x)\nis equivalent toa.append(x)\n.\n- list.remove(x)\nRemove the first item from the list whose value is equal to x. It raises a\nValueError\nif there is no such item.\n- list.pop([i])\nRemove the item at the given position in the list, and return it. If no index is specified,\na.pop()\nremoves and returns the last item in the list. It raises anIndexError\nif the list is empty or the index is outside the list range.\n- list.clear()\nRemove all items from the list. Similar to\ndel a[:]\n.\n- list.index(x[, start[, end]])\nReturn zero-based index of the first occurrence of x in the list. Raises a\nValueError\nif there is no such item.The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.\n- list.count(x)\nReturn the number of times x appears in the list.\n- list.sort(*, key=None, reverse=False)\nSort the items of the list in place (the arguments can be used for sort customization, see\nsorted()\nfor their explanation).\n- list.reverse()\nReverse the elements of the list in place.\n- list.copy()\nReturn a shallow copy of the list. Similar to\na[:]\n.\nAn example that uses most of the list methods:\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple',"}
{"url": "https://docs.python.org/3/copyright.html", "title": "", "text": "CopyrightÂ¶\nPython and this documentation is:\nCopyright Â© 2001-2024 Python Software Foundation. All rights reserved.\nCopyright Â© 2000 BeOpen.com. All rights reserved.\nCopyright Â© 1995-2000 Corporation for National Research Initiatives. All rights reserved.\nCopyright Â© 1991-1995 Stichting Mathematisch Centrum. All rights reserved.\nSee History and License for complete license and permissions information."}
{"url": "https://docs.python.org/3/tutorial/interpreter.html", "title": "", "text": "2. Using the Python InterpreterÂ¶\n2.1. Invoking the InterpreterÂ¶\nThe Python interpreter is usually installed as /usr/local/bin/python3.13\non those machines where it is available; putting /usr/local/bin\nin your\nUnix shellâs search path makes it possible to start it by typing the command:\npython3.13\nto the shell. [1] Since the choice of the directory where the interpreter lives\nis an installation option, other places are possible; check with your local\nPython guru or system administrator. (E.g., /usr/local/python\nis a\npopular alternative location.)\nOn Windows machines where you have installed Python from the Microsoft Store, the python3.13\ncommand will be available. If you have\nthe py.exe launcher installed, you can use the py\ncommand. See Excursus: Setting environment variables for other ways to launch Python.\nTyping an end-of-file character (Control-D on Unix, Control-Z on\nWindows) at the primary prompt causes the interpreter to exit with a zero exit\nstatus. If that doesnât work, you can exit the interpreter by typing the\nfollowing command: quit()\n.\nThe interpreterâs line-editing features include interactive editing, history\nsubstitution and code completion on systems that support the GNU Readline library.\nPerhaps the quickest check to see whether command line editing is supported is\ntyping Control-P to the first Python prompt you get. If it beeps, you\nhave command line editing; see Appendix Interactive Input Editing and History Substitution for an\nintroduction to the keys. If nothing appears to happen, or if ^P\nis\nechoed, command line editing isnât available; youâll only be able to use\nbackspace to remove characters from the current line.\nThe interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.\nA second way of starting the interpreter is python -"}
{"url": "https://docs.python.org/3/tutorial/appetite.html", "title": "", "text": "1. Whetting Your AppetiteÂ¶\nIf you do much work on computers, eventually you find that thereâs some task youâd like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps youâd like to write a small custom database, or a specialized GUI application, or a simple game.\nIf youâre a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow. Perhaps youâre writing a test suite for such a library and find writing the testing code a tedious task. Or maybe youâve written a program that could use an extension language, and you donât want to design and implement a whole new language for your application.\nPython is just the language for you.\nYou could write a Unix shell script or Windows batch files for some of these tasks, but shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a first-draft program. Python is simpler to use, available on Windows, macOS, and Unix operating systems, and will help you get the job done more quickly.\nPython is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer. On the other hand, Python also offers much more error checking than C, and, being a very-high-level language, it has high-level data types built in, such as flexible arrays and dictionaries. Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages.\nPython allows you to split your program into modules that can be reused in other Python programs. It comes with a large collection of stand"}
{"url": "https://docs.python.org/3/library/xml.sax.html", "title": "", "text": "xml.sax\nâ Support for SAX2 parsersÂ¶\nSource code: Lib/xml/sax/__init__.py\nThe xml.sax\npackage provides a number of modules which implement the\nSimple API for XML (SAX) interface for Python. The package itself provides the\nSAX exceptions and the convenience functions which will be most used by users of\nthe SAX API.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nChanged in version 3.7.1: The SAX parser no longer processes general external entities by default\nto increase security. Before, the parser created network connections\nto fetch remote files or loaded local files from the file\nsystem for DTD and entities. The feature can be enabled again with method\nsetFeature()\non the parser object\nand argument feature_external_ges\n.\nThe convenience functions are:\n- xml.sax.make_parser(parser_list=[])Â¶\nCreate and return a SAX\nXMLReader\nobject. The first parser found will be used. If parser_list is provided, it must be an iterable of strings which name modules that have a function namedcreate_parser()\n. Modules listed in parser_list will be used before modules in the default list of parsers.Changed in version 3.8: The parser_list argument can be any iterable, not just a list.\n- xml.sax.parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())Â¶\nCreate a SAX parser and use it to parse a document. The document, passed in as filename_or_stream, can be a filename or a file object. The handler parameter needs to be a SAX\nContentHandler\ninstance. If error_handler is given, it must be a SAXErrorHandler\ninstance; if omitted,SAXParseException\nwill be raised on all errors. There is no return value; all work must be done by the handler passed in.\n- xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())Â¶\nSimilar to\nparse()\n, but parses from a buffer string received as a parameter. string must be astr\ninstance or a bytes-like object.Changed in version 3.5: Added support of\nstr\ninstances.\nA typical SAX application uses three"}
{"url": "https://docs.python.org/3/library/__future__.html", "title": "", "text": "__future__\nâ Future statement definitionsÂ¶\nSource code: Lib/__future__.py\nImports of the form from __future__ import feature\nare called\nfuture statements. These are special-cased by the Python compiler\nto allow the use of new Python features in modules containing the future statement\nbefore the release in which the feature becomes standard.\nWhile these future statements are given additional special meaning by the\nPython compiler, they are still executed like any other import statement and\nthe __future__\nexists and is handled by the import system the same way\nany other Python module would be. This design serves three purposes:\nTo avoid confusing existing tools that analyze import statements and expect to find the modules theyâre importing.\nTo document when incompatible changes were introduced, and when they will be â or were â made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing\n__future__\nand examining its contents.To ensure that future statements run under releases prior to Python 2.1 at least yield runtime exceptions (the import of\n__future__\nwill fail, because there was no module of that name prior to 2.1).\nModule ContentsÂ¶\nNo feature description will ever be deleted from __future__\n. Since its\nintroduction in Python 2.1 the following features have found their way into the\nlanguage using this mechanism:\nfeature |\noptional in |\nmandatory in |\neffect |\n|---|---|---|---|\n|\n2.1.0b1 |\n2.2 |\nPEP 227: Statically Nested Scopes |\n|\n2.2.0a1 |\n2.3 |\nPEP 255: Simple Generators |\n|\n2.2.0a2 |\n3.0 |\nPEP 238: Changing the Division Operator |\n|\n2.5.0a1 |\n3.0 |\nPEP 328: Imports: Multi-Line and Absolute/Relative |\n|\n2.5.0a1 |\n2.6 |\nPEP 343: The âwithâ Statement |\n|\n2.6.0a2 |\n3.0 |\nPEP 3105: Make print a function |\n|\n2.6.0a2 |\n3.0 |\nPEP 3112: Bytes literals in Python 3000 |\n|\n3.5.0b1 |\n3.7 |\nPEP 479: StopIteration handling inside generators |\n|\n3.7.0b1 |\nNever [1] |\nPEP 563: Postponed evaluation of annotations |\n- class __"}
{"url": "https://docs.python.org/3/library/pickletools.html", "title": "", "text": "pickletools\nâ Tools for pickle developersÂ¶\nSource code: Lib/pickletools.py\nThis module contains various constants relating to the intimate details of the\npickle\nmodule, some lengthy comments about the implementation, and a\nfew useful functions for analyzing pickled data. The contents of this module\nare useful for Python core developers who are working on the pickle\n;\nordinary users of the pickle\nmodule probably wonât find the\npickletools\nmodule relevant.\nCommand line usageÂ¶\nAdded in version 3.2.\nWhen invoked from the command line, python -m pickletools\nwill\ndisassemble the contents of one or more pickle files. Note that if\nyou want to see the Python object stored in the pickle rather than the\ndetails of pickle format, you may want to use -m pickle\ninstead.\nHowever, when the pickle file that you want to examine comes from an\nuntrusted source, -m pickletools\nis a safer option because it does\nnot execute pickle bytecode.\nFor example, with a tuple (1, 2)\npickled in file x.pickle\n:\n$ python -m pickle x.pickle\n(1, 2)\n$ python -m pickletools x.pickle\n0: \\x80 PROTO 3\n2: K BININT1 1\n4: K BININT1 2\n6: \\x86 TUPLE2\n7: q BINPUT 0\n9: . STOP\nhighest protocol among opcodes = 2\nCommand line optionsÂ¶\n- -a, --annotateÂ¶\nAnnotate each line with a short opcode description.\n- -o, --output=<file>Â¶\nName of a file where the output should be written.\n- -l, --indentlevel=<num>Â¶\nThe number of blanks by which to indent a new MARK level.\n- -m, --memoÂ¶\nWhen multiple objects are disassembled, preserve memo between disassemblies.\n- -p, --preamble=<preamble>Â¶\nWhen more than one pickle file are specified, print given preamble before each disassembly.\nProgrammatic InterfaceÂ¶\n- pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)Â¶\nOutputs a symbolic disassembly of the pickle to the file-like object out, defaulting to\nsys.stdout\n. pickle can be a string or a file-like object. memo can be a Python dictionary that will be used as the pickleâs memo; it can be used to perform dis"}
{"url": "https://docs.python.org/3/library/importlib.resources.html", "title": "", "text": "importlib.resources\nâ Package resource reading, opening and accessÂ¶\nSource code: Lib/importlib/resources/__init__.py\nAdded in version 3.7.\nThis module leverages Pythonâs import system to provide access to resources within packages.\nâResourcesâ are file-like resources associated with a module or package in\nPython. The resources may be contained directly in a package, within a\nsubdirectory contained in that package, or adjacent to modules outside a\npackage. Resources may be text or binary. As a result, a packageâs Python\nmodule sources (.py), compilation artifacts (pycache), and installation\nartifacts (like reserved filenames\nin directories) are technically de-facto resources of that package.\nIn practice, however, resources are primarily those non-Python artifacts\nexposed specifically by the package author.\nResources can be opened or read in either binary or text mode.\nResources are roughly akin to files inside directories, though itâs important\nto keep in mind that this is just a metaphor. Resources and packages do\nnot have to exist as physical files and directories on the file system:\nfor example, a package and its resources can be imported from a zip file using\nzipimport\n.\nNote\nThis module provides functionality similar to pkg_resources Basic Resource Access without the performance overhead of that package. This makes reading resources included in packages easier, with more stable and consistent semantics.\nThe standalone backport of this module provides more information on using importlib.resources and migrating from pkg_resources to importlib.resources.\nLoaders\nthat wish to support resource reading should implement a\nget_resource_reader(fullname)\nmethod as specified by\nimportlib.resources.abc.ResourceReader\n.\n- class importlib.resources.AnchorÂ¶\nRepresents an anchor for resources, either a\nmodule object\nor a module name as a string. Defined asUnion[str, ModuleType]\n.\n- importlib.resources.files(anchor: Anchor | None = None)Â¶\nReturns a\nTraversable\nobject represen"}
{"url": "https://docs.python.org/3/library/os.path.html", "title": "", "text": "os.path\nâ Common pathname manipulationsÂ¶\nSource code: Lib/genericpath.py, Lib/posixpath.py (for POSIX) and Lib/ntpath.py (for Windows).\nThis module implements some useful functions on pathnames. To read or write\nfiles see open()\n, and for accessing the filesystem see the os\nmodule. The path parameters can be passed as strings, or bytes, or any object\nimplementing the os.PathLike\nprotocol.\nUnlike a Unix shell, Python does not do any automatic path expansions.\nFunctions such as expanduser()\nand expandvars()\ncan be invoked\nexplicitly when an application desires shell-like path expansion. (See also\nthe glob\nmodule.)\nSee also\nThe pathlib\nmodule offers high-level path objects.\nNote\nAll of these functions accept either only bytes or only string objects as their parameters. The result is an object of the same type, if a path or file name is returned.\nNote\nSince different operating systems have different path name conventions, there\nare several versions of this module in the standard library. The\nos.path\nmodule is always the path module suitable for the operating\nsystem Python is running on, and therefore usable for local paths. However,\nyou can also import and use the individual modules if you want to manipulate\na path that is always in one of the different formats. They all have the\nsame interface:\nposixpath\nfor UNIX-style pathsntpath\nfor Windows paths\nChanged in version 3.8: exists()\n, lexists()\n, isdir()\n, isfile()\n,\nislink()\n, and ismount()\nnow return False\ninstead of\nraising an exception for paths that contain characters or bytes\nunrepresentable at the OS level.\n- os.path.abspath(path)Â¶\nReturn a normalized absolutized version of the pathname path. On most platforms, this is equivalent to calling the function\nnormpath()\nas follows:normpath(join(os.getcwd(), path))\n.Changed in version 3.6: Accepts a path-like object.\n- os.path.basename(path, /)Â¶\nReturn the base name of pathname path. This is the second element of the pair returned by passing path to the function\nsplit"}
{"url": "https://docs.python.org/3/library/xml.sax.utils.html", "title": "", "text": "xml.sax.saxutils\nâ SAX UtilitiesÂ¶\nSource code: Lib/xml/sax/saxutils.py\nThe module xml.sax.saxutils\ncontains a number of classes and functions\nthat are commonly useful when creating SAX applications, either in direct use,\nor as base classes.\n- xml.sax.saxutils.escape(data, entities={})Â¶\nEscape\n'&'\n,'<'\n, and'>'\nin a string of data.You can escape other strings of data by passing a dictionary as the optional entities parameter. The keys and values must all be strings; each key will be replaced with its corresponding value. The characters\n'&'\n,'<'\nand'>'\nare always escaped, even if entities is provided.Note\nThis function should only be used to escape characters that canât be used directly in XML. Do not use this function as a general string translation function.\n- xml.sax.saxutils.unescape(data, entities={})Â¶\nUnescape\n'&'\n,'<'\n, and'>'\nin a string of data.You can unescape other strings of data by passing a dictionary as the optional entities parameter. The keys and values must all be strings; each key will be replaced with its corresponding value.\n'&'\n,'<'\n, and'>'\nare always unescaped, even if entities is provided.\n- xml.sax.saxutils.quoteattr(data, entities={})Â¶\nSimilar to\nescape()\n, but also prepares data to be used as an attribute value. The return value is a quoted version of data with any additional required replacements.quoteattr()\nwill select a quote character based on the content of data, attempting to avoid encoding any quote characters in the string. If both single- and double-quote characters are already in data, the double-quote characters will be encoded and data will be wrapped in double-quotes. The resulting string can be used directly as an attribute value:>>> print(\"<element attr=%s>\" % quoteattr(\"ab ' cd \\\" ef\")) <element attr=\"ab ' cd \" ef\">\nThis function is useful when generating attribute values for HTML or any SGML using the reference concrete syntax.\n- class xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=F"}
{"url": "https://docs.python.org/3/library/email.html", "title": "", "text": "email\nâ An email and MIME handling packageÂ¶\nSource code: Lib/email/__init__.py\nThe email\npackage is a library for managing email messages. It is\nspecifically not designed to do any sending of email messages to SMTP\n(RFC 2821), NNTP, or other servers; those are functions of modules such as\nsmtplib\n. The email\npackage attempts to be as\nRFC-compliant as possible, supporting RFC 5322 and RFC 6532, as well as\nsuch MIME-related RFCs as RFC 2045, RFC 2046, RFC 2047, RFC 2183,\nand RFC 2231.\nThe overall structure of the email package can be divided into three major components, plus a fourth component that controls the behavior of the other components.\nThe central component of the package is an âobject modelâ that represents email\nmessages. An application interacts with the package primarily through the\nobject model interface defined in the message\nsub-module. The\napplication can use this API to ask questions about an existing email, to\nconstruct a new email, or to add or remove email subcomponents that themselves\nuse the same object model interface. That is, following the nature of email\nmessages and their MIME subcomponents, the email object model is a tree\nstructure of objects that all provide the EmailMessage\nAPI.\nThe other two major components of the package are the parser\nand\nthe generator\n. The parser takes the serialized version of an\nemail message (a stream of bytes) and converts it into a tree of\nEmailMessage\nobjects. The generator takes an\nEmailMessage\nand turns it back into a serialized byte\nstream. (The parser and generator also handle streams of text characters, but\nthis usage is discouraged as it is too easy to end up with messages that are\nnot valid in one way or another.)\nThe control component is the policy\nmodule. Every\nEmailMessage\n, every generator\n, and every\nparser\nhas an associated policy\nobject that\ncontrols its behavior. Usually an application only needs to specify the policy\nwhen an EmailMessage\nis created, either by directly\ninstantiating an EmailM"}
{"url": "https://docs.python.org/3/library/plistlib.html", "title": "", "text": "plistlib\nâ Generate and parse Apple .plist\nfilesÂ¶\nSource code: Lib/plistlib.py\nThis module provides an interface for reading and writing the âproperty listâ files used by Apple, primarily on macOS and iOS. This module supports both binary and XML plist files.\nThe property list (.plist\n) file format is a simple serialization supporting\nbasic object types, like dictionaries, lists, numbers and strings. Usually the\ntop level object is a dictionary.\nTo write out and to parse a plist file, use the dump()\nand\nload()\nfunctions.\nTo work with plist data in bytes or string objects, use dumps()\nand loads()\n.\nValues can be strings, integers, floats, booleans, tuples, lists, dictionaries\n(but only with string keys), bytes\n, bytearray\nor datetime.datetime\nobjects.\nChanged in version 3.4: New API, old API deprecated. Support for binary format plists added.\nChanged in version 3.8: Support added for reading and writing UID\ntokens in binary plists as used\nby NSKeyedArchiver and NSKeyedUnarchiver.\nChanged in version 3.9: Old API removed.\nSee also\n- PList manual page\nAppleâs documentation of the file format.\nThis module defines the following functions:\n- plistlib.load(fp, *, fmt=None, dict_type=dict, aware_datetime=False)Â¶\nRead a plist file. fp should be a readable and binary file object. Return the unpacked root object (which usually is a dictionary).\nThe fmt is the format of the file and the following values are valid:\nNone\n: Autodetect the file formatFMT_XML\n: XML file formatFMT_BINARY\n: Binary plist format\nThe dict_type is the type used for dictionaries that are read from the plist file.\nWhen aware_datetime is true, fields with type\ndatetime.datetime\nwill be created as aware object, withtzinfo\nasdatetime.UTC\n.XML data for the\nFMT_XML\nformat is parsed using the Expat parser fromxml.parsers.expat\nâ see its documentation for possible exceptions on ill-formed XML. Unknown elements will simply be ignored by the plist parser.The parser raises\nInvalidFileException\nwhen the file cannot b"}
{"url": "https://docs.python.org/3/library/lzma.html", "title": "", "text": "lzma\nâ Compression using the LZMA algorithmÂ¶\nAdded in version 3.3.\nSource code: Lib/lzma.py\nThis module provides classes and convenience functions for compressing and\ndecompressing data using the LZMA compression algorithm. Also included is a file\ninterface supporting the .xz\nand legacy .lzma\nfile formats used by the\nxz utility, as well as raw compressed streams.\nThe interface provided by this module is very similar to that of the bz2\nmodule. Note that LZMAFile\nand bz2.BZ2File\nare not\nthread-safe, so if you need to use a single LZMAFile\ninstance\nfrom multiple threads, it is necessary to protect it with a lock.\n- exception lzma.LZMAErrorÂ¶\nThis exception is raised when an error occurs during compression or decompression, or while initializing the compressor/decompressor state.\nReading and writing compressed filesÂ¶\n- lzma.open(filename, mode='rb', *, format=None, check=-1, preset=None, filters=None, encoding=None, errors=None, newline=None)Â¶\nOpen an LZMA-compressed file in binary or text mode, returning a file object.\nThe filename argument can be either an actual file name (given as a\nstr\n,bytes\nor path-like object), in which case the named file is opened, or it can be an existing file object to read from or write to.The mode argument can be any of\n\"r\"\n,\"rb\"\n,\"w\"\n,\"wb\"\n,\"x\"\n,\"xb\"\n,\"a\"\nor\"ab\"\nfor binary mode, or\"rt\"\n,\"wt\"\n,\"xt\"\n, or\"at\"\nfor text mode. The default is\"rb\"\n.When opening a file for reading, the format and filters arguments have the same meanings as for\nLZMADecompressor\n. In this case, the check and preset arguments should not be used.When opening a file for writing, the format, check, preset and filters arguments have the same meanings as for\nLZMACompressor\n.For binary mode, this function is equivalent to the\nLZMAFile\nconstructor:LZMAFile(filename, mode, ...)\n. In this case, the encoding, errors and newline arguments must not be provided.For text mode, a\nLZMAFile\nobject is created, and wrapped in anio.TextIOWrapper\ninstance with the specified encoding, "}
{"url": "https://docs.python.org/3/library/winsound.html", "title": "", "text": "winsound\nâ Sound-playing interface for WindowsÂ¶\nThe winsound\nmodule provides access to the basic sound-playing machinery\nprovided by Windows platforms. It includes functions and several constants.\n- winsound.Beep(frequency, duration)Â¶\nBeep the PCâs speaker. The frequency parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The duration parameter specifies the number of milliseconds the sound should last. If the system is not able to beep the speaker,\nRuntimeError\nis raised.\n- winsound.PlaySound(sound, flags)Â¶\nCall the underlying\nPlaySound()\nfunction from the Platform API. The sound parameter may be a filename, a system sound alias, audio data as a bytes-like object, orNone\n. Its interpretation depends on the value of flags, which can be a bitwise ORed combination of the constants described below. If the sound parameter isNone\n, any currently playing waveform sound is stopped. If the system indicates an error,RuntimeError\nis raised.\n- winsound.MessageBeep(type=MB_OK)Â¶\nCall the underlying\nMessageBeep()\nfunction from the Platform API. This plays a sound as specified in the registry. The type argument specifies which sound to play; possible values are-1\n,MB_ICONASTERISK\n,MB_ICONEXCLAMATION\n,MB_ICONHAND\n,MB_ICONQUESTION\n, andMB_OK\n, all described below. The value-1\nproduces a âsimple beepâ; this is the final fallback if a sound cannot be played otherwise. If the system indicates an error,RuntimeError\nis raised.\n- winsound.SND_ALIASÂ¶\nThe sound parameter is a sound association name from the registry. If the registry contains no such name, play the system default sound unless\nSND_NODEFAULT\nis also specified. If no default sound is registered, raiseRuntimeError\n. Do not use withSND_FILENAME\n.All Win32 systems support at least the following; most systems support many more:\nPlaySound()\nnameCorresponding Control Panel Sound name\n'SystemAsterisk'\nAsterisk\n'SystemExclamation'\nExclamation\n'SystemExit'\nExit Windows\n'SystemHand'\nCri"}
{"url": "https://docs.python.org/3/library/sqlite3.html", "title": "", "text": "sqlite3\nâ DB-API 2.0 interface for SQLite databasesÂ¶\nSource code: Lib/sqlite3/\nSQLite is a C library that provides a lightweight disk-based database that doesnât require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. Itâs also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.\nThe sqlite3\nmodule was written by Gerhard HÃ¤ring. It provides an SQL interface\ncompliant with the DB-API 2.0 specification described by PEP 249, and\nrequires SQLite 3.15.2 or newer.\nThis document includes four main sections:\nTutorial teaches how to use the\nsqlite3\nmodule.Reference describes the classes and functions this module defines.\nHow-to guides details how to handle specific tasks.\nExplanation provides in-depth background on transaction control.\nSee also\n- https://www.sqlite.org\nThe SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect.\n- https://www.w3schools.com/sql/\nTutorial, reference and examples for learning SQL syntax.\n- PEP 249 - Database API Specification 2.0\nPEP written by Marc-AndrÃ© Lemburg.\nTutorialÂ¶\nIn this tutorial, you will create a database of Monty Python movies\nusing basic sqlite3\nfunctionality.\nIt assumes a fundamental understanding of database concepts,\nincluding cursors and transactions.\nFirst, we need to create a new database and open\na database connection to allow sqlite3\nto work with it.\nCall sqlite3.connect()\nto create a connection to\nthe database tutorial.db\nin the current working directory,\nimplicitly creating it if it does not exist:\nimport sqlite3\ncon = sqlite3.connect(\"tutorial.db\")\nThe returned Connection\nobject con\nrepresents the connection to the on-disk database.\nIn order to execute SQL statements and fetch results from SQL queries,\nwe will need to use a database cursor.\nCall con.cursor()\nto c"}
{"url": "https://docs.python.org/3/library/shutil.html", "title": "", "text": "shutil\nâ High-level file operationsÂ¶\nSource code: Lib/shutil.py\nThe shutil\nmodule offers a number of high-level operations on files and\ncollections of files. In particular, functions are provided which support file\ncopying and removal. For operations on individual files, see also the\nos\nmodule.\nWarning\nEven the higher-level file copying functions (shutil.copy()\n,\nshutil.copy2()\n) cannot copy all file metadata.\nOn POSIX platforms, this means that file owner and group are lost as well as ACLs. On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied.\nDirectory and files operationsÂ¶\n- shutil.copyfileobj(fsrc, fdst[, length])Â¶\nCopy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is the buffer size. In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied.\n- shutil.copyfile(src, dst, *, follow_symlinks=True)Â¶\nCopy the contents (no metadata) of the file named src to a file named dst and return dst in the most efficient way possible. src and dst are path-like objects or path names given as strings.\ndst must be the complete target file name; look at\ncopy()\nfor a copy that accepts a target directory path. If src and dst specify the same file,SameFileError\nis raised.The destination location must be writable; otherwise, an\nOSError\nexception will be raised. If dst already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function.If follow_symlinks is false and src is a symbolic link, a new symbolic link will"}
{"url": "https://docs.python.org/3/library/pathlib.html", "title": "", "text": "pathlib\nâ Object-oriented filesystem pathsÂ¶\nAdded in version 3.4.\nSource code: Lib/pathlib/\nThis module offers classes representing filesystem paths with semantics appropriate for different operating systems. Path classes are divided between pure paths, which provide purely computational operations without I/O, and concrete paths, which inherit from pure paths but also provide I/O operations.\nIf youâve never used this module before or just arenât sure which class is\nright for your task, Path\nis most likely what you need. It instantiates\na concrete path for the platform the code is running on.\nPure paths are useful in some special cases; for example:\nIf you want to manipulate Windows paths on a Unix machine (or vice versa). You cannot instantiate a\nWindowsPath\nwhen running on Unix, but you can instantiatePureWindowsPath\n.You want to make sure that your code only manipulates paths without actually accessing the OS. In this case, instantiating one of the pure classes may be useful since those simply donât have any OS-accessing operations.\nSee also\nPEP 428: The pathlib module â object-oriented filesystem paths.\nSee also\nFor low-level path manipulation on strings, you can also use the\nos.path\nmodule.\nBasic useÂ¶\nImporting the main class:\n>>> from pathlib import Path\nListing subdirectories:\n>>> p = Path('.')\n>>> [x for x in p.iterdir() if x.is_dir()]\n[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\nPosixPath('__pycache__'), PosixPath('build')]\nListing Python source files in this directory tree:\n>>> list(p.glob('**/*.py'))\n[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\nPosixPath('pathlib.py'), PosixPath('docs/conf.py'),\nPosixPath('build/lib/pathlib.py')]\nNavigating inside a directory tree:\n>>> p = Path('/etc')\n>>> q = p / 'init.d' / 'reboot'\n>>> q\nPosixPath('/etc/init.d/reboot')\n>>> q.resolve()\nPosixPath('/etc/rc.d/init.d/halt')\nQuerying path properties:\n>>> q.exists()\nTrue\n>>> q.is_dir()\nFalse\nOpening a file:\n>>> with q.open() as f: f.readline()\n...\n'#!/bi"}
{"url": "https://docs.python.org/3/library/errno.html", "title": "", "text": "errno\nâ Standard errno system symbolsÂ¶\nThis module makes available standard errno\nsystem symbols. The value of each\nsymbol is the corresponding integer value. The names and descriptions are\nborrowed from linux/include/errno.h\n, which should be\nall-inclusive.\n- errno.errorcodeÂ¶\nDictionary providing a mapping from the errno value to the string name in the underlying system. For instance,\nerrno.errorcode[errno.EPERM]\nmaps to'EPERM'\n.\nTo translate a numeric error code to an error message, use os.strerror()\n.\nOf the following list, symbols that are not used on the current platform are not\ndefined by the module. The specific list of defined symbols is available as\nerrno.errorcode.keys()\n. Symbols available can include:\n- errno.EPERMÂ¶\nOperation not permitted. This error is mapped to the exception\nPermissionError\n.\n- errno.ENOENTÂ¶\nNo such file or directory. This error is mapped to the exception\nFileNotFoundError\n.\n- errno.ESRCHÂ¶\nNo such process. This error is mapped to the exception\nProcessLookupError\n.\n- errno.EINTRÂ¶\nInterrupted system call. This error is mapped to the exception\nInterruptedError\n.\n- errno.EIOÂ¶\nI/O error\n- errno.ENXIOÂ¶\nNo such device or address\n- errno.E2BIGÂ¶\nArg list too long\n- errno.ENOEXECÂ¶\nExec format error\n- errno.EBADFÂ¶\nBad file number\n- errno.ECHILDÂ¶\nNo child processes. This error is mapped to the exception\nChildProcessError\n.\n- errno.EAGAINÂ¶\nTry again. This error is mapped to the exception\nBlockingIOError\n.\n- errno.ENOMEMÂ¶\nOut of memory\n- errno.EACCESÂ¶\nPermission denied. This error is mapped to the exception\nPermissionError\n.\n- errno.EFAULTÂ¶\nBad address\n- errno.ENOTBLKÂ¶\nBlock device required\n- errno.EBUSYÂ¶\nDevice or resource busy\n- errno.EEXISTÂ¶\nFile exists. This error is mapped to the exception\nFileExistsError\n.\n- errno.EXDEVÂ¶\nCross-device link\n- errno.ENODEVÂ¶\nNo such device\n- errno.ENOTDIRÂ¶\nNot a directory. This error is mapped to the exception\nNotADirectoryError\n.\n- errno.EISDIRÂ¶\nIs a directory. This error is mapped to the "}
{"url": "https://docs.python.org/3/library/mmap.html", "title": "", "text": "mmap\nâ Memory-mapped file supportÂ¶\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nMemory-mapped file objects behave like both bytearray\nand like\nfile objects. You can use mmap objects in most places\nwhere bytearray\nare expected; for example, you can use the re\nmodule to search through a memory-mapped file. You can also change a single\nbyte by doing obj[index] = 97\n, or change a subsequence by assigning to a\nslice: obj[i1:i2] = b'...'\n. You can also read and write data starting at\nthe current file position, and seek()\nthrough the file to different positions.\nA memory-mapped file is created by the mmap\nconstructor, which is\ndifferent on Unix and on Windows. In either case you must provide a file\ndescriptor for a file opened for update. If you wish to map an existing Python\nfile object, use its fileno()\nmethod to obtain the correct value for the\nfileno parameter. Otherwise, you can open the file using the\nos.open()\nfunction, which returns a file descriptor directly (the file\nstill needs to be closed when done).\nNote\nIf you want to create a memory-mapping for a writable, buffered file, you\nshould flush()\nthe file first. This is necessary to ensure\nthat local modifications to the buffers are actually available to the\nmapping.\nFor both the Unix and Windows versions of the constructor, access may be\nspecified as an optional keyword parameter. access accepts one of four\nvalues: ACCESS_READ\n, ACCESS_WRITE\n, or ACCESS_COPY\nto\nspecify read-only, write-through or copy-on-write memory respectively, or\nACCESS_DEFAULT\nto defer to prot. access can be used on both Unix\nand Windows. If access is not specified, Windows mmap returns a\nwrite-through mapping. The initial memory values for all three access types\nare taken from the specified file. Assignment to an ACCESS_READ\nmemory map raises a TypeError\nexception. Assignment to an\nACCESS_WRITE\nmemory map affects both memory and the underlying file.\nAs"}
{"url": "https://docs.python.org/3/library/mm.html", "title": "", "text": "Multimedia ServicesÂ¶\nThe modules described in this chapter implement various algorithms or interfaces that are mainly useful for multimedia applications. They are available at the discretion of the installation. Hereâs an overview:\nThe modules described in this chapter implement various algorithms or interfaces that are mainly useful for multimedia applications. They are available at the discretion of the installation. Hereâs an overview:"}
{"url": "https://docs.python.org/3/library/audit_events.html", "title": "", "text": "Audit events tableÂ¶\nThis table contains all events raised by sys.audit()\nor\nPySys_Audit()\ncalls throughout the CPython runtime and the\nstandard library. These calls were added in 3.8 or later (see PEP 578).\nSee sys.addaudithook()\nand PySys_AddAuditHook()\nfor\ninformation on handling these events.\nCPython implementation detail: This table is generated from the CPython documentation, and may not represent events raised by other implementations. See your runtime specific documentation for actual events raised.\nAudit event |\nArguments |\nReferences |\n|---|---|---|\n_thread.start_new_thread |\n|\n|\narray.__new__ |\n|\n|\nbuiltins.breakpoint |\n|\n|\nbuiltins.id |\n|\n|\nbuiltins.input |\n|\n|\nbuiltins.input/result |\n|\n|\ncode.__new__ |\n|\n|\ncompile |\n|\n|\ncpython.PyInterpreterState_Clear |\n||\ncpython.PyInterpreterState_New |\n||\ncpython._PySys_ClearAuditHooks |\n||\ncpython.run_command |\n|\n|\ncpython.run_file |\n|\n|\ncpython.run_interactivehook |\n|\n|\ncpython.run_module |\n|\n|\ncpython.run_startup |\n|\n|\ncpython.run_stdin |\n||\nctypes.addressof |\n|\n|\nctypes.call_function |\n|\n|\nctypes.cdata |\n|\n|\nctypes.cdata/buffer |\n|\n|\nctypes.create_string_buffer |\n|\n|\nctypes.create_unicode_buffer |\n|\n|\nctypes.dlopen |\n|\n|\nctypes.dlsym |\n|\n|\nctypes.dlsym/handle |\n|\n|\nctypes.get_errno |\n||\nctypes.get_last_error |\n||\nctypes.set_errno |\n|\n|\nctypes.set_exception |\n|\n|\nctypes.set_last_error |\n|\n|\nctypes.string_at |\n|\n|\nctypes.wstring_at |\n|\n|\nensurepip.bootstrap |\n|\n|\nexec |\n|\n|\nfcntl.fcntl |\n|\n|\nfcntl.flock |\n|\n|\nfcntl.ioctl |\n|\n|\nfcntl.lockf |\n|\n|\nftplib.connect |\n|\n|\nftplib.sendcmd |\n|\n|\nfunction.__new__ |\n|\n|\ngc.get_objects |\n|\n|\ngc.get_referents |\n|\n|\ngc.get_referrers |\n|\n|\nglob.glob |\n|\n|\nglob.glob/2 |\n|\n|\nhttp.client.connect |\n|\n|\nhttp.client.send |\n|\n|\nimaplib.open |\n|\n|\nimaplib.send |\n|\n|\nimport |\n|\n|\nmarshal.dumps |\n|\n|\nmarshal.load |\n||\nmarshal.loads |\n|\n|\nmmap.__new__ |\n|\n|\nmsvcrt.get_osfhandle |\n|\n|\nmsvcrt.locking |\n|\n|\nmsvcrt.open_osfhandle |\n|\n|\nobject.__delattr__ |\n|\n|\nobject.__getattr__ |\n|\n|\nobject.__"}
{"url": "https://docs.python.org/3/library/xml.etree.elementtree.html", "title": "", "text": "xml.etree.ElementTree\nâ The ElementTree XML APIÂ¶\nSource code: Lib/xml/etree/ElementTree.py\nThe xml.etree.ElementTree\nmodule implements a simple and efficient API\nfor parsing and creating XML data.\nChanged in version 3.3: This module will use a fast implementation whenever available.\nDeprecated since version 3.3: The xml.etree.cElementTree\nmodule is deprecated.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nTutorialÂ¶\nThis is a short tutorial for using xml.etree.ElementTree\n(ET\nin\nshort). The goal is to demonstrate some of the building blocks and basic\nconcepts of the module.\nXML tree and elementsÂ¶\nXML is an inherently hierarchical data format, and the most natural way to\nrepresent it is with a tree. ET\nhas two classes for this purpose -\nElementTree\nrepresents the whole XML document as a tree, and\nElement\nrepresents a single node in this tree. Interactions with\nthe whole document (reading and writing to/from files) are usually done\non the ElementTree\nlevel. Interactions with a single XML element\nand its sub-elements are done on the Element\nlevel.\nParsing XMLÂ¶\nWeâll be using the fictive country_data.xml\nXML document as the sample data for this section:\n<?xml version=\"1.0\"?>\n<data>\n<country name=\"Liechtenstein\">\n<rank>1</rank>\n<year>2008</year>\n<gdppc>141100</gdppc>\n<neighbor name=\"Austria\" direction=\"E\"/>\n<neighbor name=\"Switzerland\" direction=\"W\"/>\n</country>\n<country name=\"Singapore\">\n<rank>4</rank>\n<year>2011</year>\n<gdppc>59900</gdppc>\n<neighbor name=\"Malaysia\" direction=\"N\"/>\n</country>\n<country name=\"Panama\">\n<rank>68</rank>\n<year>2011</year>\n<gdppc>13600</gdppc>\n<neighbor name=\"Costa Rica\" direction=\"W\"/>\n<neighbor name=\"Colombia\" direction=\"E\"/>\n</country>\n</data>\nWe can import this data by reading from a file:\nimport xml.etree.ElementTree as ET\ntree = ET.parse('country_data.xml')\nroot = tree.getroot()\nOr directly from a string:\nroot = ET.fromstring(country_data_as_string)\nfromstring()\nparses XML from a string directly into a"}
{"url": "https://docs.python.org/3/library/stat.html", "title": "", "text": "stat\nâ Interpreting stat()\nresultsÂ¶\nSource code: Lib/stat.py\nThe stat\nmodule defines constants and functions for interpreting the\nresults of os.stat()\n, os.fstat()\nand os.lstat()\n(if they\nexist). For complete details about the stat()\n, fstat()\nand\nlstat()\ncalls, consult the documentation for your system.\nChanged in version 3.4: The stat module is backed by a C implementation.\nThe stat\nmodule defines the following functions to test for specific file\ntypes:\n- stat.S_ISDIR(mode)Â¶\nReturn non-zero if the mode is from a directory.\n- stat.S_ISCHR(mode)Â¶\nReturn non-zero if the mode is from a character special device file.\n- stat.S_ISBLK(mode)Â¶\nReturn non-zero if the mode is from a block special device file.\n- stat.S_ISREG(mode)Â¶\nReturn non-zero if the mode is from a regular file.\n- stat.S_ISFIFO(mode)Â¶\nReturn non-zero if the mode is from a FIFO (named pipe).\n- stat.S_ISLNK(mode)Â¶\nReturn non-zero if the mode is from a symbolic link.\n- stat.S_ISSOCK(mode)Â¶\nReturn non-zero if the mode is from a socket.\n- stat.S_ISDOOR(mode)Â¶\nReturn non-zero if the mode is from a door.\nAdded in version 3.4.\n- stat.S_ISPORT(mode)Â¶\nReturn non-zero if the mode is from an event port.\nAdded in version 3.4.\n- stat.S_ISWHT(mode)Â¶\nReturn non-zero if the mode is from a whiteout.\nAdded in version 3.4.\nTwo additional functions are defined for more general manipulation of the fileâs mode:\n- stat.S_IMODE(mode)Â¶\nReturn the portion of the fileâs mode that can be set by\nos.chmod()\nâthat is, the fileâs permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them).\n- stat.S_IFMT(mode)Â¶\nReturn the portion of the fileâs mode that describes the file type (used by the\nS_IS*()\nfunctions above).\nNormally, you would use the os.path.is*()\nfunctions for testing the type\nof a file; the functions here are useful when you are doing multiple tests of\nthe same file and wish to avoid the overhead of the stat()\nsystem call\nfor each test. These are also useful when checking "}
{"url": "https://docs.python.org/3/library/pydoc.html", "title": "", "text": "pydoc\nâ Documentation generator and online help systemÂ¶\nSource code: Lib/pydoc.py\nThe pydoc\nmodule automatically generates documentation from Python\nmodules. The documentation can be presented as pages of text on the console,\nserved to a web browser, or saved to HTML files.\nFor modules, classes, functions and methods, the displayed documentation is\nderived from the docstring (i.e. the __doc__\nattribute) of the object,\nand recursively of its documentable members. If there is no docstring,\npydoc\ntries to obtain a description from the block of comment lines just\nabove the definition of the class, function or method in the source file, or at\nthe top of the module (see inspect.getcomments()\n).\nThe built-in function help()\ninvokes the online help system in the\ninteractive interpreter, which uses pydoc\nto generate its documentation\nas text on the console. The same text documentation can also be viewed from\noutside the Python interpreter by running pydoc as a script at the\noperating systemâs command prompt. For example, running\npython -m pydoc sys\nat a shell prompt will display documentation on the sys\nmodule, in a\nstyle similar to the manual pages shown by the Unix man command. The\nargument to pydoc can be the name of a function, module, or package,\nor a dotted reference to a class, method, or function within a module or module\nin a package. If the argument to pydoc looks like a path (that is,\nit contains the path separator for your operating system, such as a slash in\nUnix), and refers to an existing Python source file, then documentation is\nproduced for that file.\nNote\nIn order to find objects and their documentation, pydoc\nimports the\nmodule(s) to be documented. Therefore, any code on module level will be\nexecuted on that occasion. Use an if __name__ == '__main__':\nguard to\nonly execute code when a file is invoked as a script and not just imported.\nWhen printing output to the console, pydoc attempts to paginate the\noutput for easier reading. If either the MANPAGER\nor t"}
{"url": "https://docs.python.org/3/library/builtins.html", "title": "", "text": "builtins\nâ Built-in objectsÂ¶\nThis module provides direct access to all âbuilt-inâ identifiers of Python; for\nexample, builtins.open\nis the full name for the built-in function open()\n.\nThis module is not normally accessed explicitly by most applications, but can be\nuseful in modules that provide objects with the same name as a built-in value,\nbut in which the built-in of that name is also needed. For example, in a module\nthat wants to implement an open()\nfunction that wraps the built-in\nopen()\n, this module can be used directly:\nimport builtins\ndef open(path):\nf = builtins.open(path, 'r')\nreturn UpperCaser(f)\nclass UpperCaser:\n'''Wrapper around a file that converts output to uppercase.'''\ndef __init__(self, f):\nself._f = f\ndef read(self, count=-1):\nreturn self._f.read(count).upper()\n# ...\nAs an implementation detail, most modules have the name __builtins__\nmade\navailable as part of their globals. The value of __builtins__\nis normally\neither this module or the value of this moduleâs __dict__\nattribute.\nSince this is an implementation detail, it may not be used by alternate\nimplementations of Python."}
{"url": "https://docs.python.org/3/library/unittest.html", "title": "", "text": "unittest\nâ Unit testing frameworkÂ¶\nSource code: Lib/unittest/__init__.py\n(If you are already familiar with the basic concepts of testing, you might want to skip to the list of assert methods.)\nThe unittest\nunit testing framework was originally inspired by JUnit\nand has a similar flavor as major unit testing frameworks in other\nlanguages. It supports test automation, sharing of setup and shutdown code\nfor tests, aggregation of tests into collections, and independence of the\ntests from the reporting framework.\nTo achieve this, unittest\nsupports some important concepts in an\nobject-oriented way:\n- test fixture\nA test fixture represents the preparation needed to perform one or more tests, and any associated cleanup actions. This may involve, for example, creating temporary or proxy databases, directories, or starting a server process.\n- test case\nA test case is the individual unit of testing. It checks for a specific response to a particular set of inputs.\nunittest\nprovides a base class,TestCase\n, which may be used to create new test cases.- test suite\nA test suite is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together.\n- test runner\nA test runner is a component which orchestrates the execution of tests and provides the outcome to the user. The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests.\nSee also\n- Module\ndoctest\nAnother test-support module with a very different flavor.\n- Simple Smalltalk Testing: With Patterns\nKent Beckâs original paper on testing frameworks using the pattern shared by\nunittest\n.- pytest\nThird-party unittest framework with a lighter-weight syntax for writing tests. For example,\nassert func(10) == 42\n.- The Python Testing Tools Taxonomy\nAn extensive list of Python testing tools including functional testing frameworks and mock object libraries.\n- Testing in Python Mailing List\nA special-interest-group for "}
{"url": "https://docs.python.org/3/library/netrc.html", "title": "", "text": "netrc\nâ netrc file processingÂ¶\nSource code: Lib/netrc.py\nThe netrc\nclass parses and encapsulates the netrc file format used by\nthe Unix ftp program and other FTP clients.\n- class netrc.netrc([file])Â¶\nA\nnetrc\ninstance or subclass instance encapsulates data from a netrc file. The initialization argument, if present, specifies the file to parse. If no argument is given, the file.netrc\nin the userâs home directory â as determined byos.path.expanduser()\nâ will be read. Otherwise, aFileNotFoundError\nexception will be raised. Parse errors will raiseNetrcParseError\nwith diagnostic information including the file name, line number, and terminating token.If no argument is specified on a POSIX system, the presence of passwords in the\n.netrc\nfile will raise aNetrcParseError\nif the file ownership or permissions are insecure (owned by a user other than the user running the process, or accessible for read or write by any other user). This implements security behavior equivalent to that of ftp and other programs that use.netrc\n. Such security checks are not available on platforms that do not supportos.getuid()\n.Changed in version 3.4: Added the POSIX permission check.\nChanged in version 3.7:\nos.path.expanduser()\nis used to find the location of the.netrc\nfile when file is not passed as argument.Changed in version 3.10:\nnetrc\ntry UTF-8 encoding before using locale specific encoding. The entry in the netrc file no longer needs to contain all tokens. The missing tokensâ value default to an empty string. All the tokens and their values now can contain arbitrary characters, like whitespace and non-ASCII characters. If the login name is anonymous, it wonât trigger the security check.\n- exception netrc.NetrcParseErrorÂ¶\nException raised by the\nnetrc\nclass when syntactical errors are encountered in source text. Instances of this exception provide three interesting attributes:- msgÂ¶\nTextual explanation of the error.\n- filenameÂ¶\nThe name of the source file.\n- linenoÂ¶\nThe line number on wh"}
{"url": "https://docs.python.org/3/library/urllib.html", "title": "", "text": "urllib\nâ URL handling modulesÂ¶\nSource code: Lib/urllib/\nurllib\nis a package that collects several modules for working with URLs:\nurllib.request\nfor opening and reading URLsurllib.error\ncontaining the exceptions raised byurllib.request\nurllib.parse\nfor parsing URLsurllib.robotparser\nfor parsingrobots.txt\nfiles"}
{"url": "https://docs.python.org/3/library/argparse.html", "title": "", "text": "argparse\nâ Parser for command-line options, arguments and subcommandsÂ¶\nAdded in version 3.2.\nSource code: Lib/argparse.py\nNote\nWhile argparse\nis the default recommended standard library module\nfor implementing basic command line applications, authors with more\nexacting requirements for exactly how their command line applications\nbehave may find it doesnât provide the necessary level of control.\nRefer to Choosing an argument parsing library for alternatives to\nconsider when argparse\ndoesnât support behaviors that the application\nrequires (such as entirely disabling support for interspersed options and\npositional arguments, or accepting option parameter values that start\nwith -\neven when they correspond to another defined option).\nThe argparse\nmodule makes it easy to write user-friendly command-line\ninterfaces. The program defines what arguments it requires, and argparse\nwill figure out how to parse those out of sys.argv\n. The argparse\nmodule also automatically generates help and usage messages. The module\nwill also issue errors when users give the program invalid arguments.\nThe argparse\nmoduleâs support for command-line interfaces is built\naround an instance of argparse.ArgumentParser\n. It is a container for\nargument specifications and has options that apply to the parser as whole:\nparser = argparse.ArgumentParser(\nprog='ProgramName',\ndescription='What the program does',\nepilog='Text at the bottom of help')\nThe ArgumentParser.add_argument()\nmethod attaches individual argument\nspecifications to the parser. It supports positional arguments, options that\naccept values, and on/off flags:\nparser.add_argument('filename') # positional argument\nparser.add_argument('-c', '--count') # option that takes a value\nparser.add_argument('-v', '--verbose',\naction='store_true') # on/off flag\nThe ArgumentParser.parse_args()\nmethod runs the parser and places\nthe extracted data in a argparse.Namespace\nobject:\nargs = parser.parse_args()\nprint(args.filename, args.count, args.verbose)\nNote\n"}
{"url": "https://docs.python.org/3/library/idle.html", "title": "", "text": "IDLE â Python editor and shellÂ¶\nSource code: Lib/idlelib/\nIDLE is Pythonâs Integrated Development and Learning Environment.\nIDLE has the following features:\ncross-platform: works mostly the same on Windows, Unix, and macOS\nPython shell window (interactive interpreter) with colorizing of code input, output, and error messages\nmulti-window text editor with multiple undo, Python colorizing, smart indent, call tips, auto completion, and other features\nsearch within any window, replace within editor windows, and search through multiple files (grep)\ndebugger with persistent breakpoints, stepping, and viewing of global and local namespaces\nconfiguration, browsers, and other dialogs\nStartup and Code ExecutionÂ¶\nUpon startup with the -s\noption, IDLE will execute the file referenced by\nthe environment variables IDLESTARTUP\nor PYTHONSTARTUP\n.\nIDLE first checks for IDLESTARTUP\n; if IDLESTARTUP\nis present the file\nreferenced is run. If IDLESTARTUP\nis not present, IDLE checks for\nPYTHONSTARTUP\n. Files referenced by these environment variables are\nconvenient places to store functions that are used frequently from the IDLE\nshell, or for executing import statements to import common modules.\nIn addition, Tk\nalso loads a startup file if it is present. Note that the\nTk file is loaded unconditionally. This additional file is .Idle.py\nand is\nlooked for in the userâs home directory. Statements in this file will be\nexecuted in the Tk namespace, so this file is not useful for importing\nfunctions to be used from IDLEâs Python shell.\nCommand line usageÂ¶\nIDLE can be invoked from the command line with various options. The general syntax is:\npython -m idlelib [options] [file ...]\nThe following options are available:\n- -c <command>Â¶\nRun the specified Python command in the shell window. For example, pass\n-c \"print('Hello, World!')\"\n. On Windows, the outer quotes must be double quotes as shown.\n- -dÂ¶\nEnable the debugger and open the shell window.\n- -eÂ¶\nOpen an editor window.\n- -hÂ¶\nPrint a hel"}
{"url": "https://docs.python.org/3/library/msvcrt.html", "title": "", "text": "msvcrt\nâ Useful routines from the MS VC++ runtimeÂ¶\nThese functions provide access to some useful capabilities on Windows platforms.\nSome higher-level modules use these functions to build the Windows\nimplementations of their services. For example, the getpass\nmodule uses\nthis in the implementation of the getpass()\nfunction.\nFurther documentation on these functions can be found in the Platform API documentation.\nThe module implements both the normal and wide char variants of the console I/O api. The normal API deals only with ASCII characters and is of limited use for internationalized applications. The wide char API should be used where ever possible.\nFile OperationsÂ¶\n- msvcrt.locking(fd, mode, nbytes)Â¶\nLock part of a file based on file descriptor fd from the C runtime. Raises\nOSError\non failure. The locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file. mode must be one of theLK_*\nconstants listed below. Multiple regions in a file may be locked at the same time, but may not overlap. Adjacent regions are not merged; they must be unlocked individually.Raises an auditing event\nmsvcrt.locking\nwith argumentsfd\n,mode\n,nbytes\n.\n- msvcrt.LK_LOCKÂ¶\n- msvcrt.LK_RLCKÂ¶\nLocks the specified bytes. If the bytes cannot be locked, the program immediately tries again after 1 second. If, after 10 attempts, the bytes cannot be locked,\nOSError\nis raised.\n- msvcrt.LK_NBLCKÂ¶\n- msvcrt.LK_NBRLCKÂ¶\nLocks the specified bytes. If the bytes cannot be locked,\nOSError\nis raised.\n- msvcrt.LK_UNLCKÂ¶\nUnlocks the specified bytes, which must have been previously locked.\n- msvcrt.setmode(fd, flags)Â¶\nSet the line-end translation mode for the file descriptor fd. To set it to text mode, flags should be\nos.O_TEXT\n; for binary, it should beos.O_BINARY\n.\n- msvcrt.open_osfhandle(handle, flags)Â¶\nCreate a C runtime file descriptor from the file handle handle. The flags parameter should be a bitwise OR of\nos.O_APPEND\n,os.O_RDONLY\n,o"}
{"url": "https://docs.python.org/3/library/xml.dom.html", "title": "", "text": "xml.dom\nâ The Document Object Model APIÂ¶\nSource code: Lib/xml/dom/__init__.py\nThe Document Object Model, or âDOM,â is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents. A DOM implementation presents an XML document as a tree structure, or allows client code to build such a structure from scratch. It then gives access to the structure through a set of objects which provided well-known interfaces.\nThe DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another. If you are looking at a text node, you have no access to a containing element. When you write a SAX application, you need to keep track of your programâs position in the document somewhere in your own code. SAX does not do it for you. Also, if you need to look ahead in the XML document, you are just out of luck.\nSome applications are simply impossible in an event driven model with no access to a tree. Of course you could build some sort of tree yourself in SAX events, but the DOM allows you to avoid writing that code. The DOM is a standard tree representation for XML data.\nThe Document Object Model is being defined by the W3C in stages, or âlevelsâ in their terminology. The Python mapping of the API is substantially based on the DOM Level 2 recommendation.\nDOM applications typically start by parsing some XML into a DOM. How this is\naccomplished is not covered at all by DOM Level 1, and Level 2 provides only\nlimited improvements: There is a DOMImplementation\nobject class which\nprovides access to Document\ncreation methods, but no way to access an\nXML reader/parser/Document builder in an implementation-independent way. There\nis also no well-defined way to access these methods without an existing\nDocument\nobject. In Python, each DOM implementation will provide a\nfunction getDOMImplementation()\n. DOM Level 3 adds a Load/Store\nspecific"}
{"url": "https://docs.python.org/3/library/json.html", "title": "", "text": "json\nâ JSON encoder and decoderÂ¶\nSource code: Lib/json/__init__.py\nJSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax (although it is not a strict subset of JavaScript [1] ).\nNote\nThe term âobjectâ in the context of JSON processing in Python can be ambiguous. All values in Python are objects. In JSON, an object refers to any data wrapped in curly braces, similar to a Python dictionary.\nWarning\nBe cautious when parsing JSON data from untrusted sources. A malicious JSON string may cause the decoder to consume considerable CPU and memory resources. Limiting the size of data to be parsed is recommended.\nThis module exposes an API familiar to users of the standard library\nmarshal\nand pickle\nmodules.\nEncoding basic Python object hierarchies:\n>>> import json\n>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n>>> print(json.dumps(\"\\\"foo\\bar\"))\n\"\\\"foo\\bar\"\n>>> print(json.dumps('\\u1234'))\n\"\\u1234\"\n>>> print(json.dumps('\\\\'))\n\"\\\\\"\n>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n>>> from io import StringIO\n>>> io = StringIO()\n>>> json.dump(['streaming API'], io)\n>>> io.getvalue()\n'[\"streaming API\"]'\nCompact encoding:\n>>> import json\n>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))\n'[1,2,3,{\"4\":5,\"6\":7}]'\nPretty printing:\n>>> import json\n>>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))\n{\n\"4\": 5,\n\"6\": 7\n}\nCustomizing JSON object encoding:\n>>> import json\n>>> def custom_json(obj):\n... if isinstance(obj, complex):\n... return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}\n... raise TypeError(f'Cannot serialize object of {type(obj)}')\n...\n>>> json.dumps(1 + 2j, default=custom_json)\n'{\"__complex__\": true, \"real\": 1.0, \"imag\": 2.0}'\nDecoding JSON:\n>>> import json\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]')\n"}
{"url": "https://docs.python.org/3/library/fractions.html", "title": "", "text": "fractions\nâ Rational numbersÂ¶\nSource code: Lib/fractions.py\nThe fractions\nmodule provides support for rational number arithmetic.\nA Fraction instance can be constructed from a pair of rational numbers, from a single number, or from a string.\n- class fractions.Fraction(numerator=0, denominator=1)Â¶\n- class fractions.Fraction(other_fraction)\n- class fractions.Fraction(float)\n- class fractions.Fraction(decimal)\n- class fractions.Fraction(string)\nThe first version requires that numerator and denominator are instances of\nnumbers.Rational\nand returns a newFraction\ninstance with a value equal tonumerator/denominator\n. If denominator is zero, it raises aZeroDivisionError\n. The second version requires that other_fraction is an instance ofnumbers.Rational\nand returns aFraction\ninstance with the same value. The next two versions accept either afloat\nor adecimal.Decimal\ninstance, and return aFraction\ninstance with exactly the same value. Note that due to the usual issues with binary floating point (see Floating-Point Arithmetic: Issues and Limitations), the argument toFraction(1.1)\nis not exactly equal to 11/10, and soFraction(1.1)\ndoes not returnFraction(11, 10)\nas one might expect. (But see the documentation for thelimit_denominator()\nmethod below.) The last version of the constructor expects a string or unicode instance. The usual form for this instance is:[sign] numerator ['/' denominator]\nwhere the optional\nsign\nmay be either â+â or â-â andnumerator\nanddenominator\n(if present) are strings of decimal digits (underscores may be used to delimit digits as with integral literals in code). In addition, any string that represents a finite value and is accepted by thefloat\nconstructor is also accepted by theFraction\nconstructor. In either form the input string may also have leading and/or trailing whitespace. Here are some examples:>>> from fractions import Fraction >>> Fraction(16, -10) Fraction(-8, 5) >>> Fraction(123) Fraction(123, 1) >>> Fraction() Fraction(0, 1) >>> Fraction"}
{"url": "https://docs.python.org/3/library/fileformats.html", "title": "", "text": "File FormatsÂ¶\nThe modules described in this chapter parse various miscellaneous file formats that arenât markup languages and are not related to e-mail.\nThe modules described in this chapter parse various miscellaneous file formats that arenât markup languages and are not related to e-mail."}
{"url": "https://docs.python.org/3/library/stringprep.html", "title": "", "text": "stringprep\nâ Internet String PreparationÂ¶\nSource code: Lib/stringprep.py\nWhen identifying things (such as host names) in the internet, it is often necessary to compare such identifications for âequalityâ. Exactly how this comparison is executed may depend on the application domain, e.g. whether it should be case-insensitive or not. It may be also necessary to restrict the possible identifications, to allow only identifications consisting of âprintableâ characters.\nRFC 3454 defines a procedure for âpreparingâ Unicode strings in internet\nprotocols. Before passing strings onto the wire, they are processed with the\npreparation procedure, after which they have a certain normalized form. The RFC\ndefines a set of tables, which can be combined into profiles. Each profile must\ndefine which tables it uses, and what other optional parts of the stringprep\nprocedure are part of the profile. One example of a stringprep\nprofile is\nnameprep\n, which is used for internationalized domain names.\nThe module stringprep\nonly exposes the tables from RFC 3454. As these\ntables would be very large to represent as dictionaries or lists, the\nmodule uses the Unicode character database internally. The module source code\nitself was generated using the mkstringprep.py\nutility.\nAs a result, these tables are exposed as functions, not as data structures.\nThere are two kinds of tables in the RFC: sets and mappings. For a set,\nstringprep\nprovides the âcharacteristic functionâ, i.e. a function that\nreturns True\nif the parameter is part of the set. For mappings, it provides the\nmapping function: given the key, it returns the associated value. Below is a\nlist of all functions available in the module.\n- stringprep.in_table_a1(code)Â¶\nDetermine whether code is in tableA.1 (Unassigned code points in Unicode 3.2).\n- stringprep.in_table_b1(code)Â¶\nDetermine whether code is in tableB.1 (Commonly mapped to nothing).\n- stringprep.map_table_b2(code)Â¶\nReturn the mapped value for code according to tableB.2 (Mapping"}
{"url": "https://docs.python.org/3/library/tkinter.html", "title": "", "text": "tkinter\nâ Python interface to Tcl/TkÂ¶\nSource code: Lib/tkinter/__init__.py\nThe tkinter\npackage (âTk interfaceâ) is the standard Python interface to\nthe Tcl/Tk GUI toolkit. Both Tk and tkinter\nare available on most Unix\nplatforms, including macOS, as well as on Windows systems.\nRunning python -m tkinter\nfrom the command line should open a window\ndemonstrating a simple Tk interface, letting you know that tkinter\nis\nproperly installed on your system, and also showing what version of Tcl/Tk is\ninstalled, so you can read the Tcl/Tk documentation specific to that version.\nTkinter supports a range of Tcl/Tk versions, built either with or\nwithout thread support. The official Python binary release bundles Tcl/Tk 8.6\nthreaded. See the source code for the _tkinter\nmodule\nfor more information about supported versions.\nTkinter is not a thin wrapper, but adds a fair amount of its own logic to make the experience more pythonic. This documentation will concentrate on these additions and changes, and refer to the official Tcl/Tk documentation for details that are unchanged.\nNote\nTcl/Tk 8.5 (2007) introduced a modern set of themed user interface components along with a new API to use them. Both old and new APIs are still available. Most documentation you will find online still uses the old API and can be woefully outdated.\nSee also\n- TkDocs\nExtensive tutorial on creating user interfaces with Tkinter. Explains key concepts, and illustrates recommended approaches using the modern API.\n- Tkinter 8.5 reference: a GUI for Python\nReference documentation for Tkinter 8.5 detailing available classes, methods, and options.\nTcl/Tk Resources:\n- Tk commands\nComprehensive reference to each of the underlying Tcl/Tk commands used by Tkinter.\n- Tcl/Tk Home Page\nAdditional documentation, and links to Tcl/Tk core development.\nBooks:\n- Modern Tkinter for Busy Python Developers\nBy Mark Roseman. (ISBN 978-1999149567)\n- Python GUI programming with Tkinter\nBy Alan D. Moore. (ISBN 978-1788835886)\n- Programm"}
{"url": "https://docs.python.org/3/library/ensurepip.html", "title": "", "text": "ensurepip\nâ Bootstrapping the pip\ninstallerÂ¶\nAdded in version 3.4.\nSource code: Lib/ensurepip\nThe ensurepip\npackage provides support for bootstrapping the pip\ninstaller into an existing Python installation or virtual environment. This\nbootstrapping approach reflects the fact that pip\nis an independent\nproject with its own release cycle, and the latest available stable version\nis bundled with maintenance and feature releases of the CPython reference\ninterpreter.\nIn most cases, end users of Python shouldnât need to invoke this module\ndirectly (as pip\nshould be bootstrapped by default), but it may be\nneeded if installing pip\nwas skipped when installing Python (or\nwhen creating a virtual environment) or after explicitly uninstalling\npip\n.\nNote\nThis module does not access the internet. All of the components\nneeded to bootstrap pip\nare included as internal parts of the\npackage.\nSee also\n- Installing Python Modules\nThe end user guide for installing Python packages\n- PEP 453: Explicit bootstrapping of pip in Python installations\nThe original rationale and specification for this module.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nCommand line interfaceÂ¶\nThe command line interface is invoked using the interpreterâs -m\nswitch.\nThe simplest possible invocation is:\npython -m ensurepip\nThis invocation will install pip\nif it is not already installed,\nbut otherwise does nothing. To ensure the installed version of pip\nis at least as recent as the one available in ensurepip\n, pass the\n--upgrade\noption:\npython -m ensurepip --upgrade\nBy default, pip\nis installed into the current virtual environment\n(if one is active) or into the system site packages (if there is no\nactive virtual environment). The installation location can be controlled\nthrough two additional command line options:\n- --root <dir>Â¶\nInstalls\npip\nrelative to the given root directory rather than the root of the currently active virtual environme"}
{"url": "https://docs.python.org/3/library/unicodedata.html", "title": "", "text": "unicodedata\nâ Unicode DatabaseÂ¶\nThis module provides access to the Unicode Character Database (UCD) which defines character properties for all Unicode characters. The data contained in this database is compiled from the UCD version 15.1.0.\nThe module uses the same names and symbols as defined by Unicode Standard Annex #44, âUnicode Character Databaseâ. It defines the following functions:\nSee also\nThe Unicode HOWTO for more information about Unicode and how to use this module.\n- unicodedata.lookup(name)Â¶\nLook up character by name. If a character with the given name is found, return the corresponding character. If not found,\nKeyError\nis raised. For example:>>> unicodedata.lookup('LEFT CURLY BRACKET') '{'\nThe characters returned by this function are the same as those produced by\n\\N\nescape sequence in string literals. For example:>>> unicodedata.lookup('MIDDLE DOT') == '\\N{MIDDLE DOT}' True\n- unicodedata.name(chr, default=None, /)Â¶\nReturns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given,\nValueError\nis raised. For example:>>> unicodedata.name('Â½') 'VULGAR FRACTION ONE HALF' >>> unicodedata.name('\\uFFFF', 'fallback') 'fallback'\n- unicodedata.decimal(chr, default=None, /)Â¶\nReturns the decimal value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised. For example:>>> unicodedata.decimal('\\N{ARABIC-INDIC DIGIT NINE}') 9 >>> unicodedata.decimal('\\N{SUPERSCRIPT NINE}', -1) -1\n- unicodedata.digit(chr, default=None, /)Â¶\nReturns the digit value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised:>>> unicodedata.digit('\\N{SUPERSCRIPT NINE}') 9\n- unicodedata.numeric(chr, default=None, /)Â¶\nReturns the numeric value assigned to the character chr as float. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised:>>> unicodedata"}
{"url": "https://docs.python.org/3/library/concurrency.html", "title": "", "text": "Concurrent ExecutionÂ¶\nThe modules described in this chapter provide support for concurrent execution of code. The appropriate choice of tool will depend on the task to be executed (CPU bound vs IO bound) and preferred style of development (event driven cooperative multitasking vs preemptive multitasking). Hereâs an overview:\nthreading\nâ Thread-based parallelismmultiprocessing\nâ Process-based parallelismmultiprocessing.shared_memory\nâ Shared memory for direct access across processes- The\nconcurrent\npackage concurrent.futures\nâ Launching parallel taskssubprocess\nâ Subprocess managementsched\nâ Event schedulerqueue\nâ A synchronized queue classcontextvars\nâ Context Variables\nThe following are support modules for some of the above services:"}
{"url": "https://docs.python.org/3/library/symtable.html", "title": "", "text": "symtable\nâ Access to the compilerâs symbol tablesÂ¶\nSource code: Lib/symtable.py\nSymbol tables are generated by the compiler from AST just before bytecode is\ngenerated. The symbol table is responsible for calculating the scope of every\nidentifier in the code. symtable\nprovides an interface to examine these\ntables.\nGenerating Symbol TablesÂ¶\n- symtable.symtable(code, filename, compile_type)Â¶\nReturn the toplevel\nSymbolTable\nfor the Python source code. filename is the name of the file containing the code. compile_type is like the mode argument tocompile()\n.\nExamining Symbol TablesÂ¶\n- class symtable.SymbolTableTypeÂ¶\nAn enumeration indicating the type of a\nSymbolTable\nobject.- MODULE = \"module\"Â¶\nUsed for the symbol table of a module.\n- FUNCTION = \"function\"Â¶\nUsed for the symbol table of a function.\n- CLASS = \"class\"Â¶\nUsed for the symbol table of a class.\nThe following members refer to different flavors of annotation scopes.\n- ANNOTATION = \"annotation\"Â¶\nUsed for annotations if\nfrom __future__ import annotations\nis active.\n- TYPE_PARAMETERS = \"type parameters\"Â¶\nUsed for the symbol table of generic functions or generic classes.\n- TYPE_VARIABLE = \"type variable\"Â¶\nUsed for the symbol table of the bound, the constraint tuple or the default value of a single type variable in the formal sense, i.e., a TypeVar, a TypeVarTuple or a ParamSpec object (the latter two do not support a bound or a constraint tuple).\nAdded in version 3.13.\n- class symtable.SymbolTableÂ¶\nA namespace table for a block. The constructor is not public.\n- get_type()Â¶\nReturn the type of the symbol table. Possible values are members of the\nSymbolTableType\nenumeration.Changed in version 3.12: Added\n'annotation'\n,'TypeVar bound'\n,'type alias'\n, and'type parameter'\nas possible return values.Changed in version 3.13: Return values are members of the\nSymbolTableType\nenumeration.The exact values of the returned string may change in the future, and thus, it is recommended to use\nSymbolTableType\nmembers instead"}
{"url": "https://docs.python.org/3/library/xmlrpc.server.html", "title": "", "text": "xmlrpc.server\nâ Basic XML-RPC serversÂ¶\nSource code: Lib/xmlrpc/server.py\nThe xmlrpc.server\nmodule provides a basic server framework for XML-RPC\nservers written in Python. Servers can either be free standing, using\nSimpleXMLRPCServer\n, or embedded in a CGI environment, using\nCGIXMLRPCRequestHandler\n.\nWarning\nThe xmlrpc.server\nmodule is not secure against maliciously\nconstructed data. If you need to parse untrusted or unauthenticated data,\nsee XML security.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\n- class xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)Â¶\nCreate a new server instance. This class provides methods for registration of functions that can be called by the XML-RPC protocol. The requestHandler parameter should be a factory for request handler instances; it defaults to\nSimpleXMLRPCRequestHandler\n. The addr and requestHandler parameters are passed to thesocketserver.TCPServer\nconstructor. If logRequests is true (the default), requests will be logged; setting this parameter to false will turn off logging. The allow_none and encoding parameters are passed on toxmlrpc.client\nand control the XML-RPC responses that will be returned from the server. The bind_and_activate parameter controls whetherserver_bind()\nandserver_activate()\nare called immediately by the constructor; it defaults to true. Setting it to false allows code to manipulate the allow_reuse_address class variable before the address is bound. The use_builtin_types parameter is passed to theloads()\nfunction and controls which types are processed when date/times values or binary data are received; it defaults to false.Changed in version 3.3: The use_builtin_types flag was added.\n- class xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None, use_builtin_types=False)Â¶"}
{"url": "https://docs.python.org/3/library/numeric.html", "title": "", "text": "Numeric and Mathematical ModulesÂ¶\nThe modules described in this chapter provide numeric and math-related functions\nand data types. The numbers\nmodule defines an abstract hierarchy of\nnumeric types. The math\nand cmath\nmodules contain various\nmathematical functions for floating-point and complex numbers. The decimal\nmodule supports exact representations of decimal numbers, using arbitrary precision\narithmetic.\nThe following modules are documented in this chapter:\nnumbers\nâ Numeric abstract base classesmath\nâ Mathematical functionscmath\nâ Mathematical functions for complex numbersdecimal\nâ Decimal fixed-point and floating-point arithmeticfractions\nâ Rational numbersrandom\nâ Generate pseudo-random numbersstatistics\nâ Mathematical statistics functions"}
{"url": "https://docs.python.org/3/library/poplib.html", "title": "", "text": "poplib\nâ POP3 protocol clientÂ¶\nSource code: Lib/poplib.py\nThis module defines a class, POP3\n, which encapsulates a connection to a\nPOP3 server and implements the protocol as defined in RFC 1939. The\nPOP3\nclass supports both the minimal and optional command sets from\nRFC 1939. The POP3\nclass also supports the STLS\ncommand introduced\nin RFC 2595 to enable encrypted communication on an already established connection.\nAdditionally, this module provides a class POP3_SSL\n, which provides\nsupport for connecting to POP3 servers that use SSL as an underlying protocol\nlayer.\nNote that POP3, though widely supported, is obsolescent. The implementation\nquality of POP3 servers varies widely, and too many are quite poor. If your\nmailserver supports IMAP, you would be better off using the\nimaplib.IMAP4\nclass, as IMAP servers tend to be better implemented.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe poplib\nmodule provides two classes:\n- class poplib.POP3(host, port=POP3_PORT[, timeout])Â¶\nThis class implements the actual POP3 protocol. The connection is created when the instance is initialized. If port is omitted, the standard POP3 port (110) is used. The optional timeout parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).\nRaises an auditing event\npoplib.connect\nwith argumentsself\n,host\n,port\n.All commands will raise an auditing event\npoplib.putline\nwith argumentsself\nandline\n, whereline\nis the bytes about to be sent to the remote host.Changed in version 3.9: If the timeout parameter is set to be zero, it will raise a\nValueError\nto prevent the creation of a non-blocking socket.\n- class poplib.POP3_SSL(host, port=POP3_SSL_PORT, *, timeout=None, context=None)Â¶\nThis is a subclass of\nPOP3\nthat connects to the server over an SSL encrypted socket. If port is not specified, 995, the standard POP3-over-SSL port i"}
{"url": "https://docs.python.org/3/library/profile.html", "title": "", "text": "The Python ProfilersÂ¶\nSource code: Lib/profile.py and Lib/pstats.py\nIntroduction to the profilersÂ¶\ncProfile\nand profile\nprovide deterministic profiling of\nPython programs. A profile is a set of statistics that describes how\noften and for how long various parts of the program executed. These statistics\ncan be formatted into reports via the pstats\nmodule.\nThe Python standard library provides two different implementations of the same profiling interface:\ncProfile\nis recommended for most users; itâs a C extension with reasonable overhead that makes it suitable for profiling long-running programs. Based onlsprof\n, contributed by Brett Rosen and Ted Czotter.profile\n, a pure Python module whose interface is imitated bycProfile\n, but which adds significant overhead to profiled programs. If youâre trying to extend the profiler in some way, the task might be easier with this module. Originally designed and written by Jim Roskind.\nNote\nThe profiler modules are designed to provide an execution profile for a given\nprogram, not for benchmarking purposes (for that, there is timeit\nfor\nreasonably accurate results). This particularly applies to benchmarking\nPython code against C code: the profilers introduce overhead for Python code,\nbut not for C-level functions, and so the C code would seem faster than any\nPython one.\nInstant Userâs ManualÂ¶\nThis section is provided for users that âdonât want to read the manual.â It provides a very brief overview, and allows a user to rapidly perform profiling on an existing application.\nTo profile a function that takes a single argument, you can do:\nimport cProfile\nimport re\ncProfile.run('re.compile(\"foo|bar\")')\n(Use profile\ninstead of cProfile\nif the latter is not available on\nyour system.)\nThe above action would run re.compile()\nand print profile results like\nthe following:\n214 function calls (207 primitive calls) in 0.002 seconds\nOrdered by: cumulative time\nncalls tottime percall cumtime percall filename:lineno(function)\n1 0.000 0.000 0.002 "}
{"url": "https://docs.python.org/3/library/string.html", "title": "", "text": "string\nâ Common string operationsÂ¶\nSource code: Lib/string.py\nString constantsÂ¶\nThe constants defined in this module are:\n- string.ascii_lettersÂ¶\nThe concatenation of the\nascii_lowercase\nandascii_uppercase\nconstants described below. This value is not locale-dependent.\n- string.ascii_lowercaseÂ¶\nThe lowercase letters\n'abcdefghijklmnopqrstuvwxyz'\n. This value is not locale-dependent and will not change.\n- string.ascii_uppercaseÂ¶\nThe uppercase letters\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n. This value is not locale-dependent and will not change.\n- string.digitsÂ¶\nThe string\n'0123456789'\n.\n- string.hexdigitsÂ¶\nThe string\n'0123456789abcdefABCDEF'\n.\n- string.octdigitsÂ¶\nThe string\n'01234567'\n.\n- string.punctuationÂ¶\nString of ASCII characters which are considered punctuation characters in the\nC\nlocale:!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n.\n- string.printableÂ¶\nString of ASCII characters which are considered printable by Python. This is a combination of\ndigits\n,ascii_letters\n,punctuation\n, andwhitespace\n.Note\nBy design,\nstring.printable.isprintable()\nreturnsFalse\n. In particular,string.printable\nis not printable in the POSIX sense (see LC_CTYPE).\n- string.whitespaceÂ¶\nA string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.\nCustom String FormattingÂ¶\nThe built-in string class provides the ability to do complex variable\nsubstitutions and value formatting via the format()\nmethod described in\nPEP 3101. The Formatter\nclass in the string\nmodule allows\nyou to create and customize your own string formatting behaviors using the same\nimplementation as the built-in format()\nmethod.\n- class string.FormatterÂ¶\nThe\nFormatter\nclass has the following public methods:- format(format_string, /, *args, **kwargs)Â¶\nThe primary API method. It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls\nvformat()\n.Changed in version 3.7: A format strin"}
{"url": "https://docs.python.org/3/library/getpass.html", "title": "", "text": "getpass\nâ Portable password inputÂ¶\nSource code: Lib/getpass.py\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe getpass\nmodule provides two functions:\n- getpass.getpass(prompt='Password: ', stream=None)Â¶\nPrompt the user for a password without echoing. The user is prompted using the string prompt, which defaults to\n'Password: '\n. On Unix, the prompt is written to the file-like object stream using the replace error handler if needed. stream defaults to the controlling terminal (/dev/tty\n) or if that is unavailable tosys.stderr\n(this argument is ignored on Windows).If echo free input is unavailable getpass() falls back to printing a warning message to stream and reading from\nsys.stdin\nand issuing aGetPassWarning\n.Note\nIf you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself.\n- exception getpass.GetPassWarningÂ¶\nA\nUserWarning\nsubclass issued when password input may be echoed.\n- getpass.getuser()Â¶\nReturn the âlogin nameâ of the user.\nThis function checks the environment variables\nLOGNAME\n,USER\n,LNAME\nandUSERNAME\n, in order, and returns the value of the first one which is set to a non-empty string. If none are set, the login name from the password database is returned on systems which support thepwd\nmodule, otherwise, anOSError\nis raised.In general, this function should be preferred over\nos.getlogin()\n.Changed in version 3.13: Previously, various exceptions beyond just\nOSError\nwere raised."}
{"url": "https://docs.python.org/3/library/curses.panel.html", "title": "", "text": "curses.panel\nâ A panel stack extension for cursesÂ¶\nPanels are windows with the added feature of depth, so they can be stacked on top of each other, and only the visible portions of each window will be displayed. Panels can be added, moved up or down in the stack, and removed.\nFunctionsÂ¶\nThe module curses.panel\ndefines the following functions:\n- curses.panel.bottom_panel()Â¶\nReturns the bottom panel in the panel stack.\n- curses.panel.new_panel(win)Â¶\nReturns a panel object, associating it with the given window win. Be aware that you need to keep the returned panel object referenced explicitly. If you donât, the panel object is garbage collected and removed from the panel stack.\n- curses.panel.top_panel()Â¶\nReturns the top panel in the panel stack.\n- curses.panel.update_panels()Â¶\nUpdates the virtual screen after changes in the panel stack. This does not call\ncurses.doupdate()\n, so youâll have to do this yourself.\nPanel ObjectsÂ¶\nPanel objects, as returned by new_panel()\nabove, are windows with a\nstacking order. Thereâs always a window associated with a panel which determines\nthe content, while the panel methods are responsible for the windowâs depth in\nthe panel stack.\nPanel objects have the following methods:\n- Panel.above()Â¶\nReturns the panel above the current panel.\n- Panel.below()Â¶\nReturns the panel below the current panel.\n- Panel.bottom()Â¶\nPush the panel to the bottom of the stack.\nReturns\nTrue\nif the panel is hidden (not visible),False\notherwise.\n- Panel.hide()Â¶\nHide the panel. This does not delete the object, it just makes the window on screen invisible.\n- Panel.move(y, x)Â¶\nMove the panel to the screen coordinates\n(y, x)\n.\n- Panel.replace(win)Â¶\nChange the window associated with the panel to the window win.\n- Panel.set_userptr(obj)Â¶\nSet the panelâs user pointer to obj. This is used to associate an arbitrary piece of data with the panel, and can be any Python object.\n- Panel.show()Â¶\nDisplay the panel (which might have been hidden).\n- Panel.top()Â¶\nPus"}
{"url": "https://docs.python.org/3/library/itertools.html", "title": "", "text": "itertools\nâ Functions creating iterators for efficient loopingÂ¶\nThis module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.\nThe module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an âiterator algebraâ making it possible to construct specialized tools succinctly and efficiently in pure Python.\nFor instance, SML provides a tabulation tool: tabulate(f)\nwhich produces a\nsequence f(0), f(1), ...\n. The same effect can be achieved in Python\nby combining map()\nand count()\nto form map(f, count())\n.\nInfinite iterators:\nIterator |\nArguments |\nResults |\nExample |\n|---|---|---|---|\n[start[, step]] |\nstart, start+step, start+2*step, â¦ |\n|\n|\np |\np0, p1, â¦ plast, p0, p1, â¦ |\n|\n|\nelem [,n] |\nelem, elem, elem, â¦ endlessly or up to n times |\n|\nIterators terminating on the shortest input sequence:\nIterator |\nArguments |\nResults |\nExample |\n|---|---|---|---|\np [,func] |\np0, p0+p1, p0+p1+p2, â¦ |\n|\n|\np, n |\n(p0, p1, â¦, p_n-1), â¦ |\n|\n|\np, q, â¦ |\np0, p1, â¦ plast, q0, q1, â¦ |\n|\n|\niterable |\np0, p1, â¦ plast, q0, q1, â¦ |\n|\n|\ndata, selectors |\n(d[0] if s[0]), (d[1] if s[1]), â¦ |\n|\n|\npredicate, seq |\nseq[n], seq[n+1], starting when predicate fails |\n|\n|\npredicate, seq |\nelements of seq where predicate(elem) fails |\n|\n|\niterable[, key] |\nsub-iterators grouped by value of key(v) |\n|\n|\nseq, [start,] stop [, step] |\nelements from seq[start:stop:step] |\n|\n|\niterable |\n(p[0], p[1]), (p[1], p[2]) |\n|\n|\nfunc, seq |\nfunc(*seq[0]), func(*seq[1]), â¦ |\n|\n|\npredicate, seq |\nseq[0], seq[1], until predicate fails |\n|\n|\nit, n |\nit1, it2, â¦ itn splits one iterator into n |\n||\np, q, â¦ |\n(p[0], q[0]), (p[1], q[1]), â¦ |\n|\nCombinatoric iterators:\nIterator |\nArguments |\nResults |\n|---|---|---|\np, q, â¦ [repeat=1] |\ncartesian product, equivalent to a nested for-loop |\n|\np[, r] |\nr-length tuples, all possible orderings, "}
{"url": "https://docs.python.org/3/library/bz2.html", "title": "", "text": "bz2\nâ Support for bzip2 compressionÂ¶\nSource code: Lib/bz2.py\nThis module provides a comprehensive interface for compressing and decompressing data using the bzip2 compression algorithm.\nThe bz2\nmodule contains:\nThe\nopen()\nfunction andBZ2File\nclass for reading and writing compressed files.The\nBZ2Compressor\nandBZ2Decompressor\nclasses for incremental (de)compression.The\ncompress()\nanddecompress()\nfunctions for one-shot (de)compression.\n(De)compression of filesÂ¶\n- bz2.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)Â¶\nOpen a bzip2-compressed file in binary or text mode, returning a file object.\nAs with the constructor for\nBZ2File\n, the filename argument can be an actual filename (astr\norbytes\nobject), or an existing file object to read from or write to.The mode argument can be any of\n'r'\n,'rb'\n,'w'\n,'wb'\n,'x'\n,'xb'\n,'a'\nor'ab'\nfor binary mode, or'rt'\n,'wt'\n,'xt'\n, or'at'\nfor text mode. The default is'rb'\n.The compresslevel argument is an integer from 1 to 9, as for the\nBZ2File\nconstructor.For binary mode, this function is equivalent to the\nBZ2File\nconstructor:BZ2File(filename, mode, compresslevel=compresslevel)\n. In this case, the encoding, errors and newline arguments must not be provided.For text mode, a\nBZ2File\nobject is created, and wrapped in anio.TextIOWrapper\ninstance with the specified encoding, error handling behavior, and line ending(s).Added in version 3.3.\nChanged in version 3.4: The\n'x'\n(exclusive creation) mode was added.Changed in version 3.6: Accepts a path-like object.\n- class bz2.BZ2File(filename, mode='r', *, compresslevel=9)Â¶\nOpen a bzip2-compressed file in binary mode.\nIf filename is a\nstr\norbytes\nobject, open the named file directly. Otherwise, filename should be a file object, which will be used to read or write the compressed data.The mode argument can be either\n'r'\nfor reading (default),'w'\nfor overwriting,'x'\nfor exclusive creation, or'a'\nfor appending. These can equivalently be given as'rb'\n,'wb'\n,'xb'\nan"}
{"url": "https://docs.python.org/3/library/stdtypes.html", "title": "", "text": "Built-in TypesÂ¶\nThe following sections describe the standard types that are built into the interpreter.\nThe principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.\nSome collection classes are mutable. The methods that add, subtract, or\nrearrange their members in place, and donât return a specific item, never return\nthe collection instance itself but None\n.\nSome operations are supported by several object types; in particular,\npractically all objects can be compared for equality, tested for truth\nvalue, and converted to a string (with the repr()\nfunction or the\nslightly different str()\nfunction). The latter function is implicitly\nused when an object is written by the print()\nfunction.\nTruth Value TestingÂ¶\nAny object can be tested for truth value, for use in an if\nor\nwhile\ncondition or as operand of the Boolean operations below.\nBy default, an object is considered true unless its class defines either a\n__bool__()\nmethod that returns False\nor a\n__len__()\nmethod that\nreturns zero, when called with the object. [1] Here are most of the built-in\nobjects considered false:\nconstants defined to be false:\nNone\nandFalse\nzero of any numeric type:\n0\n,0.0\n,0j\n,Decimal(0)\n,Fraction(0, 1)\nempty sequences and collections:\n''\n,()\n,[]\n,{}\n,set()\n,range(0)\nOperations and built-in functions that have a Boolean result always return 0\nor False\nfor false and 1\nor True\nfor true, unless otherwise stated.\n(Important exception: the Boolean operations or\nand and\nalways return\none of their operands.)\nBoolean Operations â and\n, or\n, not\nÂ¶\nThese are the Boolean operations, ordered by ascending priority:\nOperation |\nResult |\nNotes |\n|---|---|---|\n|\nif x is true, then x, else y |\n(1) |\n|\nif x is false, then x, else y |\n(2) |\n|\nif x is false, then |\n(3) |\nNotes:\nThis is a short-circuit operator, so it only evaluates the second argument if the first one is false.\nThis is a short-circuit operator, so it only evaluates the second argument if the first one is true."}
{"url": "https://docs.python.org/3/library/collections.html", "title": "", "text": "collections\nâ Container datatypesÂ¶\nSource code: Lib/collections/__init__.py\nThis module implements specialized container datatypes providing alternatives to\nPythonâs general purpose built-in containers, dict\n, list\n,\nset\n, and tuple\n.\nfactory function for creating tuple subclasses with named fields |\n|\nlist-like container with fast appends and pops on either end |\n|\ndict-like class for creating a single view of multiple mappings |\n|\ndict subclass for counting hashable objects |\n|\ndict subclass that remembers the order entries were added |\n|\ndict subclass that calls a factory function to supply missing values |\n|\nwrapper around dictionary objects for easier dict subclassing |\n|\nwrapper around list objects for easier list subclassing |\n|\nwrapper around string objects for easier string subclassing |\nChainMap\nobjectsÂ¶\nAdded in version 3.3.\nA ChainMap\nclass is provided for quickly linking a number of mappings\nso they can be treated as a single unit. It is often much faster than creating\na new dictionary and running multiple update()\ncalls.\nThe class can be used to simulate nested scopes and is useful in templating.\n- class collections.ChainMap(*maps)Â¶\nA\nChainMap\ngroups multiple dicts or other mappings together to create a single, updateable view. If no maps are specified, a single empty dictionary is provided so that a new chain always has at least one mapping.The underlying mappings are stored in a list. That list is public and can be accessed or updated using the maps attribute. There is no other state.\nLookups search the underlying mappings successively until a key is found. In contrast, writes, updates, and deletions only operate on the first mapping.\nA\nChainMap\nincorporates the underlying mappings by reference. So, if one of the underlying mappings gets updated, those changes will be reflected inChainMap\n.All of the usual dictionary methods are supported. In addition, there is a maps attribute, a method for creating new subcontexts, and a property for accessing a"}
{"url": "https://docs.python.org/3/library/bisect.html", "title": "", "text": "bisect\nâ Array bisection algorithmÂ¶\nSource code: Lib/bisect.py\nThis module provides support for maintaining a list in sorted order without having to sort the list after each insertion. For long lists of items with expensive comparison operations, this can be an improvement over linear searches or frequent resorting.\nThe module is called bisect\nbecause it uses a basic bisection\nalgorithm to do its work. Unlike other bisection tools that search for a\nspecific value, the functions in this module are designed to locate an\ninsertion point. Accordingly, the functions never call an __eq__()\nmethod to determine whether a value has been found. Instead, the\nfunctions only call the __lt__()\nmethod and will return an insertion\npoint between values in an array.\nNote\nThe functions in this module are not thread-safe. If multiple threads\nconcurrently use bisect\nfunctions on the same sequence, this\nmay result in undefined behaviour. Likewise, if the provided sequence\nis mutated by a different thread while a bisect\nfunction\nis operating on it, the result is undefined. For example, using\ninsort_left()\non the same list from multiple threads\nmay result in the list becoming unsorted.\nThe following functions are provided:\n- bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None)Â¶\nLocate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to\nlist.insert()\nassuming that a is already sorted.The returned insertion point ip partitions the array a into two slices such that\nall(elem < x for elem in a[lo : ip])\nis true for the left slice andall(elem >= x for elem in a[ip : hi])\nis true for the right slice.key specifies a key function of one argument that is used to extract a comparison key from each"}
{"url": "https://docs.python.org/3/library/wave.html", "title": "", "text": "wave\nâ Read and write WAV filesÂ¶\nSource code: Lib/wave.py\nThe wave\nmodule provides a convenient interface to the Waveform Audio\nâWAVEâ (or âWAVâ) file format. Only uncompressed PCM encoded wave files are\nsupported.\nChanged in version 3.12: Support for WAVE_FORMAT_EXTENSIBLE\nheaders was added, provided that the\nextended format is KSDATAFORMAT_SUBTYPE_PCM\n.\nThe wave\nmodule defines the following function and exception:\n- wave.open(file, mode=None)Â¶\nIf file is a string, open the file by that name, otherwise treat it as a file-like object. mode can be:\n'rb'\nRead only mode.\n'wb'\nWrite only mode.\nNote that it does not allow read/write WAV files.\nA mode of\n'rb'\nreturns aWave_read\nobject, while a mode of'wb'\nreturns aWave_write\nobject. If mode is omitted and a file-like object is passed as file,file.mode\nis used as the default value for mode.If you pass in a file-like object, the wave object will not close it when its\nclose()\nmethod is called; it is the callerâs responsibility to close the file object.The\nopen()\nfunction may be used in awith\nstatement. When thewith\nblock completes, theWave_read.close()\norWave_write.close()\nmethod is called.Changed in version 3.4: Added support for unseekable files.\n- exception wave.ErrorÂ¶\nAn error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.\nWave_read ObjectsÂ¶\n- class wave.Wave_readÂ¶\nRead a WAV file.\nWave_read objects, as returned by\nopen()\n, have the following methods:- close()Â¶\nClose the stream if it was opened by\nwave\n, and make the instance unusable. This is called automatically on object collection.\n- getnchannels()Â¶\nReturns number of audio channels (\n1\nfor mono,2\nfor stereo).\n- getsampwidth()Â¶\nReturns sample width in bytes.\n- getframerate()Â¶\nReturns sampling frequency.\n- getnframes()Â¶\nReturns number of audio frames.\n- getcomptype()Â¶\nReturns compression type (\n'NONE'\nis the only supported type).\n- getcompname()Â¶\nHuman-readable version of\ngetcomptype()\n. U"}
{"url": "https://docs.python.org/3/library/tkinter.ttk.html", "title": "", "text": "tkinter.ttk\nâ Tk themed widgetsÂ¶\nSource code: Lib/tkinter/ttk.py\nThe tkinter.ttk\nmodule provides access to the Tk themed widget set,\nintroduced in Tk 8.5. It provides additional benefits including anti-aliased font\nrendering under X11 and window transparency (requiring a composition\nwindow manager on X11).\nThe basic idea for tkinter.ttk\nis to separate, to the extent possible,\nthe code implementing a widgetâs behavior from the code implementing its\nappearance.\nSee also\n- Tk Widget Styling Support\nA document introducing theming support for Tk\nUsing TtkÂ¶\nTo start using Ttk, import its module:\nfrom tkinter import ttk\nTo override the basic Tk widgets, the import should follow the Tk import:\nfrom tkinter import *\nfrom tkinter.ttk import *\nThat code causes several tkinter.ttk\nwidgets (Button\n,\nCheckbutton\n, Entry\n, Frame\n, Label\n,\nLabelFrame\n, Menubutton\n, PanedWindow\n,\nRadiobutton\n, Scale\nand Scrollbar\n) to\nautomatically replace the Tk widgets.\nThis has the direct benefit of using the new widgets which gives a better\nlook and feel across platforms; however, the replacement widgets are not\ncompletely compatible. The main difference is that widget options such as\nâfgâ, âbgâ and others related to widget styling are no\nlonger present in Ttk widgets. Instead, use the ttk.Style\nclass\nfor improved styling effects.\nSee also\n- Converting existing applications to use Tile widgets\nA monograph (using Tcl terminology) about differences typically encountered when moving applications to use the new widgets.\nTtk WidgetsÂ¶\nTtk comes with 18 widgets, twelve of which already existed in tkinter:\nButton\n, Checkbutton\n, Entry\n, Frame\n,\nLabel\n, LabelFrame\n, Menubutton\n, PanedWindow\n,\nRadiobutton\n, Scale\n, Scrollbar\n, and Spinbox\n.\nThe other six are new: Combobox\n, Notebook\n,\nProgressbar\n, Separator\n, Sizegrip\nand\nTreeview\n. And all them are subclasses of Widget\n.\nUsing the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling"}
{"url": "https://docs.python.org/3/library/enum.html", "title": "", "text": "enum\nâ Support for enumerationsÂ¶\nAdded in version 3.4.\nSource code: Lib/enum.py\nAn enumeration:\nis a set of symbolic names (members) bound to unique values\ncan be iterated over to return its canonical (i.e. non-alias) members in definition order\nuses call syntax to return members by value\nuses index syntax to return members by name\nEnumerations are created either by using class\nsyntax, or by\nusing function-call syntax:\n>>> from enum import Enum\n>>> # class syntax\n>>> class Color(Enum):\n... RED = 1\n... GREEN = 2\n... BLUE = 3\n>>> # functional syntax\n>>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])\nEven though we can use class\nsyntax to create Enums, Enums\nare not normal Python classes. See\nHow are Enums different? for more details.\nNote\nNomenclature\nThe class\nColor\nis an enumeration (or enum)The attributes\nColor.RED\n,Color.GREEN\n, etc., are enumeration members (or members) and are functionally constants.The enum members have names and values (the name of\nColor.RED\nisRED\n, the value ofColor.BLUE\nis3\n, etc.)\nModule ContentsÂ¶\nThe\ntype\nfor Enum and its subclasses.Base class for creating enumerated constants.\nBase class for creating enumerated constants that can be combined using the bitwise operations without losing their\nFlag\nmembership.An enumeration with the values\nCONTINUOUS\n,NAMED_FLAGS\n, andUNIQUE\n, for use withverify()\nto ensure various constraints are met by a given enumeration.An enumeration with the values\nSTRICT\n,CONFORM\n,EJECT\n, andKEEP\nwhich allows for more fine-grained control over how invalid values are dealt with in an enumeration.Instances are replaced with an appropriate value for Enum members.\nStrEnum\ndefaults to the lower-cased version of the member name, while other Enums default to 1 and increase from there.Allows\nEnum\nmembers to have attributes without conflicting with member names. Thevalue\nandname\nattributes are implemented this way.Enum class decorator that ensures only one name is bound to any one value.\nEnum class decorator "}
{"url": "https://docs.python.org/3/library/platform.html", "title": "", "text": "platform\nâ Access to underlying platformâs identifying dataÂ¶\nSource code: Lib/platform.py\nNote\nSpecific platforms listed alphabetically, with Linux included in the Unix section.\nCross platformÂ¶\n- platform.architecture(executable=sys.executable, bits='', linkage='')Â¶\nQueries the given executable (defaults to the Python interpreter binary) for various architecture information.\nReturns a tuple\n(bits, linkage)\nwhich contain information about the bit architecture and the linkage format used for the executable. Both values are returned as strings.Values that cannot be determined are returned as given by the parameter presets. If bits is given as\n''\n, thesizeof(pointer)\n(orsizeof(long)\non Python version < 1.5.2) is used as indicator for the supported pointer size.The function relies on the systemâs\nfile\ncommand to do the actual work. This is available on most if not all Unix platforms and some non-Unix platforms and then only if the executable points to the Python interpreter. Reasonable defaults are used when the above needs are not met.Note\nOn macOS (and perhaps other platforms), executable files may be universal files containing multiple architectures.\nTo get at the â64-bitnessâ of the current interpreter, it is more reliable to query the\nsys.maxsize\nattribute:is_64bits = sys.maxsize > 2**32\n- platform.machine()Â¶\nReturns the machine type, e.g.\n'AMD64'\n. An empty string is returned if the value cannot be determined.The output is platform-dependent and may differ in casing and naming conventions.\n- platform.node()Â¶\nReturns the computerâs network name (may not be fully qualified!). An empty string is returned if the value cannot be determined.\n- platform.platform(aliased=False, terse=False)Â¶\nReturns a single string identifying the underlying platform with as much useful information as possible.\nThe output is intended to be human readable rather than machine parseable. It may look different on different platforms and this is intended.\nIf aliased is true, the function "}
{"url": "https://docs.python.org/3/library/time.html", "title": "", "text": "time\nâ Time access and conversionsÂ¶\nThis module provides various time-related functions. For related\nfunctionality, see also the datetime\nand calendar\nmodules.\nAlthough this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.\nAn explanation of some terminology and conventions is in order.\nThe epoch is the point where the time starts, the return value of\ntime.gmtime(0)\n. It is January 1, 1970, 00:00:00 (UTC) on all platforms.\nThe term seconds since the epoch refers to the total number of elapsed seconds since the epoch, typically excluding leap seconds. Leap seconds are excluded from this total on all POSIX-compliant platforms.\nThe functions in this module may not handle dates and times before the epoch or far in the future. The cut-off point in the future is determined by the C library; for 32-bit systems, it is typically in 2038.\nFunction\nstrptime()\ncan parse 2-digit years when given%y\nformat code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69â99 are mapped to 1969â1999, and values 0â68 are mapped to 2000â2068.\nUTC is Coordinated Universal Time and superseded Greenwich Mean Time or GMT as the basis of international timekeeping. The acronym UTC is not a mistake but conforms to an earlier, language-agnostic naming scheme for time standards such as UT0, UT1, and UT2.\nDST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.\nThe precision of the various real-time functions m"}
{"url": "https://docs.python.org/3/library/cmd.html", "title": "", "text": "cmd\nâ Support for line-oriented command interpretersÂ¶\nSource code: Lib/cmd.py\nThe Cmd\nclass provides a simple framework for writing line-oriented\ncommand interpreters. These are often useful for test harnesses, administrative\ntools, and prototypes that will later be wrapped in a more sophisticated\ninterface.\n- class cmd.Cmd(completekey='tab', stdin=None, stdout=None)Â¶\nA\nCmd\ninstance or subclass instance is a line-oriented interpreter framework. There is no good reason to instantiateCmd\nitself; rather, itâs useful as a superclass of an interpreter class you define yourself in order to inheritCmd\nâs methods and encapsulate action methods.The optional argument completekey is the\nreadline\nname of a completion key; it defaults to Tab. If completekey is notNone\nandreadline\nis available, command completion is done automatically.The default,\n'tab'\n, is treated specially, so that it refers to the Tab key on everyreadline.backend\n. Specifically, ifreadline.backend\niseditline\n,Cmd\nwill use'^I'\ninstead of'tab'\n. Note that other values are not treated this way, and might only work with a specific backend.The optional arguments stdin and stdout specify the input and output file objects that the Cmd instance or subclass instance will use for input and output. If not specified, they will default to\nsys.stdin\nandsys.stdout\n.If you want a given stdin to be used, make sure to set the instanceâs\nuse_rawinput\nattribute toFalse\n, otherwise stdin will be ignored.Changed in version 3.13:\ncompletekey='tab'\nis replaced by'^I'\nforeditline\n.\nCmd ObjectsÂ¶\nA Cmd\ninstance has the following methods:\n- Cmd.cmdloop(intro=None)Â¶\nRepeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument.\nThe optional argument is a banner or intro string to be issued before the first prompt (this overrides the\nintro\nclass attribute).If the\nreadline\nmodule is loaded, input will automatically inherit bash"}
{"url": "https://docs.python.org/3/library/superseded.html", "title": "", "text": "Superseded ModulesÂ¶\nThe modules described in this chapter have been superseded by other modules for most use cases, and are retained primarily to preserve backwards compatibility.\nModules may appear in this chapter because they only cover a limited subset of\na problem space, and a more generally applicable solution is available elsewhere\nin the standard library (for example, getopt\ncovers the very specific\ntask of âmimic the C getopt()\nAPI in Pythonâ, rather than the broader\ncommand line option parsing and argument parsing capabilities offered by\noptparse\nand argparse\n).\nAlternatively, modules may appear in this chapter because they are deprecated outright, and awaiting removal in a future release, or they are soft deprecated and their use is actively discouraged in new projects. With the removal of various obsolete modules through PEP 594, there are currently no modules in this latter category."}
{"url": "https://docs.python.org/3/library/reprlib.html", "title": "", "text": "reprlib\nâ Alternate repr()\nimplementationÂ¶\nSource code: Lib/reprlib.py\nThe reprlib\nmodule provides a means for producing object representations\nwith limits on the size of the resulting strings. This is used in the Python\ndebugger and may be useful in other contexts as well.\nThis module provides a class, an instance, and a function:\n- class reprlib.Repr(*, maxlevel=6, maxtuple=6, maxlist=6, maxarray=5, maxdict=4, maxset=6, maxfrozenset=6, maxdeque=6, maxstring=30, maxlong=40, maxother=30, fillvalue='...', indent=None)Â¶\nClass which provides formatting services useful in implementing functions similar to the built-in\nrepr()\n; size limits for different object types are added to avoid the generation of representations which are excessively long.The keyword arguments of the constructor can be used as a shortcut to set the attributes of the\nRepr\ninstance. Which means that the following initialization:aRepr = reprlib.Repr(maxlevel=3)\nIs equivalent to:\naRepr = reprlib.Repr() aRepr.maxlevel = 3\nSee section Repr Objects for more information about\nRepr\nattributes.Changed in version 3.12: Allow attributes to be set via keyword arguments.\n- reprlib.aReprÂ¶\nThis is an instance of\nRepr\nwhich is used to provide therepr()\nfunction described below. Changing the attributes of this object will affect the size limits used byrepr()\nand the Python debugger.\n- reprlib.repr(obj)Â¶\nThis is the\nrepr()\nmethod ofaRepr\n. It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes.\nIn addition to size-limiting tools, the module also provides a decorator for\ndetecting recursive calls to __repr__()\nand substituting a\nplaceholder string instead.\n- @reprlib.recursive_repr(fillvalue='...')Â¶\nDecorator for\n__repr__()\nmethods to detect recursive calls within the same thread. If a recursive call is made, the fillvalue is returned, otherwise, the usual__repr__()\ncall is made. For example:>>> from reprlib import recursive_repr >>> class MyList(list"}
{"url": "https://docs.python.org/3/library/ftplib.html", "title": "", "text": "ftplib\nâ FTP protocol clientÂ¶\nSource code: Lib/ftplib.py\nThis module defines the class FTP\nand a few related items. The\nFTP\nclass implements the client side of the FTP protocol. You can use\nthis to write Python programs that perform a variety of automated FTP jobs, such\nas mirroring other FTP servers. It is also used by the module\nurllib.request\nto handle URLs that use FTP. For more information on FTP\n(File Transfer Protocol), see internet RFC 959.\nThe default encoding is UTF-8, following RFC 2640.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nHereâs a sample session using the ftplib\nmodule:\n>>> from ftplib import FTP\n>>> ftp = FTP('ftp.us.debian.org') # connect to host, default port\n>>> ftp.login() # user anonymous, passwd anonymous@\n'230 Login successful.'\n>>> ftp.cwd('debian') # change into \"debian\" directory\n'250 Directory successfully changed.'\n>>> ftp.retrlines('LIST') # list directory contents\n-rw-rw-r-- 1 1176 1176 1063 Jun 15 10:18 README\n...\ndrwxr-sr-x 5 1176 1176 4096 Dec 19 2000 pool\ndrwxr-sr-x 4 1176 1176 4096 Nov 17 2008 project\ndrwxr-xr-x 3 1176 1176 4096 Oct 10 2012 tools\n'226 Directory send OK.'\n>>> with open('README', 'wb') as fp:\n>>> ftp.retrbinary('RETR README', fp.write)\n'226 Transfer complete.'\n>>> ftp.quit()\n'221 Goodbye.'\nReferenceÂ¶\nFTP objectsÂ¶\n- class ftplib.FTP(host='', user='', passwd='', acct='', timeout=None, source_address=None, *, encoding='utf-8')Â¶\nReturn a new instance of the\nFTP\nclass.- Parameters:\nhost (str) â The hostname to connect to. If given,\nconnect(host)\nis implicitly called by the constructor.user (str) â The username to log in with (default:\n'anonymous'\n). If given,login(host, passwd, acct)\nis implicitly called by the constructor.passwd (str) â The password to use when logging in. If not given, and if passwd is the empty string or\n\"-\"\n, a password will be automatically generated.acct (str) â Account information to be used for the\nA"}
{"url": "https://docs.python.org/3/library/inspect.html", "title": "", "text": "inspect\nâ Inspect live objectsÂ¶\nSource code: Lib/inspect.py\nThe inspect\nmodule provides several useful functions to help get\ninformation about live objects such as modules, classes, methods, functions,\ntracebacks, frame objects, and code objects. For example, it can help you\nexamine the contents of a class, retrieve the source code of a method, extract\nand format the argument list for a function, or get all the information you need\nto display a detailed traceback.\nThere are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack.\nTypes and membersÂ¶\nThe getmembers()\nfunction retrieves the members of an object such as a\nclass or module. The functions whose names begin with âisâ are mainly\nprovided as convenient choices for the second argument to getmembers()\n.\nThey also help you determine when you can expect to find the following special\nattributes (see Import-related attributes on module objects for module attributes):\nType |\nAttribute |\nDescription |\n|---|---|---|\nclass |\n__doc__ |\ndocumentation string |\n__name__ |\nname with which this class was defined |\n|\n__qualname__ |\nqualified name |\n|\n__module__ |\nname of module in which this class was defined |\n|\n__type_params__ |\nA tuple containing the type parameters of a generic class |\n|\nmethod |\n__doc__ |\ndocumentation string |\n__name__ |\nname with which this method was defined |\n|\n__qualname__ |\nqualified name |\n|\n__func__ |\nfunction object containing implementation of method |\n|\n__self__ |\ninstance to which this\nmethod is bound, or\n|\n|\n__module__ |\nname of module in which this method was defined |\n|\nfunction |\n__doc__ |\ndocumentation string |\n__name__ |\nname with which this function was defined |\n|\n__qualname__ |\nqualified name |\n|\n__code__ |\ncode object containing compiled function bytecode |\n|\n__defaults__ |\ntuple of any default values for positional or keyword parameters |\n|\n__kwdefaults__ |\nmapping of any defaul"}
{"url": "https://docs.python.org/3/library/zipimport.html", "title": "", "text": "zipimport\nâ Import modules from Zip archivesÂ¶\nSource code: Lib/zipimport.py\nThis module adds the ability to import Python modules (*.py\n,\n*.pyc\n) and packages from ZIP-format archives. It is usually not\nneeded to use the zipimport\nmodule explicitly; it is automatically used\nby the built-in import\nmechanism for sys.path\nitems that are paths\nto ZIP archives.\nTypically, sys.path\nis a list of directory names as strings. This module\nalso allows an item of sys.path\nto be a string naming a ZIP file archive.\nThe ZIP archive can contain a subdirectory structure to support package imports,\nand a path within the archive can be specified to only import from a\nsubdirectory. For example, the path example.zip/lib/\nwould only\nimport from the lib/\nsubdirectory within the archive.\nAny files may be present in the ZIP archive, but importers are only invoked for\n.py\nand .pyc\nfiles. ZIP import of dynamic modules\n(.pyd\n, .so\n) is disallowed. Note that if an archive only contains\n.py\nfiles, Python will not attempt to modify the archive by adding the\ncorresponding .pyc\nfile, meaning that if a ZIP archive\ndoesnât contain .pyc\nfiles, importing may be rather slow.\nChanged in version 3.13: ZIP64 is supported\nChanged in version 3.8: Previously, ZIP archives with an archive comment were not supported.\nSee also\n- PKZIP Application Note\nDocumentation on the ZIP file format by Phil Katz, the creator of the format and algorithms used.\n- PEP 273 - Import Modules from Zip Archives\nWritten by James C. Ahlstrom, who also provided an implementation. Python 2.3 follows the specification in PEP 273, but uses an implementation written by Just van Rossum that uses the import hooks described in PEP 302.\nimportlib\n- The implementation of the import machineryPackage providing the relevant protocols for all importers to implement.\nThis module defines an exception:\n- exception zipimport.ZipImportErrorÂ¶\nException raised by zipimporter objects. Itâs a subclass of\nImportError\n, so it can be caught asImportError\n, t"}
{"url": "https://docs.python.org/3/library/select.html", "title": "", "text": "select\nâ Waiting for I/O completionÂ¶\nThis module provides access to the select()\nand poll()\nfunctions\navailable in most operating systems, devpoll()\navailable on\nSolaris and derivatives, epoll()\navailable on Linux 2.5+ and\nkqueue()\navailable on most BSD.\nNote that on Windows, it only works for sockets; on other operating systems,\nit also works for other file types (in particular, on Unix, it works on pipes).\nIt cannot be used on regular files to determine whether a file has grown since\nit was last read.\nNote\nThe selectors\nmodule allows high-level and efficient I/O\nmultiplexing, built upon the select\nmodule primitives. Users are\nencouraged to use the selectors\nmodule instead, unless they want\nprecise control over the OS-level primitives used.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe module defines the following:\n- select.devpoll()Â¶\n(Only supported on Solaris and derivatives.) Returns a\n/dev/poll\npolling object; see section /dev/poll Polling Objects below for the methods supported by devpoll objects.devpoll()\nobjects are linked to the number of file descriptors allowed at the time of instantiation. If your program reduces this value,devpoll()\nwill fail. If your program increases this value,devpoll()\nmay return an incomplete list of active file descriptors.The new file descriptor is non-inheritable.\nAdded in version 3.3.\nChanged in version 3.4: The new file descriptor is now non-inheritable.\n- select.epoll(sizehint=-1, flags=0)Â¶\n(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, which can be used as Edge or Level Triggered interface for I/O events.\nsizehint informs epoll about the expected number of events to be registered. It must be positive, or\n-1\nto use the default. It is only used on older systems whereepoll_create1()\nis not available; otherwise it has no effect (though its value is still checked).flags is deprecated and completely ignored. H"}
{"url": "https://docs.python.org/3/library/faulthandler.html", "title": "", "text": "faulthandler\nâ Dump the Python tracebackÂ¶\nAdded in version 3.3.\nThis module contains functions to dump Python tracebacks explicitly, on a fault,\nafter a timeout, or on a user signal. Call faulthandler.enable()\nto\ninstall fault handlers for the SIGSEGV\n,\nSIGFPE\n, SIGABRT\n, SIGBUS\n, and\nSIGILL\nsignals. You can also\nenable them at startup by setting the PYTHONFAULTHANDLER\nenvironment\nvariable or by using the -X\nfaulthandler\ncommand line option.\nThe fault handler is compatible with system fault handlers like Apport or the\nWindows fault handler. The module uses an alternative stack for signal handlers\nif the sigaltstack()\nfunction is available. This allows it to dump the\ntraceback even on a stack overflow.\nThe fault handler is called on catastrophic cases and therefore can only use signal-safe functions (e.g. it cannot allocate memory on the heap). Because of this limitation traceback dumping is minimal compared to normal Python tracebacks:\nOnly ASCII is supported. The\nbackslashreplace\nerror handler is used on encoding.Each string is limited to 500 characters.\nOnly the filename, the function name and the line number are displayed. (no source code)\nIt is limited to 100 frames and 100 threads.\nThe order is reversed: the most recent call is shown first.\nBy default, the Python traceback is written to sys.stderr\n. To see\ntracebacks, applications must be run in the terminal. A log file can\nalternatively be passed to faulthandler.enable()\n.\nThe module is implemented in C, so tracebacks can be dumped on a crash or when Python is deadlocked.\nThe Python Development Mode calls faulthandler.enable()\nat Python startup.\nSee also\nDumping the tracebackÂ¶\n- faulthandler.dump_traceback(file=sys.stderr, all_threads=True)Â¶\nDump the tracebacks of all threads into file. If all_threads is\nFalse\n, dump only the current thread.See also\ntraceback.print_tb()\n, which can be used to print a traceback object.Changed in version 3.5: Added support for passing file descriptor to this function.\nFault h"}
{"url": "https://docs.python.org/3/library/winreg.html", "title": "", "text": "winreg\nâ Windows registry accessÂ¶\nThese functions expose the Windows registry API to Python. Instead of using an integer as the registry handle, a handle object is used to ensure that the handles are closed correctly, even if the programmer neglects to explicitly close them.\nChanged in version 3.3: Several functions in this module used to raise a\nWindowsError\n, which is now an alias of OSError\n.\nFunctionsÂ¶\nThis module offers the following functions:\n- winreg.CloseKey(hkey)Â¶\nCloses a previously opened registry key. The hkey argument specifies a previously opened key.\nNote\nIf hkey is not closed using this method (or via\nhkey.Close()\n), it is closed when the hkey object is destroyed by Python.\n- winreg.ConnectRegistry(computer_name, key)Â¶\nEstablishes a connection to a predefined registry handle on another computer, and returns a handle object.\ncomputer_name is the name of the remote computer, of the form\nr\"\\\\computername\"\n. IfNone\n, the local computer is used.key is the predefined handle to connect to.\nThe return value is the handle of the opened key. If the function fails, an\nOSError\nexception is raised.Raises an auditing event\nwinreg.ConnectRegistry\nwith argumentscomputer_name\n,key\n.Changed in version 3.3: See above.\n- winreg.CreateKey(key, sub_key)Â¶\nCreates or opens the specified key, returning a handle object.\nkey is an already open key, or one of the predefined HKEY_* constants.\nsub_key is a string that names the key this method opens or creates.\nIf key is one of the predefined keys, sub_key may be\nNone\n. In that case, the handle returned is the same key handle passed in to the function.If the key already exists, this function opens the existing key.\nThe return value is the handle of the opened key. If the function fails, an\nOSError\nexception is raised.Raises an auditing event\nwinreg.CreateKey\nwith argumentskey\n,sub_key\n,access\n.Raises an auditing event\nwinreg.OpenKey/result\nwith argumentkey\n.Changed in version 3.3: See above.\n- winreg.CreateKeyEx(key, sub_ke"}
{"url": "https://docs.python.org/3/library/language.html", "title": "", "text": "Python Language ServicesÂ¶\nPython provides a number of modules to assist in working with the Python language. These modules support tokenizing, parsing, syntax analysis, bytecode disassembly, and various other facilities.\nThese modules include:\nast\nâ Abstract Syntax Treessymtable\nâ Access to the compilerâs symbol tablestoken\nâ Constants used with Python parse treeskeyword\nâ Testing for Python keywordstokenize\nâ Tokenizer for Python sourcetabnanny\nâ Detection of ambiguous indentationpyclbr\nâ Python module browser supportpy_compile\nâ Compile Python source filescompileall\nâ Byte-compile Python librariesdis\nâ Disassembler for Python bytecodepickletools\nâ Tools for pickle developers"}
{"url": "https://docs.python.org/3/library/webbrowser.html", "title": "", "text": "webbrowser\nâ Convenient web-browser controllerÂ¶\nSource code: Lib/webbrowser.py\nThe webbrowser\nmodule provides a high-level interface to allow displaying\nweb-based documents to users. Under most circumstances, simply calling the\nopen()\nfunction from this module will do the right thing.\nUnder Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isnât available. If text-mode browsers are used, the calling process will block until the user exits the browser.\nIf the environment variable BROWSER\nexists, it is interpreted as the\nos.pathsep\n-separated list of browsers to try ahead of the platform\ndefaults. When the value of a list part contains the string %s\n, then it is\ninterpreted as a literal browser command line to be used with the argument URL\nsubstituted for %s\n; if the part does not contain %s\n, it is simply\ninterpreted as the name of the browser to launch. [1]\nFor non-Unix platforms, or when a remote browser is available on Unix, the controlling process will not wait for the user to finish with the browser, but allow the remote browser to maintain its own windows on the display. If remote browsers are not available on Unix, the controlling process will launch a new browser and wait.\nOn iOS, the BROWSER\nenvironment variable, as well as any arguments\ncontrolling autoraise, browser preference, and new tab/window creation will be\nignored. Web pages will always be opened in the userâs preferred browser, in\na new tab, with the browser being brought to the foreground. The use of the\nwebbrowser\nmodule on iOS requires the ctypes\nmodule. If\nctypes\nisnât available, calls to open()\nwill fail.\nThe script webbrowser can be used as a command-line interface for the module. It accepts a URL as the argument. It accepts the following optional parameters:\n- -n, --new-windowÂ¶\nOpens the URL in a new browser window, if possible.\n- -t, --new-tabÂ¶\nOpens the URL in a new browser tab.\nThe options are"}
{"url": "https://docs.python.org/3/library/calendar.html", "title": "", "text": "calendar\nâ General calendar-related functionsÂ¶\nSource code: Lib/calendar.py\nThis module allows you to output calendars like the Unix cal program,\nand provides additional useful functions related to the calendar. By default,\nthese calendars have Monday as the first day of the week, and Sunday as the last\n(the European convention). Use setfirstweekday()\nto set the first day of\nthe week to Sunday (6) or to any other weekday. Parameters that specify dates\nare given as integers. For related\nfunctionality, see also the datetime\nand time\nmodules.\nThe functions and classes defined in this module use an idealized calendar, the current Gregorian calendar extended indefinitely in both directions. This matches the definition of the âproleptic Gregorianâ calendar in Dershowitz and Reingoldâs book âCalendrical Calculationsâ, where itâs the base calendar for all computations. Zero and negative years are interpreted as prescribed by the ISO 8601 standard. Year 0 is 1 BC, year -1 is 2 BC, and so on.\n- class calendar.Calendar(firstweekday=0)Â¶\nCreates a\nCalendar\nobject. firstweekday is an integer specifying the first day of the week.MONDAY\nis0\n(the default),SUNDAY\nis6\n.A\nCalendar\nobject provides several methods that can be used for preparing the calendar data for formatting. This class doesnât do any formatting itself. This is the job of subclasses.Calendar\ninstances have the following methods and attributes:- firstweekdayÂ¶\nThe first weekday as an integer (0â6).\nThis property can also be set and read using\nsetfirstweekday()\nandgetfirstweekday()\nrespectively.\n- getfirstweekday()Â¶\nReturn an\nint\nfor the current first weekday (0â6).Identical to reading the\nfirstweekday\nproperty.\n- setfirstweekday(firstweekday)Â¶\nSet the first weekday to firstweekday, passed as an\nint\n(0â6)Identical to setting the\nfirstweekday\nproperty.\n- iterweekdays()Â¶\nReturn an iterator for the week day numbers that will be used for one week. The first value from the iterator will be the same as the value of the\nfi"}
{"url": "https://docs.python.org/3/library/urllib.robotparser.html", "title": "", "text": "urllib.robotparser\nâ Parser for robots.txtÂ¶\nSource code: Lib/urllib/robotparser.py\nThis module provides a single class, RobotFileParser\n, which answers\nquestions about whether or not a particular user agent can fetch a URL on the\nweb site that published the robots.txt\nfile. For more details on the\nstructure of robots.txt\nfiles, see http://www.robotstxt.org/orig.html.\n- class urllib.robotparser.RobotFileParser(url='')Â¶\nThis class provides methods to read, parse and answer questions about the\nrobots.txt\nfile at url.- set_url(url)Â¶\nSets the URL referring to a\nrobots.txt\nfile.\n- read()Â¶\nReads the\nrobots.txt\nURL and feeds it to the parser.\n- parse(lines)Â¶\nParses the lines argument.\n- can_fetch(useragent, url)Â¶\nReturns\nTrue\nif the useragent is allowed to fetch the url according to the rules contained in the parsedrobots.txt\nfile.\n- mtime()Â¶\nReturns the time the\nrobots.txt\nfile was last fetched. This is useful for long-running web spiders that need to check for newrobots.txt\nfiles periodically.\n- modified()Â¶\nSets the time the\nrobots.txt\nfile was last fetched to the current time.\n- crawl_delay(useragent)Â¶\nReturns the value of the\nCrawl-delay\nparameter fromrobots.txt\nfor the useragent in question. If there is no such parameter or it doesnât apply to the useragent specified or therobots.txt\nentry for this parameter has invalid syntax, returnNone\n.Added in version 3.6.\n- request_rate(useragent)Â¶\nReturns the contents of the\nRequest-rate\nparameter fromrobots.txt\nas a named tupleRequestRate(requests, seconds)\n. If there is no such parameter or it doesnât apply to the useragent specified or therobots.txt\nentry for this parameter has invalid syntax, returnNone\n.Added in version 3.6.\nThe following example demonstrates basic use of the RobotFileParser\nclass:\n>>> import urllib.robotparser\n>>> rp = urllib.robotparser.RobotFileParser()\n>>> rp.set_url(\"http://www.musi-cal.com/robots.txt\")\n>>> rp.read()\n>>> rrate = rp.request_rate(\"*\")\n>>> rrate.requests\n3\n>>> rrate.seconds\n20\n>"}
{"url": "https://docs.python.org/3/library/html.entities.html", "title": "", "text": "html.entities\nâ Definitions of HTML general entitiesÂ¶\nSource code: Lib/html/entities.py\nThis module defines four dictionaries, html5\n,\nname2codepoint\n, codepoint2name\n, and entitydefs\n.\n- html.entities.html5Â¶\nA dictionary that maps HTML5 named character references [1] to the equivalent Unicode character(s), e.g.\nhtml5['gt;'] == '>'\n. Note that the trailing semicolon is included in the name (e.g.'gt;'\n), however some of the names are accepted by the standard even without the semicolon: in this case the name is present with and without the';'\n. See alsohtml.unescape()\n.Added in version 3.3.\n- html.entities.entitydefsÂ¶\nA dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.\n- html.entities.name2codepointÂ¶\nA dictionary that maps HTML4 entity names to the Unicode code points.\n- html.entities.codepoint2nameÂ¶\nA dictionary that maps Unicode code points to HTML4 entity names.\nFootnotes"}
{"url": "https://docs.python.org/3/library/archiving.html", "title": "", "text": "Data Compression and ArchivingÂ¶\nThe modules described in this chapter support data compression with the zlib,\ngzip, bzip2 and lzma algorithms, and the creation of ZIP- and tar-format\narchives. See also Archiving operations provided by the shutil\nmodule.\nzlib\nâ Compression compatible with gzipgzip\nâ Support for gzip filesbz2\nâ Support for bzip2 compressionlzma\nâ Compression using the LZMA algorithmzipfile\nâ Work with ZIP archivestarfile\nâ Read and write tar archive files"}
{"url": "https://docs.python.org/3/library/markup.html", "title": "", "text": "Structured Markup Processing ToolsÂ¶\nPython supports a variety of modules to work with various forms of structured data markup. This includes modules to work with the Standard Generalized Markup Language (SGML) and the Hypertext Markup Language (HTML), and several interfaces for working with the Extensible Markup Language (XML).\nhtml\nâ HyperText Markup Language supporthtml.parser\nâ Simple HTML and XHTML parserhtml.entities\nâ Definitions of HTML general entities- XML Processing Modules\nxml.etree.ElementTree\nâ The ElementTree XML APIxml.dom\nâ The Document Object Model APIxml.dom.minidom\nâ Minimal DOM implementationxml.dom.pulldom\nâ Support for building partial DOM treesxml.sax\nâ Support for SAX2 parsersxml.sax.handler\nâ Base classes for SAX handlersxml.sax.saxutils\nâ SAX Utilitiesxml.sax.xmlreader\nâ Interface for XML parsersxml.parsers.expat\nâ Fast XML parsing using Expat"}
{"url": "https://docs.python.org/3/library/tracemalloc.html", "title": "", "text": "tracemalloc\nâ Trace memory allocationsÂ¶\nAdded in version 3.4.\nSource code: Lib/tracemalloc.py\nThe tracemalloc module is a debug tool to trace memory blocks allocated by Python. It provides the following information:\nTraceback where an object was allocated\nStatistics on allocated memory blocks per filename and per line number: total size, number and average size of allocated memory blocks\nCompute the differences between two snapshots to detect memory leaks\nTo trace most memory blocks allocated by Python, the module should be started\nas early as possible by setting the PYTHONTRACEMALLOC\nenvironment\nvariable to 1\n, or by using -X\ntracemalloc\ncommand line\noption. The tracemalloc.start()\nfunction can be called at runtime to\nstart tracing Python memory allocations.\nBy default, a trace of an allocated memory block only stores the most recent\nframe (1 frame). To store 25 frames at startup: set the\nPYTHONTRACEMALLOC\nenvironment variable to 25\n, or use the\n-X\ntracemalloc=25\ncommand line option.\nExamplesÂ¶\nDisplay the top 10Â¶\nDisplay the 10 files allocating the most memory:\nimport tracemalloc\ntracemalloc.start()\n# ... run your application ...\nsnapshot = tracemalloc.take_snapshot()\ntop_stats = snapshot.statistics('lineno')\nprint(\"[ Top 10 ]\")\nfor stat in top_stats[:10]:\nprint(stat)\nExample of output of the Python test suite:\n[ Top 10 ]\n<frozen importlib._bootstrap>:716: size=4855 KiB, count=39328, average=126 B\n<frozen importlib._bootstrap>:284: size=521 KiB, count=3199, average=167 B\n/usr/lib/python3.4/collections/__init__.py:368: size=244 KiB, count=2315, average=108 B\n/usr/lib/python3.4/unittest/case.py:381: size=185 KiB, count=779, average=243 B\n/usr/lib/python3.4/unittest/case.py:402: size=154 KiB, count=378, average=416 B\n/usr/lib/python3.4/abc.py:133: size=88.7 KiB, count=347, average=262 B\n<frozen importlib._bootstrap>:1446: size=70.4 KiB, count=911, average=79 B\n<frozen importlib._bootstrap>:1454: size=52.0 KiB, count=25, average=2131 B\n<string>:5: size=49.7 KiB, cou"}
{"url": "https://docs.python.org/3/library/datetime.html", "title": "", "text": "datetime\nâ Basic date and time typesÂ¶\nSource code: Lib/datetime.py\nThe datetime\nmodule supplies classes for manipulating dates and times.\nWhile date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.\nTip\nSkip to the format codes.\nSee also\n- Module\ncalendar\nGeneral calendar related functions.\n- Module\ntime\nTime access and conversions.\n- Module\nzoneinfo\nConcrete time zones representing the IANA time zone database.\n- Package dateutil\nThird-party library with expanded time zone and parsing support.\n- Package DateType\nThird-party library that introduces distinct static types to e.g. allow static type checkers to differentiate between naive and aware datetimes.\nAware and Naive ObjectsÂ¶\nDate and time objects may be categorized as âawareâ or ânaiveâ depending on whether or not they include time zone information.\nWith sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, an aware object can locate itself relative to other aware objects. An aware object represents a specific moment in time that is not open to interpretation. [1]\nA naive object does not contain enough information to unambiguously locate itself relative to other date/time objects. Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other time zone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass. Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality.\nFor applications requiring aware objects, datetime\nand time\nobjects have an optional time zone information attribute, tzinfo\n, that\ncan be set to an instance of a subclass of the abstract tzinfo\nclass.\nThese tzinfo\nobjects capture information about the offset from UTC\ntime, the time zone name, and whether daylight saving time i"}
{"url": "https://docs.python.org/3/library/logging.handlers.html", "title": "", "text": "logging.handlers\nâ Logging handlersÂ¶\nSource code: Lib/logging/handlers.py\nThe following useful handlers are provided in the package. Note that three of\nthe handlers (StreamHandler\n, FileHandler\nand\nNullHandler\n) are actually defined in the logging\nmodule itself,\nbut have been documented here along with the other handlers.\nStreamHandlerÂ¶\nThe StreamHandler\nclass, located in the core logging\npackage,\nsends logging output to streams such as sys.stdout, sys.stderr or any\nfile-like object (or, more precisely, any object which supports write()\nand flush()\nmethods).\n- class logging.StreamHandler(stream=None)Â¶\nReturns a new instance of the\nStreamHandler\nclass. If stream is specified, the instance will use it for logging output; otherwise, sys.stderr will be used.- emit(record)Â¶\nIf a formatter is specified, it is used to format the record. The record is then written to the stream followed by\nterminator\n. If exception information is present, it is formatted usingtraceback.print_exception()\nand appended to the stream.\n- flush()Â¶\nFlushes the stream by calling its\nflush()\nmethod. Note that theclose()\nmethod is inherited fromHandler\nand so does no output, so an explicitflush()\ncall may be needed at times.\n- setStream(stream)Â¶\nSets the instanceâs stream to the specified value, if it is different. The old stream is flushed before the new stream is set.\n- Parameters:\nstream â The stream that the handler should use.\n- Returns:\nthe old stream, if the stream was changed, or\nNone\nif it wasnât.\nAdded in version 3.7.\n- terminatorÂ¶\nString used as the terminator when writing a formatted record to a stream. Default value is\n'\\n'\n.If you donât want a newline termination, you can set the handler instanceâs\nterminator\nattribute to the empty string.In earlier versions, the terminator was hardcoded as\n'\\n'\n.Added in version 3.2.\nFileHandlerÂ¶\nThe FileHandler\nclass, located in the core logging\npackage,\nsends logging output to a disk file. It inherits the output functionality from\nStreamHandl"}
{"url": "https://docs.python.org/3/library/concurrent.html", "title": "", "text": "The concurrent\npackageÂ¶\nCurrently, there is only one module in this package:\nconcurrent.futures\nâ Launching parallel tasks\nconcurrent\npackageÂ¶Currently, there is only one module in this package:\nconcurrent.futures\nâ Launching parallel tasks"}
{"url": "https://docs.python.org/3/library/sys_path_init.html", "title": "", "text": "The initialization of the sys.path\nmodule search pathÂ¶\nA module search path is initialized when Python starts. This module search path\nmay be accessed at sys.path\n.\nThe first entry in the module search path is the directory that contains the\ninput script, if there is one. Otherwise, the first entry is the current\ndirectory, which is the case when executing the interactive shell, a -c\ncommand, or -m\nmodule.\nThe PYTHONPATH\nenvironment variable is often used to add directories\nto the search path. If this environment variable is found then the contents are\nadded to the module search path.\nNote\nPYTHONPATH\nwill affect all installed Python versions/environments.\nBe wary of setting this in your shell profile or global environment variables.\nThe site\nmodule offers more nuanced techniques as mentioned below.\nThe next items added are the directories containing standard Python modules as\nwell as any extension modules that these modules depend on. Extension\nmodules are .pyd\nfiles on Windows and .so\nfiles on other platforms. The\ndirectory with the platform-independent Python modules is called prefix\n.\nThe directory with the extension modules is called exec_prefix\n.\nThe PYTHONHOME\nenvironment variable may be used to set the prefix\nand exec_prefix\nlocations. Otherwise these directories are found by using\nthe Python executable as a starting point and then looking for various âlandmarkâ\nfiles and directories. Note that any symbolic links are followed so the real\nPython executable location is used as the search starting point. The Python\nexecutable location is called home\n.\nOnce home\nis determined, the prefix\ndirectory is found by first looking\nfor pythonmajorversionminorversion.zip\n(python311.zip\n). On Windows\nthe zip archive is searched for in home\nand on Unix the archive is expected\nto be in lib\n. Note that the expected zip archive location is added to the\nmodule search path even if the archive does not exist. If no archive was found,\nPython on Windows will continue the search for"}
{"url": "https://docs.python.org/3/library/dis.html", "title": "", "text": "dis\nâ Disassembler for Python bytecodeÂ¶\nSource code: Lib/dis.py\nThe dis\nmodule supports the analysis of CPython bytecode by\ndisassembling it. The CPython bytecode which this module takes as an input is\ndefined in the file Include/opcode.h\nand used by the compiler and the\ninterpreter.\nCPython implementation detail: Bytecode is an implementation detail of the CPython interpreter. No guarantees are made that bytecode will not be added, removed, or changed between versions of Python. Use of this module should not be considered to work across Python VMs or Python releases.\nChanged in version 3.6: Use 2 bytes for each instruction. Previously the number of bytes varied by instruction.\nChanged in version 3.10: The argument of jump, exception handling and loop instructions is now the instruction offset rather than the byte offset.\nChanged in version 3.11: Some instructions are accompanied by one or more inline cache entries,\nwhich take the form of CACHE\ninstructions. These instructions\nare hidden by default, but can be shown by passing show_caches=True\nto\nany dis\nutility. Furthermore, the interpreter now adapts the\nbytecode to specialize it for different runtime conditions. The\nadaptive bytecode can be shown by passing adaptive=True\n.\nChanged in version 3.12: The argument of a jump is the offset of the target instruction relative\nto the instruction that appears immediately after the jump instructionâs\nCACHE\nentries.\nAs a consequence, the presence of the CACHE\ninstructions is\ntransparent for forward jumps but needs to be taken into account when\nreasoning about backward jumps.\nChanged in version 3.13: The output shows logical labels rather than instruction offsets\nfor jump targets and exception handlers. The -O\ncommand line\noption and the show_offsets\nargument were added.\nExample: Given the function myfunc()\n:\ndef myfunc(alist):\nreturn len(alist)\nthe following command can be used to display the disassembly of\nmyfunc()\n:\n>>> dis.dis(myfunc)\n2 RESUME 0\n3 LOAD_GLOBAL 1 (len + NU"}
{"url": "https://docs.python.org/3/library/binary.html", "title": "", "text": "Binary Data ServicesÂ¶\nThe modules described in this chapter provide some basic services operations for manipulation of binary data. Other operations on binary data, specifically in relation to file formats and network protocols, are described in the relevant sections.\nSome libraries described under Text Processing Services also work with either\nASCII-compatible binary formats (for example, re\n) or all binary data\n(for example, difflib\n).\nIn addition, see the documentation for Pythonâs built-in binary data types in Binary Sequence Types â bytes, bytearray, memoryview.\nstruct\nâ Interpret bytes as packed binary datacodecs\nâ Codec registry and base classes"}
{"url": "https://docs.python.org/3/library/py_compile.html", "title": "", "text": "py_compile\nâ Compile Python source filesÂ¶\nSource code: Lib/py_compile.py\nThe py_compile\nmodule provides a function to generate a byte-code file\nfrom a source file, and another function used when the module source file is\ninvoked as a script.\nThough not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.\n- exception py_compile.PyCompileErrorÂ¶\nException raised when an error occurs while attempting to compile the file.\n- py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=-1, invalidation_mode=PycInvalidationMode.TIMESTAMP, quiet=0)Â¶\nCompile a source file to byte-code and write out the byte-code cache file. The source code is loaded from the file named file. The byte-code is written to cfile, which defaults to the PEP 3147/PEP 488 path, ending in\n.pyc\n. For example, if file is/foo/bar/baz.py\ncfile will default to/foo/bar/__pycache__/baz.cpython-32.pyc\nfor Python 3.2. If dfile is specified, it is used instead of file as the name of the source file from which source lines are obtained for display in exception tracebacks. If doraise is true, aPyCompileError\nis raised when an error is encountered while compiling file. If doraise is false (the default), an error string is written tosys.stderr\n, but no exception is raised. This function returns the path to byte-compiled file, i.e. whatever cfile value was used.The doraise and quiet arguments determine how errors are handled while compiling file. If quiet is 0 or 1, and doraise is false, the default behaviour is enabled: an error string is written to\nsys.stderr\n, and the function returnsNone\ninstead of a path. If doraise is true, aPyCompileError\nis raised instead. However if quiet is 2, no message is written, and doraise has no effect.If the path that cfile becomes (either explicitly specified or computed) is a symlink or non-regular file,"}
{"url": "https://docs.python.org/3/library/tempfile.html", "title": "", "text": "tempfile\nâ Generate temporary files and directoriesÂ¶\nSource code: Lib/tempfile.py\nThis module creates temporary files and directories. It works on all\nsupported platforms. TemporaryFile\n, NamedTemporaryFile\n,\nTemporaryDirectory\n, and SpooledTemporaryFile\nare high-level\ninterfaces which provide automatic cleanup and can be used as\ncontext managers. mkstemp()\nand\nmkdtemp()\nare lower-level functions which require manual cleanup.\nAll the user-callable functions and constructors take additional arguments which allow direct control over the location and name of temporary files and directories. Files names used by this module include a string of random characters which allows those files to be securely created in shared temporary directories. To maintain backward compatibility, the argument order is somewhat odd; it is recommended to use keyword arguments for clarity.\nThe module defines the following user-callable items:\n- tempfile.TemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)Â¶\nReturn a file-like object that can be used as a temporary storage area. The file is created securely, using the same rules as\nmkstemp()\n. It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected). Under Unix, the directory entry for the file is either not created at all or is removed immediately after the file is created. Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system.The resulting object can be used as a context manager (see Examples). On completion of the context or destruction of the file object the temporary file will be removed from the filesystem.\nThe mode parameter defaults to\n'w+b'\nso that the file created can be read and written without being closed. Binary mode is used so that it behaves consistently on all platforms without regard for the data"}
{"url": "https://docs.python.org/3/library/development.html", "title": "", "text": "Development ToolsÂ¶\nThe modules described in this chapter help you write software. For example, the\npydoc\nmodule takes a module and generates documentation based on the\nmoduleâs contents. The doctest\nand unittest\nmodules contains\nframeworks for writing unit tests that automatically exercise code and verify\nthat the expected output is produced.\nThe list of modules described in this chapter is:\ntyping\nâ Support for type hints- Specification for the Python Type System\n- Type aliases\n- NewType\n- Annotating callable objects\n- Generics\n- Annotating tuples\n- The type of class objects\n- Annotating generators and coroutines\n- User-defined generic types\n- The\nAny\ntype - Nominal vs structural subtyping\n- Module contents\n- Deprecation Timeline of Major Features\npydoc\nâ Documentation generator and online help system- Python Development Mode\ndoctest\nâ Test interactive Python examplesunittest\nâ Unit testing frameworkunittest.mock\nâ mock object libraryunittest.mock\nâ getting started- Using Mock\n- Mock Patching Methods\n- Mock for Method Calls on an Object\n- Mocking Classes\n- Naming your mocks\n- Tracking all Calls\n- Setting Return Values and Attributes\n- Raising exceptions with mocks\n- Side effect functions and iterables\n- Mocking asynchronous iterators\n- Mocking asynchronous context manager\n- Creating a Mock from an Existing Object\n- Using side_effect to return per file content\n- Patch Decorators\n- Further Examples\n- Mocking chained calls\n- Partial mocking\n- Mocking a Generator Method\n- Applying the same patch to every test method\n- Mocking Unbound Methods\n- Checking multiple calls with mock\n- Coping with mutable arguments\n- Nesting Patches\n- Mocking a dictionary with MagicMock\n- Mock subclasses and their attributes\n- Mocking imports with patch.dict\n- Tracking order of calls and less verbose call assertions\n- More complex argument matching\n- Using Mock\ntest\nâ Regression tests package for Pythontest.support\nâ Utilities for the Python test suitetest.support.socket_helper\nâ Utilities f"}
{"url": "https://docs.python.org/3/library/readline.html", "title": "", "text": "readline\nâ GNU readline interfaceÂ¶\nThe readline\nmodule defines a number of functions to facilitate\ncompletion and reading/writing of history files from the Python interpreter.\nThis module can be used directly, or via the rlcompleter\nmodule, which\nsupports completion of Python identifiers at the interactive prompt. Settings\nmade using this module affect the behaviour of both the interpreterâs\ninteractive prompt and the prompts offered by the built-in input()\nfunction.\nReadline keybindings may be configured via an initialization file, typically\n.inputrc\nin your home directory. See Readline Init File\nin the GNU Readline manual for information about the format and\nallowable constructs of that file, and the capabilities of the\nReadline library in general.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nNote\nThe underlying Readline library API may be implemented by\nthe editline\n(libedit\n) library instead of GNU readline.\nOn macOS the readline\nmodule detects which library is being used\nat run time.\nThe configuration file for editline\nis different from that\nof GNU readline. If you programmatically load configuration strings\nyou can use backend\nto determine which library is being used.\nIf you use editline\n/libedit\nreadline emulation on macOS, the\ninitialization file located in your home directory is named\n.editrc\n. For example, the following content in ~/.editrc\nwill\nturn ON vi keybindings and TAB completion:\npython:bind -v\npython:bind ^I rl_complete\nAlso note that different libraries may use different history file formats. When switching the underlying library, existing history files may become unusable.\n- readline.backendÂ¶\nThe name of the underlying Readline library being used, either\n\"readline\"\nor\"editline\"\n.Added in version 3.13.\nInit fileÂ¶\nThe following functions relate to the init file and user configuration:\n- readline.parse_and_bind(string)Â¶\nExecute the init line provided in the string argum"}
{"url": "https://docs.python.org/3/library/traceback.html", "title": "", "text": "traceback\nâ Print or retrieve a stack tracebackÂ¶\nSource code: Lib/traceback.py\nThis module provides a standard interface to extract, format and print stack traces of Python programs. It is more flexible than the interpreterâs default traceback display, and therefore makes it possible to configure certain aspects of the output. Finally, it contains a utility for capturing enough information about an exception to print it later, without the need to save a reference to the actual exception. Since exceptions can be the roots of large objects graph, this utility can significantly improve memory management.\nThe module uses traceback objects â these are\nobjects of type types.TracebackType\n,\nwhich are assigned to the __traceback__\nfield of\nBaseException\ninstances.\nSee also\n- Module\nfaulthandler\nUsed to dump Python tracebacks explicitly, on a fault, after a timeout, or on a user signal.\n- Module\npdb\nInteractive source code debugger for Python programs.\nThe moduleâs API can be divided into two parts:\nModule-level functions offering basic functionality, which are useful for interactive inspection of exceptions and tracebacks.\nTracebackException\nclass and its helper classesStackSummary\nandFrameSummary\n. These offer both more flexibility in the output generated and the ability to store the information necessary for later formatting without holding references to actual exception and traceback objects.\nModule-Level FunctionsÂ¶\n- traceback.print_tb(tb, limit=None, file=None)Â¶\nPrint up to limit stack trace entries from traceback object tb (starting from the callerâs frame) if limit is positive. Otherwise, print the last\nabs(limit)\nentries. If limit is omitted orNone\n, all entries are printed. If file is omitted orNone\n, the output goes tosys.stderr\n; otherwise it should be an open file or file-like object to receive the output.Note\nThe meaning of the limit parameter is different than the meaning of\nsys.tracebacklimit\n. A negative limit value corresponds to a positive value ofsys.t"}
{"url": "https://docs.python.org/3/library/cmath.html", "title": "", "text": "cmath\nâ Mathematical functions for complex numbersÂ¶\nThis module provides access to mathematical functions for complex numbers. The\nfunctions in this module accept integers, floating-point numbers or complex\nnumbers as arguments. They will also accept any Python object that has either a\n__complex__()\nor a __float__()\nmethod: these methods are used to\nconvert the object to a complex or floating-point number, respectively, and\nthe function is then applied to the result of the conversion.\nNote\nFor functions involving branch cuts, we have the problem of deciding how to define those functions on the cut itself. Following Kahanâs âBranch cuts for complex elementary functionsâ paper, as well as Annex G of C99 and later C standards, we use the sign of zero to distinguish one side of the branch cut from the other: for a branch cut along (a portion of) the real axis we look at the sign of the imaginary part, while for a branch cut along the imaginary axis we look at the sign of the real part.\nFor example, the cmath.sqrt()\nfunction has a branch cut along the\nnegative real axis. An argument of complex(-2.0, -0.0)\nis treated as\nthough it lies below the branch cut, and so gives a result on the negative\nimaginary axis:\n>>> cmath.sqrt(complex(-2.0, -0.0))\n-1.4142135623730951j\nBut an argument of complex(-2.0, 0.0)\nis treated as though it lies above\nthe branch cut:\n>>> cmath.sqrt(complex(-2.0, 0.0))\n1.4142135623730951j\nConversions to and from polar coordinates |\n|\nReturn the phase of z |\n|\nReturn the representation of z in polar coordinates |\n|\nReturn the complex number z with polar coordinates r and phi |\n|\nPower and logarithmic functions |\n|\nReturn e raised to the power z |\n|\nReturn the logarithm of z to the given base (e by default) |\n|\nReturn the base-10 logarithm of z |\n|\nReturn the square root of z |\n|\nTrigonometric functions |\n|\nReturn the arc cosine of z |\n|\nReturn the arc sine of z |\n|\nReturn the arc tangent of z |\n|\nReturn the cosine of z |\n|\nReturn the sine of z |\n|\nReturn"}
{"url": "https://docs.python.org/3/library/posix.html", "title": "", "text": "posix\nâ The most common POSIX system callsÂ¶\nThis module provides access to operating system functionality that is standardized by the C Standard and the POSIX standard (a thinly disguised Unix interface).\nAvailability: Unix.\nDo not import this module directly. Instead, import the module os\n,\nwhich provides a portable version of this interface. On Unix, the os\nmodule provides a superset of the posix\ninterface. On non-Unix operating\nsystems the posix\nmodule is not available, but a subset is always\navailable through the os\ninterface. Once os\nis imported, there is\nno performance penalty in using it instead of posix\n. In addition,\nos\nprovides some additional functionality, such as automatically calling\nputenv()\nwhen an entry in os.environ\nis changed.\nErrors are reported as exceptions; the usual exceptions are given for type\nerrors, while errors reported by the system calls raise OSError\n.\nLarge File SupportÂ¶\nSeveral operating systems (including AIX and Solaris) provide support for files that are larger than 2 GiB from a C programming model where int and long are 32-bit values. This is typically accomplished by defining the relevant size and offset types as 64-bit values. Such files are sometimes referred to as large files.\nLarge file support is enabled in Python when the size of an off_t\nis\nlarger than a long and the long long is at least as large\nas an off_t\n.\nIt may be necessary to configure and compile Python with certain compiler flags\nto enable this mode. For example, with Solaris 2.6 and 2.7 you need to do\nsomething like:\nCFLAGS=\"`getconf LFS_CFLAGS`\" OPT=\"-g -O2 $CFLAGS\" \\\n./configure\nOn large-file-capable Linux systems, this might work:\nCFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT=\"-g -O2 $CFLAGS\" \\\n./configure\nNotable Module ContentsÂ¶\nIn addition to many functions described in the os\nmodule documentation,\nposix\ndefines the following data item:\n- posix.environÂ¶\nA dictionary representing the string environment at the time the interpreter was start"}
{"url": "https://docs.python.org/3/library/functional.html", "title": "", "text": "Functional Programming ModulesÂ¶\nThe modules described in this chapter provide functions and classes that support a functional programming style, and general operations on callables.\nThe following modules are documented in this chapter:\nThe modules described in this chapter provide functions and classes that support a functional programming style, and general operations on callables.\nThe following modules are documented in this chapter:"}
{"url": "https://docs.python.org/3/library/tkinter.messagebox.html", "title": "", "text": "tkinter.messagebox\nâ Tkinter message promptsÂ¶\nSource code: Lib/tkinter/messagebox.py\nThe tkinter.messagebox\nmodule provides a template base class as well as\na variety of convenience methods for commonly used configurations. The message\nboxes are modal and will return a subset of (True\n, False\n, None\n,\nOK\n, CANCEL\n, YES\n, NO\n) based on\nthe userâs selection. Common message box styles and layouts include but are not\nlimited to:\n- class tkinter.messagebox.Message(master=None, **options)Â¶\nCreate a message window with an application-specified message, an icon and a set of buttons. Each of the buttons in the message window is identified by a unique symbolic name (see the type options).\nThe following options are supported:\n- command\nSpecifies the function to invoke when the user closes the dialog. The name of the button clicked by the user to close the dialog is passed as argument. This is only available on macOS.\n- default\nGives the symbolic name of the default button for this message window (\nOK\n,CANCEL\n, and so on). If this option is not specified, the first button in the dialog will be made the default.- detail\nSpecifies an auxiliary message to the main message given by the message option. The message detail will be presented beneath the main message and, where supported by the OS, in a less emphasized font than the main message.\n- icon\nSpecifies an icon to display. If this option is not specified, then the\nINFO\nicon will be displayed.- message\nSpecifies the message to display in this message box. The default value is an empty string.\n- parent\nMakes the specified window the logical parent of the message box. The message box is displayed on top of its parent window.\n- title\nSpecifies a string to display as the title of the message box. This option is ignored on macOS, where platform guidelines forbid the use of a title on this kind of dialog.\n- type\nArranges for a predefined set of buttons to be displayed.\n- show(**options)Â¶\nDisplay a message window and wait for the u"}
{"url": "https://docs.python.org/3/library/textwrap.html", "title": "", "text": "textwrap\nâ Text wrapping and fillingÂ¶\nSource code: Lib/textwrap.py\nThe textwrap\nmodule provides some convenience functions,\nas well as TextWrapper\n, the class that does all the work.\nIf youâre just wrapping or filling one or two text strings, the convenience\nfunctions should be good enough; otherwise, you should use an instance of\nTextWrapper\nfor efficiency.\n- textwrap.wrap(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=' [...]')Â¶\nWraps the single paragraph in text (a string) so every line is at most width characters long. Returns a list of output lines, without final newlines.\nOptional keyword arguments correspond to the instance attributes of\nTextWrapper\n, documented below.See the\nTextWrapper.wrap()\nmethod for additional details on howwrap()\nbehaves.\n- textwrap.fill(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=' [...]')Â¶\nWraps the single paragraph in text, and returns a single string containing the wrapped paragraph.\nfill()\nis shorthand for\"\\n\".join(wrap(text, ...))\nIn particular,\nfill()\naccepts exactly the same keyword arguments aswrap()\n.\n- textwrap.shorten(text, width, *, fix_sentence_endings=False, break_long_words=True, break_on_hyphens=True, placeholder=' [...]')Â¶\nCollapse and truncate the given text to fit in the given width.\nFirst the whitespace in text is collapsed (all whitespace is replaced by single spaces). If the result fits in the width, it is returned. Otherwise, enough words are dropped from the end so that the remaining words plus the placeholder fit within width:\n>>> textwrap.shorten(\"Hello world!\", width=12) 'Hello world!' >>> textwrap.shorten(\"Hello world!\", widt"}
{"url": "https://docs.python.org/3/library/typing.html", "title": "", "text": "typing\nâ Support for type hintsÂ¶\nAdded in version 3.5.\nSource code: Lib/typing.py\nNote\nThe Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.\nThis module provides runtime support for type hints.\nConsider the function below:\ndef surface_area_of_cube(edge_length: float) -> str:\nreturn f\"The surface area of the cube is {6 * edge_length ** 2}.\"\nThe function surface_area_of_cube\ntakes an argument expected to\nbe an instance of float\n, as indicated by the type hint\nedge_length: float\n. The function is expected to return an instance\nof str\n, as indicated by the -> str\nhint.\nWhile type hints can be simple classes like float\nor str\n,\nthey can also be more complex. The typing\nmodule provides a vocabulary of\nmore advanced type hints.\nNew features are frequently added to the typing\nmodule.\nThe typing_extensions package\nprovides backports of these new features to older versions of Python.\nSee also\n- Typing cheat sheet\nA quick overview of type hints (hosted at the mypy docs)\n- Type System Reference section of the mypy docs\nThe Python typing system is standardised via PEPs, so this reference should broadly apply to most Python type checkers. (Some parts may still be specific to mypy.)\n- Static Typing with Python\nType-checker-agnostic documentation written by the community detailing type system features, useful typing related tools and typing best practices.\nSpecification for the Python Type SystemÂ¶\nThe canonical, up-to-date specification of the Python type system can be found at Specification for the Python type system.\nType aliasesÂ¶\nA type alias is defined using the type\nstatement, which creates\nan instance of TypeAliasType\n. In this example,\nVector\nand list[float]\nwill be treated equivalently by static type\ncheckers:\ntype Vector = list[float]\ndef scale(scalar: float, vector: Vector) -> Vector:\nreturn [scalar * num for num in vector]\n# passes type checking; a list of floats qua"}
{"url": "https://docs.python.org/3/library/grp.html", "title": "", "text": "grp\nâ The group databaseÂ¶\nThis module provides access to the Unix group database. It is available on all Unix versions.\nAvailability: Unix, not WASI, not Android, not iOS.\nGroup database entries are reported as a tuple-like object, whose attributes\ncorrespond to the members of the group\nstructure (Attribute field below, see\n<grp.h>\n):\nIndex |\nAttribute |\nMeaning |\n|---|---|---|\n0 |\ngr_name |\nthe name of the group |\n1 |\ngr_passwd |\nthe (encrypted) group password; often empty |\n2 |\ngr_gid |\nthe numerical group ID |\n3 |\ngr_mem |\nall the group memberâs user names |\nThe gid is an integer, name and password are strings, and the member list is a\nlist of strings. (Note that most users are not explicitly listed as members of\nthe group they are in according to the password database. Check both databases\nto get complete membership information. Also note that a gr_name\nthat\nstarts with a +\nor -\nis likely to be a YP/NIS reference and may not be\naccessible via getgrnam()\nor getgrgid()\n.)\nIt defines the following items:\n- grp.getgrgid(id)Â¶\nReturn the group database entry for the given numeric group ID.\nKeyError\nis raised if the entry asked for cannot be found.Changed in version 3.10:\nTypeError\nis raised for non-integer arguments like floats or strings.\n- grp.getgrnam(name)Â¶\nReturn the group database entry for the given group name.\nKeyError\nis raised if the entry asked for cannot be found.\n- grp.getgrall()Â¶\nReturn a list of all available group entries, in arbitrary order.\nSee also\n- Module\npwd\nAn interface to the user database, similar to this."}
{"url": "https://docs.python.org/3/library/array.html", "title": "", "text": "array\nâ Efficient arrays of numeric valuesÂ¶\nThis module defines an object type which can compactly represent an array of basic values: characters, integers, floating-point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined:\nType code |\nC Type |\nPython Type |\nMinimum size in bytes |\nNotes |\n|---|---|---|---|---|\n|\nsigned char |\nint |\n1 |\n|\n|\nunsigned char |\nint |\n1 |\n|\n|\nwchar_t |\nUnicode character |\n2 |\n(1) |\n|\nPy_UCS4 |\nUnicode character |\n4 |\n(2) |\n|\nsigned short |\nint |\n2 |\n|\n|\nunsigned short |\nint |\n2 |\n|\n|\nsigned int |\nint |\n2 |\n|\n|\nunsigned int |\nint |\n2 |\n|\n|\nsigned long |\nint |\n4 |\n|\n|\nunsigned long |\nint |\n4 |\n|\n|\nsigned long long |\nint |\n8 |\n|\n|\nunsigned long long |\nint |\n8 |\n|\n|\nfloat |\nfloat |\n4 |\n|\n|\ndouble |\nfloat |\n8 |\nNotes:\nIt can be 16 bits or 32 bits depending on the platform.\nChanged in version 3.9:\narray('u')\nnow useswchar_t\nas C type instead of deprecatedPy_UNICODE\n. This change doesnât affect its behavior becausePy_UNICODE\nis alias ofwchar_t\nsince Python 3.3.Deprecated since version 3.3, will be removed in version 3.16: Please migrate to\n'w'\ntypecode.Added in version 3.13.\nThe actual representation of values is determined by the machine architecture\n(strictly speaking, by the C implementation). The actual size can be accessed\nthrough the array.itemsize\nattribute.\nThe module defines the following item:\n- array.typecodesÂ¶\nA string with all available type codes.\nThe module defines the following type:\n- class array.array(typecode[, initializer])Â¶\nA new array whose items are restricted by typecode, and initialized from the optional initializer value, which must be a\nbytes\norbytearray\nobject, a Unicode string, or iterable over elements of the appropriate type.If given a\nbytes\norbytearray\nobject, the initializer is passed to the new arra"}
{"url": "https://docs.python.org/3/library/tk.html", "title": "", "text": "Graphical user interfaces with TkÂ¶\nTk/Tcl has long been an integral part of Python. It provides a robust and\nplatform independent windowing toolkit, that is available to Python programmers\nusing the tkinter\npackage, and its extension, the tkinter.ttk\nmodule.\nThe tkinter\npackage is a thin object-oriented layer on top of Tcl/Tk. To\nuse tkinter\n, you donât need to write Tcl code, but you will need to\nconsult the Tk documentation, and occasionally the Tcl documentation.\ntkinter\nis a set of wrappers that implement the Tk widgets as Python\nclasses.\ntkinter\nâs chief virtues are that it is fast, and that it usually comes\nbundled with Python. Although its standard documentation is weak, good\nmaterial is available, which includes: references, tutorials, a book and\nothers. tkinter\nis also famous for having an outdated look and feel,\nwhich has been vastly improved in Tk 8.5. Nevertheless, there are many other\nGUI libraries that you could be interested in. The Python wiki lists several\nalternative GUI frameworks and tools.\ntkinter\nâ Python interface to Tcl/Tktkinter.colorchooser\nâ Color choosing dialogtkinter.font\nâ Tkinter font wrapper- Tkinter Dialogs\ntkinter.messagebox\nâ Tkinter message promptstkinter.scrolledtext\nâ Scrolled Text Widgettkinter.dnd\nâ Drag and drop supporttkinter.ttk\nâ Tk themed widgets- IDLE â Python editor and shell\nturtle\nâ Turtle graphics- Introduction\n- Get started\n- Tutorial\n- How toâ¦\n- Turtle graphics reference\n- Methods of RawTurtle/Turtle and corresponding functions\n- Methods of TurtleScreen/Screen and corresponding functions\n- Public classes\n- Explanation\n- Help and configuration\nturtledemo\nâ Demo scripts- Changes since Python 2.6\n- Changes since Python 3.0"}
{"url": "https://docs.python.org/3/library/code.html", "title": "", "text": "code\nâ Interpreter base classesÂ¶\nSource code: Lib/code.py\nThe code\nmodule provides facilities to implement read-eval-print loops in\nPython. Two classes and convenience functions are included which can be used to\nbuild applications which provide an interactive interpreter prompt.\n- class code.InteractiveInterpreter(locals=None)Â¶\nThis class deals with parsing and interpreter state (the userâs namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional locals argument specifies a mapping to use as the namespace in which code will be executed; it defaults to a newly created dictionary with key\n'__name__'\nset to'__console__'\nand key'__doc__'\nset toNone\n.Note that functions and classes objects created under an\nInteractiveInterpreter\ninstance will belong to the namespace specified by locals. They are only pickleable if locals is the namespace of an existing module.\n- class code.InteractiveConsole(locals=None, filename='<console>', local_exit=False)Â¶\nClosely emulate the behavior of the interactive Python interpreter. This class builds on\nInteractiveInterpreter\nand adds prompting using the familiarsys.ps1\nandsys.ps2\n, and input buffering. If local_exit is true,exit()\nandquit()\nin the console will not raiseSystemExit\n, but instead return to the calling code.Changed in version 3.13: Added local_exit parameter.\n- code.interact(banner=None, readfunc=None, local=None, exitmsg=None, local_exit=False)Â¶\nConvenience function to run a read-eval-print loop. This creates a new instance of\nInteractiveConsole\nand sets readfunc to be used as theInteractiveConsole.raw_input()\nmethod, if provided. If local is provided, it is passed to theInteractiveConsole\nconstructor for use as the default namespace for the interpreter loop. If local_exit is provided, it is passed to theInteractiveConsole\nconstructor. Theinteract()\nmethod of the instance is then run with banner and exitmsg passed as the banner and exit m"}
{"url": "https://docs.python.org/3/library/locale.html", "title": "", "text": "locale\nâ Internationalization servicesÂ¶\nSource code: Lib/locale.py\nThe locale\nmodule opens access to the POSIX locale database and\nfunctionality. The POSIX locale mechanism allows programmers to deal with\ncertain cultural issues in an application, without requiring the programmer to\nknow all the specifics of each country where the software is executed.\nThe locale\nmodule is implemented on top of the _locale\nmodule,\nwhich in turn uses an ANSI C locale implementation if available.\nThe locale\nmodule defines the following exception and functions:\n- exception locale.ErrorÂ¶\nException raised when the locale passed to\nsetlocale()\nis not recognized.\n- locale.setlocale(category, locale=None)Â¶\nIf locale is given and not\nNone\n,setlocale()\nmodifies the locale setting for the category. The available categories are listed in the data description below. locale may be a string, or a pair, language code and encoding. An empty string specifies the userâs default settings. If the modification of the locale fails, the exceptionError\nis raised. If successful, the new locale setting is returned.If locale is a pair, it is converted to a locale name using the locale aliasing engine. The language code has the same format as a locale name, but without encoding and\n@\n-modifier. The language code and encoding can beNone\n.If locale is omitted or\nNone\n, the current setting for category is returned.setlocale()\nis not thread-safe on most systems. Applications typically start with a call ofimport locale locale.setlocale(locale.LC_ALL, '')\nThis sets the locale for all categories to the userâs default setting (typically specified in the\nLANG\nenvironment variable). If the locale is not changed thereafter, using multithreading should not cause problems.\n- locale.localeconv()Â¶\nReturns the database of the local conventions as a dictionary. This dictionary has the following strings as keys:\nCategory\nKey\nMeaning\n'decimal_point'\nDecimal point character.\n'grouping'\nSequence of numbers specifying which rela"}
{"url": "https://docs.python.org/3/library/tarfile.html", "title": "", "text": "tarfile\nâ Read and write tar archive filesÂ¶\nSource code: Lib/tarfile.py\nThe tarfile\nmodule makes it possible to read and write tar\narchives, including those using gzip, bz2 and lzma compression.\nUse the zipfile\nmodule to read or write .zip\nfiles, or the\nhigher-level functions in shutil.\nSome facts and figures:\nreads and writes\ngzip\n,bz2\nandlzma\ncompressed archives if the respective modules are available.read/write support for the POSIX.1-1988 (ustar) format.\nread/write support for the GNU tar format including longname and longlink extensions, read-only support for all variants of the sparse extension including restoration of sparse files.\nread/write support for the POSIX.1-2001 (pax) format.\nhandles directories, regular files, hardlinks, symbolic links, fifos, character devices and block devices and is able to acquire and restore file information like timestamp, access permissions and owner.\nChanged in version 3.3: Added support for lzma\ncompression.\nChanged in version 3.12: Archives are extracted using a filter, which makes it possible to either limit surprising/dangerous features, or to acknowledge that they are expected and the archive is fully trusted. By default, archives are fully trusted, but this default is deprecated and slated to change in Python 3.14.\n- tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)Â¶\nReturn a\nTarFile\nobject for the pathname name. For detailed information onTarFile\nobjects and the keyword arguments that are allowed, see TarFile Objects.mode has to be a string of the form\n'filemode[:compression]'\n, it defaults to'r'\n. Here is a full list of mode combinations:mode\naction\n'r'\nor'r:*'\nOpen for reading with transparent compression (recommended).\n'r:'\nOpen for reading exclusively without compression.\n'r:gz'\nOpen for reading with gzip compression.\n'r:bz2'\nOpen for reading with bzip2 compression.\n'r:xz'\nOpen for reading with lzma compression.\n'x'\nor'x:'\nCreate a tarfile exclusively without compression. Raise a\nFileExist"}
{"url": "https://docs.python.org/3/library/datatypes.html", "title": "", "text": "Data TypesÂ¶\nThe modules described in this chapter provide a variety of specialized data types such as dates and times, fixed-type arrays, heap queues, double-ended queues, and enumerations.\nPython also provides some built-in data types, in particular,\ndict\n, list\n, set\nand frozenset\n, and\ntuple\n. The str\nclass is used to hold\nUnicode strings, and the bytes\nand bytearray\nclasses are used\nto hold binary data.\nThe following modules are documented in this chapter:\ndatetime\nâ Basic date and time typeszoneinfo\nâ IANA time zone supportcalendar\nâ General calendar-related functionscollections\nâ Container datatypescollections.abc\nâ Abstract Base Classes for Containersheapq\nâ Heap queue algorithmbisect\nâ Array bisection algorithmarray\nâ Efficient arrays of numeric valuesweakref\nâ Weak referencestypes\nâ Dynamic type creation and names for built-in typescopy\nâ Shallow and deep copy operationspprint\nâ Data pretty printerreprlib\nâ Alternaterepr()\nimplementationenum\nâ Support for enumerationsgraphlib\nâ Functionality to operate with graph-like structures"}
{"url": "https://docs.python.org/3/library/ipaddress.html", "title": "", "text": "ipaddress\nâ IPv4/IPv6 manipulation libraryÂ¶\nSource code: Lib/ipaddress.py\nipaddress\nprovides the capabilities to create, manipulate and\noperate on IPv4 and IPv6 addresses and networks.\nThe functions and classes in this module make it straightforward to handle various tasks related to IP addresses, including checking whether or not two hosts are on the same subnet, iterating over all hosts in a particular subnet, checking whether or not a string represents a valid IP address or network definition, and so on.\nThis is the full module API referenceâfor an overview and introduction, see An introduction to the ipaddress module.\nAdded in version 3.3.\nConvenience factory functionsÂ¶\nThe ipaddress\nmodule provides factory functions to conveniently create\nIP addresses, networks and interfaces:\n- ipaddress.ip_address(address)Â¶\nReturn an\nIPv4Address\norIPv6Address\nobject depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than2**32\nwill be considered to be IPv4 by default. AValueError\nis raised if address does not represent a valid IPv4 or IPv6 address.>>> ipaddress.ip_address('192.168.0.1') IPv4Address('192.168.0.1') >>> ipaddress.ip_address('2001:db8::') IPv6Address('2001:db8::')\n- ipaddress.ip_network(address, strict=True)Â¶\nReturn an\nIPv4Network\norIPv6Network\nobject depending on the IP address passed as argument. address is a string or integer representing the IP network. Either IPv4 or IPv6 networks may be supplied; integers less than2**32\nwill be considered to be IPv4 by default. strict is passed toIPv4Network\norIPv6Network\nconstructor. AValueError\nis raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.>>> ipaddress.ip_network('192.168.0.0/28') IPv4Network('192.168.0.0/28')\n- ipaddress.ip_interface(address)Â¶\nReturn an\nIPv4Interface\norIPv6Interface\nobject depending on the IP address passed as argument. address is a string or integer representing the IP address. Eith"}
{"url": "https://docs.python.org/3/library/xml.html", "title": "", "text": "XML Processing ModulesÂ¶\nSource code: Lib/xml/\nPythonâs interfaces for processing XML are grouped in the xml\npackage.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nIt is important to note that modules in the xml\npackage require that\nthere be at least one SAX-compliant XML parser available. The Expat parser is\nincluded with Python, so the xml.parsers.expat\nmodule will always be\navailable.\nThe documentation for the xml.dom\nand xml.sax\npackages are the\ndefinition of the Python bindings for the DOM and SAX interfaces.\nThe XML handling submodules are:\nxml.etree.ElementTree\n: the ElementTree API, a simple and lightweight XML processor\nxml.dom\n: the DOM API definitionxml.dom.minidom\n: a minimal DOM implementationxml.dom.pulldom\n: support for building partial DOM trees\nxml.sax\n: SAX2 base classes and convenience functionsxml.parsers.expat\n: the Expat parser binding\nXML securityÂ¶\nAn attacker can abuse XML features to carry out denial of service attacks, access local files, generate network connections to other machines, or circumvent firewalls.\nExpat versions lower than 2.6.0 may be vulnerable to âbillion laughsâ,\nâquadratic blowupâ and âlarge tokensâ. Python may be vulnerable if it uses such\nolder versions of Expat as a system-provided library.\nCheck pyexpat.EXPAT_VERSION\n.\nxmlrpc\nis vulnerable to the âdecompression bombâ attack.\n- billion laughs / exponential entity expansion\nThe Billion Laughs attack â also known as exponential entity expansion â uses multiple levels of nested entities. Each entity refers to another entity several times, and the final entity definition contains a small string. The exponential expansion results in several gigabytes of text and consumes lots of memory and CPU time.\n- quadratic blowup entity expansion\nA quadratic blowup attack is similar to a Billion Laughs attack; it abuses entity expansion, too. Instead of nested entities it repeats one large entity with a couple of thousand chars over and over again. The "}
{"url": "https://docs.python.org/3/library/csv.html", "title": "", "text": "csv\nâ CSV File Reading and WritingÂ¶\nSource code: Lib/csv.py\nThe so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases. CSV format was used for many years prior to attempts to describe the format in a standardized way in RFC 4180. The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications. These differences can make it annoying to process CSV files from multiple sources. Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.\nThe csv\nmodule implements classes to read and write tabular data in CSV\nformat. It allows programmers to say, âwrite this data in the format preferred\nby Excel,â or âread data from this file which was generated by Excel,â without\nknowing the precise details of the CSV format used by Excel. Programmers can\nalso describe the CSV formats understood by other applications or define their\nown special-purpose CSV formats.\nThe csv\nmoduleâs reader\nand writer\nobjects read and\nwrite sequences. Programmers can also read and write data in dictionary form\nusing the DictReader\nand DictWriter\nclasses.\nSee also\n- PEP 305 - CSV File API\nThe Python Enhancement Proposal which proposed this addition to Python.\nModule ContentsÂ¶\nThe csv\nmodule defines the following functions:\n- csv.reader(csvfile, /, dialect='excel', **fmtparams)Â¶\nReturn a reader object that will process lines from the given csvfile. A csvfile must be an iterable of strings, each in the readerâs defined csv format. A csvfile is most commonly a file-like object or list. If csvfile is a file object, it should be opened with\nnewline=''\n. [1] An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect"}
{"url": "https://docs.python.org/3/library/zipapp.html", "title": "", "text": "zipapp\nâ Manage executable Python zip archivesÂ¶\nAdded in version 3.5.\nSource code: Lib/zipapp.py\nThis module provides tools to manage the creation of zip files containing Python code, which can be executed directly by the Python interpreter. The module provides both a Command-Line Interface and a Python API.\nBasic ExampleÂ¶\nThe following example shows how the Command-Line Interface\ncan be used to create an executable archive from a directory containing\nPython code. When run, the archive will execute the main\nfunction from\nthe module myapp\nin the archive.\n$ python -m zipapp myapp -m \"myapp:main\"\n$ python myapp.pyz\n<output from myapp>\nCommand-Line InterfaceÂ¶\nWhen called as a program from the command line, the following form is used:\n$ python -m zipapp source [options]\nIf source is a directory, this will create an archive from the contents of source. If source is a file, it should be an archive, and it will be copied to the target archive (or the contents of its shebang line will be displayed if the âinfo option is specified).\nThe following options are understood:\n- -o <output>, --output=<output>Â¶\nWrite the output to a file named output. If this option is not specified, the output filename will be the same as the input source, with the extension\n.pyz\nadded. If an explicit filename is given, it is used as is (so a.pyz\nextension should be included if required).An output filename must be specified if the source is an archive (and in that case, output must not be the same as source).\n- -p <interpreter>, --python=<interpreter>Â¶\nAdd a\n#!\nline to the archive specifying interpreter as the command to run. Also, on POSIX, make the archive executable. The default is to write no#!\nline, and not make the file executable.\n- -m <mainfn>, --main=<mainfn>Â¶\nWrite a\n__main__.py\nfile to the archive that executes mainfn. The mainfn argument should have the form âpkg.mod:fnâ, where âpkg.modâ is a package/module in the archive, and âfnâ is a callable in the given module. The__main__.py\n"}
{"url": "https://docs.python.org/3/library/debug.html", "title": "", "text": "Debugging and ProfilingÂ¶\nThese libraries help you with Python development: the debugger enables you to step through code, analyze stack frames and set breakpoints etc., and the profilers run code and give you a detailed breakdown of execution times, allowing you to identify bottlenecks in your programs. Auditing events provide visibility into runtime behaviors that would otherwise require intrusive debugging or patching."}
{"url": "https://docs.python.org/3/library/filesys.html", "title": "", "text": "File and Directory AccessÂ¶\nThe modules described in this chapter deal with disk files and directories. For example, there are modules for reading the properties of files, manipulating paths in a portable way, and creating temporary files. The full list of modules in this chapter is:\npathlib\nâ Object-oriented filesystem pathsos.path\nâ Common pathname manipulationsstat\nâ Interpretingstat()\nresultsfilecmp\nâ File and Directory Comparisonstempfile\nâ Generate temporary files and directoriesglob\nâ Unix style pathname pattern expansionfnmatch\nâ Unix filename pattern matchinglinecache\nâ Random access to text linesshutil\nâ High-level file operations\nSee also\n- Module\nos\nOperating system interfaces, including functions to work with files at a lower level than Python file objects.\n- Module\nio\nPythonâs built-in I/O library, including both abstract classes and some concrete classes such as file I/O.\n- Built-in function\nopen()\nThe standard way to open files for reading and writing with Python."}
{"url": "https://docs.python.org/3/library/tomllib.html", "title": "", "text": "tomllib\nâ Parse TOML filesÂ¶\nAdded in version 3.11.\nSource code: Lib/tomllib\nThis module provides an interface for parsing TOML 1.0.0 (Tomâs Obvious Minimal Language, https://toml.io). This module does not support writing TOML.\nSee also\nThe Tomli-W package\nis a TOML writer that can be used in conjunction with this module,\nproviding a write API familiar to users of the standard library\nmarshal\nand pickle\nmodules.\nSee also\nThe TOML Kit package is a style-preserving TOML library with both read and write capability. It is a recommended replacement for this module for editing already existing TOML files.\nThis module defines the following functions:\n- tomllib.load(fp, /, *, parse_float=float)Â¶\nRead a TOML file. The first argument should be a readable and binary file object. Return a\ndict\n. Convert TOML types to Python using this conversion table.parse_float will be called with the string of every TOML float to be decoded. By default, this is equivalent to\nfloat(num_str)\n. This can be used to use another datatype or parser for TOML floats (e.g.decimal.Decimal\n). The callable must not return adict\nor alist\n, else aValueError\nis raised.A\nTOMLDecodeError\nwill be raised on an invalid TOML document.\n- tomllib.loads(s, /, *, parse_float=float)Â¶\nLoad TOML from a\nstr\nobject. Return adict\n. Convert TOML types to Python using this conversion table. The parse_float argument has the same meaning as inload()\n.A\nTOMLDecodeError\nwill be raised on an invalid TOML document.\nThe following exceptions are available:\n- exception tomllib.TOMLDecodeErrorÂ¶\nSubclass of\nValueError\n.\nExamplesÂ¶\nParsing a TOML file:\nimport tomllib\nwith open(\"pyproject.toml\", \"rb\") as f:\ndata = tomllib.load(f)\nParsing a TOML string:\nimport tomllib\ntoml_str = \"\"\"\npython-version = \"3.11.0\"\npython-implementation = \"CPython\"\n\"\"\"\ndata = tomllib.loads(toml_str)\nConversion TableÂ¶\nTOML |\nPython |\n|---|---|\nTOML document |\ndict |\nstring |\nstr |\ninteger |\nint |\nfloat |\nfloat (configurable with parse_float) |\nboolean |\nbool "}
{"url": "https://docs.python.org/3/library/imaplib.html", "title": "", "text": "imaplib\nâ IMAP4 protocol clientÂ¶\nSource code: Lib/imaplib.py\nThis module defines three classes, IMAP4\n, IMAP4_SSL\nand\nIMAP4_stream\n, which encapsulate a connection to an IMAP4 server and\nimplement a large subset of the IMAP4rev1 client protocol as defined in\nRFC 2060. It is backward compatible with IMAP4 (RFC 1730) servers, but\nnote that the STATUS\ncommand is not supported in IMAP4.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThree classes are provided by the imaplib\nmodule, IMAP4\nis the\nbase class:\n- class imaplib.IMAP4(host='', port=IMAP4_PORT, timeout=None)Â¶\nThis class implements the actual IMAP4 protocol. The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If host is not specified,\n''\n(the local host) is used. If port is omitted, the standard IMAP4 port (143) is used. The optional timeout parameter specifies a timeout in seconds for the connection attempt. If timeout is not given or isNone\n, the global default socket timeout is used.The\nIMAP4\nclass supports thewith\nstatement. When used like this, the IMAP4LOGOUT\ncommand is issued automatically when thewith\nstatement exits. E.g.:>>> from imaplib import IMAP4 >>> with IMAP4(\"domain.org\") as M: ... M.noop() ... ('OK', [b'Nothing Accomplished. d25if65hy903weo.87'])\nChanged in version 3.5: Support for the\nwith\nstatement was added.Changed in version 3.9: The optional timeout parameter was added.\nThree exceptions are defined as attributes of the IMAP4\nclass:\n- exception IMAP4.errorÂ¶\nException raised on any errors. The reason for the exception is passed to the constructor as a string.\n- exception IMAP4.abortÂ¶\nIMAP4 server errors cause this exception to be raised. This is a sub-class of\nIMAP4.error\n. Note that closing the instance and instantiating a new one will usually allow recovery from this exception.\n- exception IMAP4.readonlyÂ¶\nThis exception is raised when a"}
{"url": "https://docs.python.org/3/library/tkinter.font.html", "title": "", "text": "tkinter.font\nâ Tkinter font wrapperÂ¶\nSource code: Lib/tkinter/font.py\nThe tkinter.font\nmodule provides the Font\nclass for creating\nand using named fonts.\nThe different font weights and slants are:\n- class tkinter.font.Font(root=None, font=None, name=None, exists=False, **options)Â¶\nThe\nFont\nclass represents a named font. Font instances are given unique names and can be specified by their family, size, and style configuration. Named fonts are Tkâs method of creating and identifying fonts as a single object, rather than specifying a font by its attributes with each occurrence.arguments:\nfont - font specifier tuple (family, size, options)name - unique font nameexists - self points to existing named font if trueadditional keyword options (ignored if font is specified):\nfamily - font family i.e. Courier, Timessize - font sizeIf size is positive it is interpreted as size in points.If size is a negative number its absolute value is treatedas size in pixels.weight - font emphasis (NORMAL, BOLD)slant - ROMAN, ITALICunderline - font underlining (0 - none, 1 - underline)overstrike - font strikeout (0 - none, 1 - strikeout)- actual(option=None, displayof=None)Â¶\nReturn the attributes of the font.\n- cget(option)Â¶\nRetrieve an attribute of the font.\n- config(**options)Â¶\nModify attributes of the font.\n- copy()Â¶\nReturn new instance of the current font.\n- measure(text, displayof=None)Â¶\nReturn amount of space the text would occupy on the specified display when formatted in the current font. If no display is specified then the main application window is assumed.\n- metrics(*options, **kw)Â¶\nReturn font-specific data. Options include:\n- ascent - distance between baseline and highest point that a\ncharacter of the font can occupy\n- descent - distance between baseline and lowest point that a\ncharacter of the font can occupy\n- linespace - minimum vertical separation necessary between any two\ncharacters of the font that ensures no vertical overlap between lines.\nfixed - 1 if font is fixe"}
{"url": "https://docs.python.org/3/library/contextlib.html", "title": "", "text": "contextlib\nâ Utilities for with\n-statement contextsÂ¶\nSource code: Lib/contextlib.py\nThis module provides utilities for common tasks involving the with\nstatement. For more information see also Context Manager Types and\nWith Statement Context Managers.\nUtilitiesÂ¶\nFunctions and classes provided:\n- class contextlib.AbstractContextManagerÂ¶\nAn abstract base class for classes that implement\nobject.__enter__()\nandobject.__exit__()\n. A default implementation forobject.__enter__()\nis provided which returnsself\nwhileobject.__exit__()\nis an abstract method which by default returnsNone\n. See also the definition of Context Manager Types.Added in version 3.6.\n- class contextlib.AbstractAsyncContextManagerÂ¶\nAn abstract base class for classes that implement\nobject.__aenter__()\nandobject.__aexit__()\n. A default implementation forobject.__aenter__()\nis provided which returnsself\nwhileobject.__aexit__()\nis an abstract method which by default returnsNone\n. See also the definition of Asynchronous Context Managers.Added in version 3.7.\n- @contextlib.contextmanagerÂ¶\nThis function is a decorator that can be used to define a factory function for\nwith\nstatement context managers, without needing to create a class or separate__enter__()\nand__exit__()\nmethods.While many objects natively support use in with statements, sometimes a resource needs to be managed that isnât a context manager in its own right, and doesnât implement a\nclose()\nmethod for use withcontextlib.closing\n.An abstract example would be the following to ensure correct resource management:\nfrom contextlib import contextmanager @contextmanager def managed_resource(*args, **kwds): # Code to acquire resource, e.g.: resource = acquire_resource(*args, **kwds) try: yield resource finally: # Code to release resource, e.g.: release_resource(resource)\nThe function can then be used like this:\n>>> with managed_resource(timeout=3600) as resource: ... # Resource is released at the end of this block, ... # even if code in the block raises "}
{"url": "https://docs.python.org/3/library/xml.sax.handler.html", "title": "", "text": "xml.sax.handler\nâ Base classes for SAX handlersÂ¶\nSource code: Lib/xml/sax/handler.py\nThe SAX API defines five kinds of handlers: content handlers, DTD handlers,\nerror handlers, entity resolvers and lexical handlers. Applications normally\nonly need to implement those interfaces whose events they are interested in;\nthey can implement the interfaces in a single object or in multiple objects.\nHandler implementations should inherit from the base classes provided in the\nmodule xml.sax.handler\n, so that all methods get default implementations.\n- class xml.sax.handler.ContentHandlerÂ¶\nThis is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document.\n- class xml.sax.handler.DTDHandlerÂ¶\nHandle DTD events.\nThis interface specifies only those DTD events required for basic parsing (unparsed entities and attributes).\n- class xml.sax.handler.EntityResolverÂ¶\nBasic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.\n- class xml.sax.handler.ErrorHandlerÂ¶\nInterface used by the parser to present error and warning messages to the application. The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way.\n- class xml.sax.handler.LexicalHandlerÂ¶\nInterface used by the parser to represent low frequency events which may not be of interest to many applications.\nIn addition to these classes, xml.sax.handler\nprovides symbolic constants\nfor the feature and property names.\n- xml.sax.handler.feature_namespacesÂ¶\n- value:\n\"http://xml.org/sax/features/namespaces\"\ntrue: Perform Namespace processing.false: Optionally do not perform Namespace processing (implies namespace-prefixes; default).access: (parsing) read-only; (not parsing) read/write\n- xml.sax.handler.feature_"}
{"url": "https://docs.python.org/3/library/sysconfig.html", "title": "", "text": "sysconfig\nâ Provide access to Pythonâs configuration informationÂ¶\nAdded in version 3.2.\nSource code: Lib/sysconfig\nThe sysconfig\nmodule provides access to Pythonâs configuration\ninformation like the list of installation paths and the configuration variables\nrelevant for the current platform.\nConfiguration variablesÂ¶\nA Python distribution contains a Makefile\nand a pyconfig.h\nheader file that are necessary to build both the Python binary itself and\nthird-party C extensions compiled using setuptools\n.\nsysconfig\nputs all variables found in these files in a dictionary that\ncan be accessed using get_config_vars()\nor get_config_var()\n.\nNotice that on Windows, itâs a much smaller set.\n- sysconfig.get_config_vars(*args)Â¶\nWith no arguments, return a dictionary of all configuration variables relevant for the current platform.\nWith arguments, return a list of values that result from looking up each argument in the configuration variable dictionary.\nFor each argument, if the value is not found, return\nNone\n.\n- sysconfig.get_config_var(name)Â¶\nReturn the value of a single variable name. Equivalent to\nget_config_vars().get(name)\n.If name is not found, return\nNone\n.\nExample of usage:\n>>> import sysconfig\n>>> sysconfig.get_config_var('Py_ENABLE_SHARED')\n0\n>>> sysconfig.get_config_var('LIBDIR')\n'/usr/local/lib'\n>>> sysconfig.get_config_vars('AR', 'CXX')\n['ar', 'g++']\nInstallation pathsÂ¶\nPython uses an installation scheme that differs depending on the platform and on\nthe installation options. These schemes are stored in sysconfig\nunder\nunique identifiers based on the value returned by os.name\n.\nThe schemes are used by package installers to determine where to copy files to.\nPython currently supports nine schemes:\nposix_prefix: scheme for POSIX platforms like Linux or macOS. This is the default scheme used when Python or a component is installed.\nposix_home: scheme for POSIX platforms, when the home option is used. This scheme defines paths located under a specific home prefix.\nposi"}
{"url": "https://docs.python.org/3/library/random.html", "title": "", "text": "random\nâ Generate pseudo-random numbersÂ¶\nSource code: Lib/random.py\nThis module implements pseudo-random number generators for various distributions.\nFor integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.\nOn the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.\nAlmost all module functions depend on the basic function random()\n, which\ngenerates a random float uniformly in the half-open range 0.0 <= X < 1.0\n.\nPython uses the Mersenne Twister as the core generator. It produces 53-bit precision\nfloats and has a period of 2**19937-1. The underlying implementation in C is\nboth fast and threadsafe. The Mersenne Twister is one of the most extensively\ntested random number generators in existence. However, being completely\ndeterministic, it is not suitable for all purposes, and is completely unsuitable\nfor cryptographic purposes.\nThe functions supplied by this module are actually bound methods of a hidden\ninstance of the random.Random\nclass. You can instantiate your own\ninstances of Random\nto get generators that donât share state.\nClass Random\ncan also be subclassed if you want to use a different\nbasic generator of your own devising: see the documentation on that class for\nmore details.\nThe random\nmodule also provides the SystemRandom\nclass which\nuses the system function os.urandom()\nto generate random numbers\nfrom sources provided by the operating system.\nWarning\nThe pseudo-random generators of this module should not be used for\nsecurity purposes. For security or cryptographic uses, see the\nsecrets\nmodule.\nSee also\nM. Matsumoto and T. Nishimura, âMersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number gener"}
{"url": "https://docs.python.org/3/library/binascii.html", "title": "", "text": "binascii\nâ Convert between binary and ASCIIÂ¶\nThe binascii\nmodule contains a number of methods to convert between\nbinary and various ASCII-encoded binary representations. Normally, you will not\nuse these functions directly but use wrapper modules like\nbase64\ninstead. The binascii\nmodule contains\nlow-level functions written in C for greater speed that are used by the\nhigher-level modules.\nNote\na2b_*\nfunctions accept Unicode strings containing only ASCII characters.\nOther functions only accept bytes-like objects (such as\nbytes\n, bytearray\nand other objects that support the buffer\nprotocol).\nChanged in version 3.3: ASCII-only unicode strings are now accepted by the a2b_*\nfunctions.\nThe binascii\nmodule defines the following functions:\n- binascii.a2b_uu(string)Â¶\nConvert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.\n- binascii.b2a_uu(data, *, backtick=False)Â¶\nConvert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of data should be at most 45. If backtick is true, zeros are represented by\n'`'\ninstead of spaces.Changed in version 3.7: Added the backtick parameter.\n- binascii.a2b_base64(string, /, *, strict_mode=False)Â¶\nConvert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.\nIf strict_mode is true, only valid base64 data will be converted. Invalid base64 data will raise\nbinascii.Error\n.Valid base64:\nConforms to RFC 3548.\nContains only characters from the base64 alphabet.\nContains no excess data after padding (including excess padding, newlines, etc.).\nDoes not start with a padding.\nChanged in version 3.11: Added the strict_mode parameter.\n- binascii.b2a_base64(data, *, newline=True)Â¶\nConvert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a n"}
{"url": "https://docs.python.org/3/library/timeit.html", "title": "", "text": "timeit\nâ Measure execution time of small code snippetsÂ¶\nSource code: Lib/timeit.py\nThis module provides a simple way to time small bits of Python code. It has both a Command-Line Interface as well as a callable one. It avoids a number of common traps for measuring execution times. See also Tim Petersâ introduction to the âAlgorithmsâ chapter in the second edition of Python Cookbook, published by OâReilly.\nBasic ExamplesÂ¶\nThe following example shows how the Command-Line Interface can be used to compare three different expressions:\n$ python -m timeit \"'-'.join(str(n) for n in range(100))\"\n10000 loops, best of 5: 30.2 usec per loop\n$ python -m timeit \"'-'.join([str(n) for n in range(100)])\"\n10000 loops, best of 5: 27.5 usec per loop\n$ python -m timeit \"'-'.join(map(str, range(100)))\"\n10000 loops, best of 5: 23.2 usec per loop\nThis can be achieved from the Python Interface with:\n>>> import timeit\n>>> timeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)\n0.3018611848820001\n>>> timeit.timeit('\"-\".join([str(n) for n in range(100)])', number=10000)\n0.2727368790656328\n>>> timeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n0.23702679807320237\nA callable can also be passed from the Python Interface:\n>>> timeit.timeit(lambda: \"-\".join(map(str, range(100))), number=10000)\n0.19665591977536678\nNote however that timeit()\nwill automatically determine the number of\nrepetitions only when the command-line interface is used. In the\nExamples section you can find more advanced examples.\nPython InterfaceÂ¶\nThe module defines three convenience functions and a public class:\n- timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)Â¶\nCreate a\nTimer\ninstance with the given statement, setup code and timer function and run itstimeit()\nmethod with number executions. The optional globals argument specifies a namespace in which to execute the code.Changed in version 3.5: The optional globals parameter was added.\n- timeit.repeat(stmt='"}
{"url": "https://docs.python.org/3/library/operator.html", "title": "", "text": "operator\nâ Standard operators as functionsÂ¶\nSource code: Lib/operator.py\nThe operator\nmodule exports a set of efficient functions corresponding to\nthe intrinsic operators of Python. For example, operator.add(x, y)\nis\nequivalent to the expression x+y\n. Many function names are those used for\nspecial methods, without the double underscores. For backward compatibility,\nmany of these have a variant with the double underscores kept. The variants\nwithout the double underscores are preferred for clarity.\nThe functions fall into categories that perform object comparisons, logical operations, mathematical operations and sequence operations.\nThe object comparison functions are useful for all objects, and are named after the rich comparison operators they support:\n- operator.lt(a, b)Â¶\n- operator.le(a, b)Â¶\n- operator.eq(a, b)Â¶\n- operator.ne(a, b)Â¶\n- operator.ge(a, b)Â¶\n- operator.gt(a, b)Â¶\n- operator.__lt__(a, b)Â¶\n- operator.__le__(a, b)Â¶\n- operator.__eq__(a, b)Â¶\n- operator.__ne__(a, b)Â¶\n- operator.__ge__(a, b)Â¶\n- operator.__gt__(a, b)Â¶\nPerform ârich comparisonsâ between a and b. Specifically,\nlt(a, b)\nis equivalent toa < b\n,le(a, b)\nis equivalent toa <= b\n,eq(a, b)\nis equivalent toa == b\n,ne(a, b)\nis equivalent toa != b\n,gt(a, b)\nis equivalent toa > b\nandge(a, b)\nis equivalent toa >= b\n. Note that these functions can return any value, which may or may not be interpretable as a Boolean value. See Comparisons for more information about rich comparisons.\nThe logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations:\n- operator.not_(obj)Â¶\n- operator.__not__(obj)Â¶\nReturn the outcome of\nnot\nobj. (Note that there is no__not__()\nmethod for object instances; only the interpreter core defines this operation. The result is affected by the__bool__()\nand__len__()\nmethods.)\n- operator.truth(obj)Â¶\nReturn\nTrue\nif obj is true, andFalse\notherwise. This is equivalent to using thebool\nconstructor.\n- operator.is_("}
{"url": "https://docs.python.org/3/library/os.html", "title": "", "text": "os\nâ Miscellaneous operating system interfacesÂ¶\nSource code: Lib/os.py\nThis module provides a portable way of using operating system dependent\nfunctionality. If you just want to read or write a file see open()\n, if\nyou want to manipulate paths, see the os.path\nmodule, and if you want to\nread all the lines in all the files on the command line see the fileinput\nmodule. For creating temporary files and directories see the tempfile\nmodule, and for high-level file and directory handling see the shutil\nmodule.\nNotes on the availability of these functions:\nThe design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function\nos.stat(path)\nreturns stat information about path in the same format (which happens to have originated with the POSIX interface).Extensions peculiar to a particular operating system are also available through the\nos\nmodule, but using them is of course a threat to portability.All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.\nOn VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported.\nOn WebAssembly platforms, Android and iOS, large parts of the\nos\nmodule are not available or behave differently. APIs related to processes (e.g.fork()\n,execve()\n) and resources (e.g.nice()\n) are not available. Others likegetuid()\nandgetpid()\nare emulated or stubs. WebAssembly platforms also lack support for signals (e.g.kill()\n,wait()\n).\nNote\nAll functions in this module raise OSError\n(or subclasses thereof) in\nthe case of invalid or inaccessible file names and paths, or other arguments\nthat have the correct type, but are not accepted by the operating system.\n- os.nameÂ¶\nThe name of the operating system dependent module imported. The following names have currently been registered:\n'posix'\n,'nt'\n,'java'\n.See also\nsys.platform\nhas a finer"}
{"url": "https://docs.python.org/3/library/dialog.html", "title": "", "text": "Tkinter DialogsÂ¶\ntkinter.simpledialog\nâ Standard Tkinter input dialogsÂ¶\nSource code: Lib/tkinter/simpledialog.py\nThe tkinter.simpledialog\nmodule contains convenience classes and\nfunctions for creating simple modal dialogs to get a value from the user.\n- tkinter.simpledialog.askfloat(title, prompt, **kw)Â¶\n- tkinter.simpledialog.askinteger(title, prompt, **kw)Â¶\n- tkinter.simpledialog.askstring(title, prompt, **kw)Â¶\nThe above three functions provide dialogs that prompt the user to enter a value of the desired type.\n- class tkinter.simpledialog.Dialog(parent, title=None)Â¶\nThe base class for custom dialogs.\n- body(master)Â¶\nOverride to construct the dialogâs interface and return the widget that should have initial focus.\n- buttonbox()Â¶\nDefault behaviour adds OK and Cancel buttons. Override for custom button layouts.\ntkinter.filedialog\nâ File selection dialogsÂ¶\nSource code: Lib/tkinter/filedialog.py\nThe tkinter.filedialog\nmodule provides classes and factory functions for\ncreating file/directory selection windows.\nNative Load/Save DialogsÂ¶\nThe following classes and functions provide file dialog windows that combine a native look-and-feel with configuration options to customize behaviour. The following keyword arguments are applicable to the classes and functions listed below:\nparent - the window to place the dialog on top oftitle - the title of the windowinitialdir - the directory that the dialog starts ininitialfile - the file selected upon opening of the dialogfiletypes - a sequence of (label, pattern) tuples, â*â wildcard is alloweddefaultextension - default extension to append to file (save dialogs)multiple - when true, selection of multiple items is allowed\nStatic factory functions\nThe below functions when called create a modal, native look-and-feel dialog,\nwait for the userâs selection, then return the selected value(s) or None\nto the\ncaller.\n- tkinter.filedialog.askopenfile(mode='r', **options)Â¶\n- tkinter.filedialog.askopenfiles(mode='r', **options)Â¶\nThe "}
{"url": "https://docs.python.org/3/library/doctest.html", "title": "", "text": "doctest\nâ Test interactive Python examplesÂ¶\nSource code: Lib/doctest.py\nThe doctest\nmodule searches for pieces of text that look like interactive\nPython sessions, and then executes those sessions to verify that they work\nexactly as shown. There are several common ways to use doctest:\nTo check that a moduleâs docstrings are up-to-date by verifying that all interactive examples still work as documented.\nTo perform regression testing by verifying that interactive examples from a test file or a test object work as expected.\nTo write tutorial documentation for a package, liberally illustrated with input-output examples. Depending on whether the examples or the expository text are emphasized, this has the flavor of âliterate testingâ or âexecutable documentationâ.\nHereâs a complete but small example module:\n\"\"\"\nThis is the \"example\" module.\nThe example module supplies one function, factorial(). For example,\n>>> factorial(5)\n120\n\"\"\"\ndef factorial(n):\n\"\"\"Return the factorial of n, an exact integer >= 0.\n>>> [factorial(n) for n in range(6)]\n[1, 1, 2, 6, 24, 120]\n>>> factorial(30)\n265252859812191058636308480000000\n>>> factorial(-1)\nTraceback (most recent call last):\n...\nValueError: n must be >= 0\nFactorials of floats are OK, but the float must be an exact integer:\n>>> factorial(30.1)\nTraceback (most recent call last):\n...\nValueError: n must be exact integer\n>>> factorial(30.0)\n265252859812191058636308480000000\nIt must also not be ridiculously large:\n>>> factorial(1e100)\nTraceback (most recent call last):\n...\nOverflowError: n too large\n\"\"\"\nimport math\nif not n >= 0:\nraise ValueError(\"n must be >= 0\")\nif math.floor(n) != n:\nraise ValueError(\"n must be exact integer\")\nif n+1 == n: # catch a value like 1e300\nraise OverflowError(\"n too large\")\nresult = 1\nfactor = 2\nwhile factor <= n:\nresult *= factor\nfactor += 1\nreturn result\nif __name__ == \"__main__\":\nimport doctest\ndoctest.testmod()\nIf you run example.py\ndirectly from the command line, doctest\nworks its magic:\n$ python example."}
{"url": "https://docs.python.org/3/library/http.html", "title": "", "text": "http\nâ HTTP modulesÂ¶\nSource code: Lib/http/__init__.py\nhttp\nis a package that collects several modules for working with the\nHyperText Transfer Protocol:\nhttp.client\nis a low-level HTTP protocol client; for high-level URL opening useurllib.request\nhttp.server\ncontains basic HTTP server classes based onsocketserver\nhttp.cookies\nhas utilities for implementing state management with cookieshttp.cookiejar\nprovides persistence of cookies\nThe http\nmodule also defines the following enums that help you work with http related code:\n- class http.HTTPStatusÂ¶\nAdded in version 3.5.\nA subclass of\nenum.IntEnum\nthat defines a set of HTTP status codes, reason phrases and long descriptions written in English.Usage:\n>>> from http import HTTPStatus >>> HTTPStatus.OK HTTPStatus.OK >>> HTTPStatus.OK == 200 True >>> HTTPStatus.OK.value 200 >>> HTTPStatus.OK.phrase 'OK' >>> HTTPStatus.OK.description 'Request fulfilled, document follows' >>> list(HTTPStatus) [HTTPStatus.CONTINUE, HTTPStatus.SWITCHING_PROTOCOLS, ...]\nHTTP status codesÂ¶\nSupported,\nIANA-registered status codes\navailable in http.HTTPStatus\nare:\nCode |\nEnum Name |\nDetails |\n|---|---|---|\n|\n|\nHTTP Semantics RFC 9110, Section 15.2.1 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.2.2 |\n|\n|\nWebDAV RFC 2518, Section 10.1 |\n|\n|\nAn HTTP Status Code for Indicating Hints RFC 8297 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.1 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.2 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.3 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.4 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.5 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.6 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.3.7 |\n|\n|\nWebDAV RFC 4918, Section 11.1 |\n|\n|\nWebDAV Binding Extensions RFC 5842, Section 7.1 (Experimental) |\n|\n|\nDelta Encoding in HTTP RFC 3229, Section 10.4.1 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.4.1 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.4.2 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.4.3 |\n|\n|\nHTTP Semantics RFC 9110, Section 15.4.4 |\n|\n|\nHTT"}
{"url": "https://docs.python.org/3/library/devmode.html", "title": "", "text": "Python Development ModeÂ¶\nAdded in version 3.7.\nThe Python Development Mode introduces additional runtime checks that are too expensive to be enabled by default. It should not be more verbose than the default if the code is correct; new warnings are only emitted when an issue is detected.\nIt can be enabled using the -X dev\ncommand line option or by\nsetting the PYTHONDEVMODE\nenvironment variable to 1\n.\nSee also Python debug build.\nEffects of the Python Development ModeÂ¶\nEnabling the Python Development Mode is similar to the following command, but with additional effects described below:\nPYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler\nEffects of the Python Development Mode:\nAdd\ndefault\nwarning filter. The following warnings are shown:Normally, the above warnings are filtered by the default warning filters.\nIt behaves as if the\n-W default\ncommand line option is used.Use the\n-W error\ncommand line option or set thePYTHONWARNINGS\nenvironment variable toerror\nto treat warnings as errors.Install debug hooks on memory allocators to check for:\nBuffer underflow\nBuffer overflow\nMemory allocator API violation\nUnsafe usage of the GIL\nSee the\nPyMem_SetupDebugHooks()\nC function.It behaves as if the\nPYTHONMALLOC\nenvironment variable is set todebug\n.To enable the Python Development Mode without installing debug hooks on memory allocators, set the\nPYTHONMALLOC\nenvironment variable todefault\n.Call\nfaulthandler.enable()\nat Python startup to install handlers for theSIGSEGV\n,SIGFPE\n,SIGABRT\n,SIGBUS\nandSIGILL\nsignals to dump the Python traceback on a crash.It behaves as if the\n-X faulthandler\ncommand line option is used or if thePYTHONFAULTHANDLER\nenvironment variable is set to1\n.Enable asyncio debug mode. For example,\nasyncio\nchecks for coroutines that were not awaited and logs them.It behaves as if the\nPYTHONASYNCIODEBUG\nenvironment variable is set to1\n.Check the encoding and errors arguments for string encoding and decoding operations. Examples:\nopen()\n,str.en"}
{"url": "https://docs.python.org/3/library/heapq.html", "title": "", "text": "heapq\nâ Heap queue algorithmÂ¶\nSource code: Lib/heapq.py\nThis module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.\nHeaps are binary trees for which every parent node has a value less than or equal to any of its children. We refer to this condition as the heap invariant.\nThis implementation uses arrays for which\nheap[k] <= heap[2*k+1]\nand heap[k] <= heap[2*k+2]\nfor all k, counting\nelements from zero. For the sake of comparison, non-existing elements are\nconsidered to be infinite. The interesting property of a heap is that its\nsmallest element is always the root, heap[0]\n.\nThe API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing. This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) Our pop method returns the smallest item, not the largest (called a âmin heapâ in textbooks; a âmax heapâ is more common in texts because of its suitability for in-place sorting).\nThese two make it possible to view the heap as a regular Python list without\nsurprises: heap[0]\nis the smallest item, and heap.sort()\nmaintains the\nheap invariant!\nTo create a heap, use a list initialized to []\n, or you can transform a\npopulated list into a heap via function heapify()\n.\nThe following functions are provided:\n- heapq.heappush(heap, item)Â¶\nPush the value item onto the heap, maintaining the heap invariant.\n- heapq.heappop(heap)Â¶\nPop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty,\nIndexError\nis raised. To access the smallest item without popping it, useheap[0]\n.\n- heapq.heappushpop(heap, item)Â¶\nPush item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than\nheappush()\nfollowed by a separate call toheappop()\n.\n- heapq.heapify(x)Â¶\nTransform list x into a heap, in-place, in line"}
{"url": "https://docs.python.org/3/library/unittest.mock.html", "title": "", "text": "unittest.mock\nâ mock object libraryÂ¶\nAdded in version 3.3.\nSource code: Lib/unittest/mock.py\nunittest.mock\nis a library for testing in Python. It allows you to\nreplace parts of your system under test with mock objects and make assertions\nabout how they have been used.\nunittest.mock\nprovides a core Mock\nclass removing the need to\ncreate a host of stubs throughout your test suite. After performing an\naction, you can make assertions about which methods / attributes were used\nand arguments they were called with. You can also specify return values and\nset needed attributes in the normal way.\nAdditionally, mock provides a patch()\ndecorator that handles patching\nmodule and class level attributes within the scope of a test, along with\nsentinel\nfor creating unique objects. See the quick guide for\nsome examples of how to use Mock\n, MagicMock\nand\npatch()\n.\nMock is designed for use with unittest\nand\nis based on the âaction -> assertionâ pattern instead of ârecord -> replayâ\nused by many mocking frameworks.\nThere is a backport of unittest.mock\nfor earlier versions of Python,\navailable as mock on PyPI.\nQuick GuideÂ¶\nMock\nand MagicMock\nobjects create all attributes and\nmethods as you access them and store details of how they have been used. You\ncan configure them, to specify return values or limit what attributes are\navailable, and then make assertions about how they have been used:\n>>> from unittest.mock import MagicMock\n>>> thing = ProductionClass()\n>>> thing.method = MagicMock(return_value=3)\n>>> thing.method(3, 4, 5, key='value')\n3\n>>> thing.method.assert_called_with(3, 4, 5, key='value')\nside_effect\nallows you to perform side effects, including raising an\nexception when a mock is called:\n>>> from unittest.mock import Mock\n>>> mock = Mock(side_effect=KeyError('foo'))\n>>> mock()\nTraceback (most recent call last):\n...\nKeyError: 'foo'\n>>> values = {'a': 1, 'b': 2, 'c': 3}\n>>> def side_effect(arg):\n... return values[arg]\n...\n>>> mock.side_effect = side_effect\n>>> mock('a'), mock("}
{"url": "https://docs.python.org/3/library/quopri.html", "title": "", "text": "quopri\nâ Encode and decode MIME quoted-printable dataÂ¶\nSource code: Lib/quopri.py\nThis module performs quoted-printable transport encoding and decoding, as\ndefined in RFC 1521: âMIME (Multipurpose Internet Mail Extensions) Part One:\nMechanisms for Specifying and Describing the Format of Internet Message Bodiesâ.\nThe quoted-printable encoding is designed for data where there are relatively\nfew nonprintable characters; the base64 encoding scheme available via the\nbase64\nmodule is more compact if there are many such characters, as when\nsending a graphics file.\n- quopri.decode(input, output, header=False)Â¶\nDecode the contents of the input file and write the resulting decoded binary data to the output file. input and output must be binary file objects. If the optional argument header is present and true, underscore will be decoded as space. This is used to decode âQâ-encoded headers as described in RFC 1522: âMIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Textâ.\n- quopri.encode(input, output, quotetabs, header=False)Â¶\nEncode the contents of the input file and write the resulting quoted-printable data to the output file. input and output must be binary file objects. quotetabs, a non-optional flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded. Note that spaces and tabs appearing at the end of lines are always encoded, as per RFC 1521. header is a flag which controls if spaces are encoded as underscores as per RFC 1522.\n- quopri.decodestring(s, header=False)Â¶\nLike\ndecode()\n, except that it accepts a sourcebytes\nand returns the corresponding decodedbytes\n.\n- quopri.encodestring(s, quotetabs=False, header=False)Â¶\nLike\nencode()\n, except that it accepts a sourcebytes\nand returns the corresponding encodedbytes\n. By default, it sends aFalse\nvalue to quotetabs parameter of theencode()\nfunction.\nSee also\n- Module\nbase64\nEncode and "}
{"url": "https://docs.python.org/3/library/test.html", "title": "", "text": "test\nâ Regression tests package for PythonÂ¶\nNote\nThe test\npackage is meant for internal use by Python only. It is\ndocumented for the benefit of the core developers of Python. Any use of\nthis package outside of Pythonâs standard library is discouraged as code\nmentioned here can change or be removed without notice between releases of\nPython.\nThe test\npackage contains all regression tests for Python as well as the\nmodules test.support\nand test.regrtest\n.\ntest.support\nis used to enhance your tests while\ntest.regrtest\ndrives the testing suite.\nEach module in the test\npackage whose name starts with test_\nis a\ntesting suite for a specific module or feature. All new tests should be written\nusing the unittest\nor doctest\nmodule. Some older tests are\nwritten using a âtraditionalâ testing style that compares output printed to\nsys.stdout\n; this style of test is considered deprecated.\nSee also\nWriting Unit Tests for the test\npackageÂ¶\nIt is preferred that tests that use the unittest\nmodule follow a few\nguidelines. One is to name the test module by starting it with test_\nand end\nit with the name of the module being tested. The test methods in the test module\nshould start with test_\nand end with a description of what the method is\ntesting. This is needed so that the methods are recognized by the test driver as\ntest methods. Also, no documentation string for the method should be included. A\ncomment (such as # Tests function returns only True or False\n) should be used\nto provide documentation for test methods. This is done because documentation\nstrings get printed out if they exist and thus what test is being run is not\nstated.\nA basic boilerplate is often used:\nimport unittest\nfrom test import support\nclass MyTestCase1(unittest.TestCase):\n# Only use setUp() and tearDown() if necessary\ndef setUp(self):\n... code to execute in preparation for tests ...\ndef tearDown(self):\n... code to execute to clean up after tests ...\ndef test_feature_one(self):\n# Test feature one.\n... testing code ."}
{"url": "https://docs.python.org/3/library/sys.monitoring.html", "title": "", "text": "sys.monitoring\nâ Execution event monitoringÂ¶\nAdded in version 3.12.\nNote\nsys.monitoring\nis a namespace within the sys\nmodule,\nnot an independent module, so there is no need to\nimport sys.monitoring\n, simply import sys\nand then use\nsys.monitoring\n.\nThis namespace provides access to the functions and constants necessary to activate and control event monitoring.\nAs programs execute, events occur that might be of interest to tools that\nmonitor execution. The sys.monitoring\nnamespace provides means to\nreceive callbacks when events of interest occur.\nThe monitoring API consists of three components:\nTool identifiersÂ¶\nA tool identifier is an integer and the associated name. Tool identifiers are used to discourage tools from interfering with each other and to allow multiple tools to operate at the same time. Currently tools are completely independent and cannot be used to monitor each other. This restriction may be lifted in the future.\nBefore registering or activating events, a tool should choose an identifier. Identifiers are integers in the range 0 to 5 inclusive.\nRegistering and using toolsÂ¶\n- sys.monitoring.use_tool_id(tool_id: int, name: str, /) None Â¶\nMust be called before tool_id can be used. tool_id must be in the range 0 to 5 inclusive. Raises a\nValueError\nif tool_id is in use.\n- sys.monitoring.free_tool_id(tool_id: int, /) None Â¶\nShould be called once a tool no longer requires tool_id.\nNote\nfree_tool_id()\nwill not disable global or local events associated\nwith tool_id, nor will it unregister any callback functions. This\nfunction is only intended to be used to notify the VM that the\nparticular tool_id is no longer in use.\n- sys.monitoring.get_tool(tool_id: int, /) str | None Â¶\nReturns the name of the tool if tool_id is in use, otherwise it returns\nNone\n. tool_id must be in the range 0 to 5 inclusive.\nAll IDs are treated the same by the VM with regard to events, but the following IDs are pre-defined to make co-operation of tools easier:\nsys.monitoring.DEBUGGER"}
{"url": "https://docs.python.org/3/library/socket.html", "title": "", "text": "socket\nâ Low-level networking interfaceÂ¶\nSource code: Lib/socket.py\nThis module provides access to the BSD socket interface. It is available on all modern Unix systems, Windows, MacOS, and probably additional platforms.\nNote\nSome behavior may be platform dependent, since calls are made to the operating system socket APIs.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe Python interface is a straightforward transliteration of the Unix system\ncall and library interface for sockets to Pythonâs object-oriented style: the\nsocket()\nfunction returns a socket object whose methods implement\nthe various socket system calls. Parameter types are somewhat higher-level than\nin the C interface: as with read()\nand write()\noperations on Python\nfiles, buffer allocation on receive operations is automatic, and buffer length\nis implicit on send operations.\nSee also\n- Module\nsocketserver\nClasses that simplify writing network servers.\n- Module\nssl\nA TLS/SSL wrapper for socket objects.\nSocket familiesÂ¶\nDepending on the system and the build options, various socket families are supported by this module.\nThe address format required by a particular socket object is automatically selected based on the address family specified when the socket object was created. Socket addresses are represented as follows:\nThe address of an\nAF_UNIX\nsocket bound to a file system node is represented as a string, using the file system encoding and the'surrogateescape'\nerror handler (see PEP 383). An address in Linuxâs abstract namespace is returned as a bytes-like object with an initial null byte; note that sockets in this namespace can communicate with normal file system sockets, so programs intended to run on Linux may need to deal with both types of address. A string or bytes-like object can be used for either type of address when passing it as an argument.Changed in version 3.3: Previously,\nAF_UNIX\nsocket paths were assu"}
{"url": "https://docs.python.org/3/library/decimal.html", "title": "", "text": "decimal\nâ Decimal fixed-point and floating-point arithmeticÂ¶\nSource code: Lib/decimal.py\nThe decimal\nmodule provides support for fast correctly rounded\ndecimal floating-point arithmetic. It offers several advantages over the\nfloat\ndatatype:\nDecimal âis based on a floating-point model which was designed with people in mind, and necessarily has a paramount guiding principle â computers must provide an arithmetic that works in the same way as the arithmetic that people learn at school.â â excerpt from the decimal arithmetic specification.\nDecimal numbers can be represented exactly. In contrast, numbers like\n1.1\nand2.2\ndo not have exact representations in binary floating point. End users typically would not expect1.1 + 2.2\nto display as3.3000000000000003\nas it does with binary floating point.The exactness carries over into arithmetic. In decimal floating point,\n0.1 + 0.1 + 0.1 - 0.3\nis exactly equal to zero. In binary floating point, the result is5.5511151231257827e-017\n. While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal is preferred in accounting applications which have strict equality invariants.The decimal module incorporates a notion of significant places so that\n1.30 + 1.20\nis2.50\n. The trailing zero is kept to indicate significance. This is the customary presentation for monetary applications. For multiplication, the âschoolbookâ approach uses all the figures in the multiplicands. For instance,1.3 * 1.2\ngives1.56\nwhile1.30 * 1.20\ngives1.5600\n.Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:\n>>> from decimal import * >>> getcontext().prec = 6 >>> Decimal(1) / Decimal(7) Decimal('0.142857') >>> getcontext().prec = 28 >>> Decimal(1) / Decimal(7) Decimal('0.1428571428571428571428571429')\nBoth binary and decimal floating point are implemented in terms of published stand"}
{"url": "https://docs.python.org/3/library/fnmatch.html", "title": "", "text": "fnmatch\nâ Unix filename pattern matchingÂ¶\nSource code: Lib/fnmatch.py\nThis module provides support for Unix shell-style wildcards, which are not the\nsame as regular expressions (which are documented in the re\nmodule). The\nspecial characters used in shell-style wildcards are:\nPattern |\nMeaning |\n|---|---|\n|\nmatches everything |\n|\nmatches any single character |\n|\nmatches any character in seq |\n|\nmatches any character not in seq |\nFor a literal match, wrap the meta-characters in brackets.\nFor example, '[?]'\nmatches the character '?'\n.\nNote that the filename separator ('/'\non Unix) is not special to this\nmodule. See module glob\nfor pathname expansion (glob\nuses\nfilter()\nto match pathname segments). Similarly, filenames starting with\na period are not special for this module, and are matched by the *\nand ?\npatterns.\nUnless stated otherwise, âfilename stringâ and âpattern stringâ either refer to\nstr\nor ISO-8859-1\nencoded bytes\nobjects. Note that the\nfunctions documented below do not allow to mix a bytes\npattern with\na str\nfilename, and vice-versa.\nFinally, note that functools.lru_cache()\nwith a maxsize of 32768\nis used to cache the (typed) compiled regex patterns in the following\nfunctions: fnmatch()\n, fnmatchcase()\n, filter()\n.\n- fnmatch.fnmatch(name, pat)Â¶\nTest whether the filename string name matches the pattern string pat, returning\nTrue\norFalse\n. Both parameters are case-normalized usingos.path.normcase()\n.fnmatchcase()\ncan be used to perform a case-sensitive comparison, regardless of whether thatâs standard for the operating system.This example will print all file names in the current directory with the extension\n.txt\n:import fnmatch import os for file in os.listdir('.'): if fnmatch.fnmatch(file, '*.txt'): print(file)\n- fnmatch.fnmatchcase(name, pat)Â¶\nTest whether the filename string name matches the pattern string pat, returning\nTrue\norFalse\n; the comparison is case-sensitive and does not applyos.path.normcase()\n.\n- fnmatch.filter(names, pat)Â¶\nConstruct a list f"}
{"url": "https://docs.python.org/3/library/collections.abc.html", "title": "", "text": "collections.abc\nâ Abstract Base Classes for ContainersÂ¶\nAdded in version 3.3: Formerly, this module was part of the collections\nmodule.\nSource code: Lib/_collections_abc.py\nThis module provides abstract base classes that can be used to test whether a class provides a particular interface; for example, whether it is hashable or whether it is a mapping.\nAn issubclass()\nor isinstance()\ntest for an interface works in one\nof three ways.\nA newly written class can inherit directly from one of the abstract base classes. The class must supply the required abstract methods. The remaining mixin methods come from inheritance and can be overridden if desired. Other methods may be added as needed:\nclass C(Sequence): # Direct inheritance def __init__(self): ... # Extra method not required by the ABC def __getitem__(self, index): ... # Required abstract method def __len__(self): ... # Required abstract method def count(self, value): ... # Optionally override a mixin method\n>>> issubclass(C, Sequence) True >>> isinstance(C(), Sequence) True\nExisting classes and built-in classes can be registered as âvirtual subclassesâ of the ABCs. Those classes should define the full API including all of the abstract methods and all of the mixin methods. This lets users rely on\nissubclass()\norisinstance()\ntests to determine whether the full interface is supported. The exception to this rule is for methods that are automatically inferred from the rest of the API:class D: # No inheritance def __init__(self): ... # Extra method not required by the ABC def __getitem__(self, index): ... # Abstract method def __len__(self): ... # Abstract method def count(self, value): ... # Mixin method def index(self, value): ... # Mixin method Sequence.register(D) # Register instead of inherit\n>>> issubclass(D, Sequence) True >>> isinstance(D(), Sequence) True\nIn this example, class\nD\ndoes not need to define__contains__\n,__iter__\n, and__reversed__\nbecause the in-operator, the iteration logic, and thereversed()\nfuncti"}
{"url": "https://docs.python.org/3/library/filecmp.html", "title": "", "text": "filecmp\nâ File and Directory ComparisonsÂ¶\nSource code: Lib/filecmp.py\nThe filecmp\nmodule defines functions to compare files and directories,\nwith various optional time/correctness trade-offs. For comparing files,\nsee also the difflib\nmodule.\nThe filecmp\nmodule defines the following functions:\n- filecmp.cmp(f1, f2, shallow=True)Â¶\nCompare the files named f1 and f2, returning\nTrue\nif they seem equal,False\notherwise.If shallow is true and the\nos.stat()\nsignatures (file type, size, and modification time) of both files are identical, the files are taken to be equal.Otherwise, the files are treated as different if their sizes or contents differ.\nNote that no external programs are called from this function, giving it portability and efficiency.\nThis function uses a cache for past comparisons and the results, with cache entries invalidated if the\nos.stat()\ninformation for the file changes. The entire cache may be cleared usingclear_cache()\n.\n- filecmp.cmpfiles(dir1, dir2, common, shallow=True)Â¶\nCompare the files in the two directories dir1 and dir2 whose names are given by common.\nReturns three lists of file names: match, mismatch, errors. match contains the list of files that match, mismatch contains the names of those that donât, and errors lists the names of files which could not be compared. Files are listed in errors if they donât exist in one of the directories, the user lacks permission to read them or if the comparison could not be done for some other reason.\nThe shallow parameter has the same meaning and default value as for\nfilecmp.cmp()\n.For example,\ncmpfiles('a', 'b', ['c', 'd/e'])\nwill comparea/c\nwithb/c\nanda/d/e\nwithb/d/e\n.'c'\nand'd/e'\nwill each be in one of the three returned lists.\n- filecmp.clear_cache()Â¶\nClear the filecmp cache. This may be useful if a file is compared so quickly after it is modified that it is within the mtime resolution of the underlying filesystem.\nAdded in version 3.4.\nThe dircmp\nclassÂ¶\n- class filecmp.dircmp(a, b, ignore=None, hid"}
{"url": "https://docs.python.org/3/library/token.html", "title": "", "text": "token\nâ Constants used with Python parse treesÂ¶\nSource code: Lib/token.py\nThis module provides constants which represent the numeric values of leaf nodes\nof the parse tree (terminal tokens). Refer to the file Grammar/Tokens\nin the Python distribution for the definitions of the names in the context of\nthe language grammar. The specific numeric values which the names map to may\nchange between Python versions.\nThe module also provides a mapping from numeric codes to names and some functions. The functions mirror definitions in the Python C header files.\nNote that a tokenâs value may depend on tokenizer options. For example, a\n\"+\"\ntoken may be reported as either PLUS\nor OP\n, or\na \"match\"\ntoken may be either NAME\nor SOFT_KEYWORD\n.\n- token.tok_nameÂ¶\nDictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.\n- token.ISTERMINAL(x)Â¶\nReturn\nTrue\nfor terminal token values.\n- token.ISNONTERMINAL(x)Â¶\nReturn\nTrue\nfor non-terminal token values.\n- token.ISEOF(x)Â¶\nReturn\nTrue\nif x is the marker indicating the end of input.\nThe token constants are:\n- token.NAMEÂ¶\nToken value that indicates an identifier. Note that keywords are also initially tokenized as\nNAME\ntokens.\n- token.NUMBERÂ¶\nToken value that indicates a numeric literal\n- token.STRINGÂ¶\nToken value that indicates a string or byte literal, excluding formatted string literals. The token string is not interpreted: it includes the surrounding quotation marks and the prefix (if given); backslashes are included literally, without processing escape sequences.\n- token.OPÂ¶\nA generic token value that indicates an operator or delimiter.\nCPython implementation detail: This value is only reported by the\ntokenize\nmodule. Internally, the tokenizer uses exact token types instead.\n- token.COMMENTÂ¶\nToken value used to indicate a comment. The parser ignores\nCOMMENT\ntokens.\n- token.NEWLINEÂ¶\nToken value that indicates the e"}
{"url": "https://docs.python.org/3/library/constants.html", "title": "", "text": "Built-in ConstantsÂ¶\nA small number of constants live in the built-in namespace. They are:\n- FalseÂ¶\nThe false value of the\nbool\ntype. Assignments toFalse\nare illegal and raise aSyntaxError\n.\n- TrueÂ¶\nThe true value of the\nbool\ntype. Assignments toTrue\nare illegal and raise aSyntaxError\n.\n- NoneÂ¶\nAn object frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to\nNone\nare illegal and raise aSyntaxError\n.None\nis the sole instance of theNoneType\ntype.\n- NotImplementedÂ¶\nA special value which should be returned by the binary special methods (e.g.\n__eq__()\n,__lt__()\n,__add__()\n,__rsub__()\n, etc.) to indicate that the operation is not implemented with respect to the other type; may be returned by the in-place binary special methods (e.g.__imul__()\n,__iand__()\n, etc.) for the same purpose. It should not be evaluated in a boolean context.NotImplemented\nis the sole instance of thetypes.NotImplementedType\ntype.Note\nWhen a binary (or in-place) method returns\nNotImplemented\nthe interpreter will try the reflected operation on the other type (or some other fallback, depending on the operator). If all attempts returnNotImplemented\n, the interpreter will raise an appropriate exception. Incorrectly returningNotImplemented\nwill result in a misleading error message or theNotImplemented\nvalue being returned to Python code.See Implementing the arithmetic operations for examples.\nCaution\nNotImplemented\nandNotImplementedError\nare not interchangeable. This constant should only be used as described above; seeNotImplementedError\nfor details on correct usage of the exception.Changed in version 3.9: Evaluating\nNotImplemented\nin a boolean context is deprecated. While it currently evaluates as true, it will emit aDeprecationWarning\n. It will raise aTypeError\nin a future version of Python.\n- EllipsisÂ¶\nThe same as the ellipsis literal â\n...\nâ, an object frequently used to indicate that something is omitted. Assignment toEllipsis\n"}
{"url": "https://docs.python.org/3/library/queue.html", "title": "", "text": "queue\nâ A synchronized queue classÂ¶\nSource code: Lib/queue.py\nThe queue\nmodule implements multi-producer, multi-consumer queues.\nIt is especially useful in threaded programming when information must be\nexchanged safely between multiple threads. The Queue\nclass in this\nmodule implements all the required locking semantics.\nThe module implements three types of queue, which differ only in the order in\nwhich the entries are retrieved. In a FIFO\nqueue, the first tasks added are the first retrieved. In a\nLIFO queue, the most recently added entry is\nthe first retrieved (operating like a stack). With a priority queue,\nthe entries are kept sorted (using the heapq\nmodule) and the\nlowest valued entry is retrieved first.\nInternally, those three types of queues use locks to temporarily block competing threads; however, they are not designed to handle reentrancy within a thread.\nIn addition, the module implements a âsimpleâ\nFIFO queue type, SimpleQueue\n, whose\nspecific implementation provides additional guarantees\nin exchange for the smaller functionality.\nThe queue\nmodule defines the following classes and exceptions:\n- class queue.Queue(maxsize=0)Â¶\nConstructor for a FIFO queue. maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize is less than or equal to zero, the queue size is infinite.\n- class queue.LifoQueue(maxsize=0)Â¶\nConstructor for a LIFO queue. maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize is less than or equal to zero, the queue size is infinite.\n- class queue.PriorityQueue(maxsize=0)Â¶\nConstructor for a priority queue. maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this siz"}
{"url": "https://docs.python.org/3/library/dbm.html", "title": "", "text": "dbm\nâ Interfaces to Unix âdatabasesâÂ¶\nSource code: Lib/dbm/__init__.py\ndbm\nis a generic interface to variants of the DBM database:\nIf none of these modules are installed, the\nslow-but-simple implementation in module dbm.dumb\nwill be used. There\nis a third party interface to\nthe Oracle Berkeley DB.\n- exception dbm.errorÂ¶\nA tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named\ndbm.error\nas the first item â the latter is used whendbm.error\nis raised.\n- dbm.whichdb(filename)Â¶\nThis function attempts to guess which of the several simple database modules available â\ndbm.sqlite3\n,dbm.gnu\n,dbm.ndbm\n, ordbm.dumb\nâ should be used to open a given file.Return one of the following values:\nNone\nif the file canât be opened because itâs unreadable or doesnât existthe empty string (\n''\n) if the fileâs format canât be guesseda string containing the required module name, such as\n'dbm.ndbm'\nor'dbm.gnu'\nChanged in version 3.11: filename accepts a path-like object.\n- dbm.open(file, flag='r', mode=0o666)Â¶\nOpen a database and return the corresponding database object.\n- Parameters:\nfile (path-like object) â\nThe database file to open.\nIf the database file already exists, the\nwhichdb()\nfunction is used to determine its type and the appropriate module is used; if it does not exist, the first submodule listed above that can be imported is used.flag (str) â\n'r'\n(default): Open existing database for reading only.'w'\n: Open existing database for reading and writing.'c'\n: Open database for reading and writing, creating it if it doesnât exist.'n'\n: Always create a new, empty database, open for reading and writing.\nmode (int) â The Unix file access mode of the file (default: octal\n0o666\n), used only when the database has to be created.\nChanged in version 3.11: file accepts a path-like object.\nThe object returned by open()\nsupports the basic\nfunctionality of mutable mappings;\nkeys and their corresponding values can be stored, retriev"}
{"url": "https://docs.python.org/3/library/uuid.html", "title": "", "text": "uuid\nâ UUID objects according to RFC 4122Â¶\nSource code: Lib/uuid.py\nThis module provides immutable UUID\nobjects (the UUID\nclass)\nand the functions uuid1()\n, uuid3()\n, uuid4()\n, uuid5()\nfor\ngenerating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.\nIf all you want is a unique ID, you should probably call uuid1()\nor\nuuid4()\n. Note that uuid1()\nmay compromise privacy since it creates\na UUID containing the computerâs network address. uuid4()\ncreates a\nrandom UUID.\nDepending on support from the underlying platform, uuid1()\nmay or may\nnot return a âsafeâ UUID. A safe UUID is one which is generated using\nsynchronization methods that ensure no two processes can obtain the same\nUUID. All instances of UUID\nhave an is_safe\nattribute\nwhich relays any information about the UUIDâs safety, using this enumeration:\n- class uuid.SafeUUIDÂ¶\nAdded in version 3.7.\n- safeÂ¶\nThe UUID was generated by the platform in a multiprocessing-safe way.\n- unsafeÂ¶\nThe UUID was not generated in a multiprocessing-safe way.\n- unknownÂ¶\nThe platform does not provide information on whether the UUID was generated safely or not.\n- class uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=SafeUUID.unknown)Â¶\nCreate a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes in big-endian order as the bytes argument, a string of 16 bytes in little-endian order as the bytes_le argument, a tuple of six integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version, 8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the fields argument, or a single 128-bit integer as the int argument. When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional. For example, these expressions all yield the same UUID:\nUUID('{12345678-1234-5678-1234-567812345678}') UUID('12345678123456781234567812345678') UUID('urn:uuid:12345678-1234-5678-1234-567812345678') UUID(bytes=b'\\x12\\x34\\x56\\x78'*4) UUID(bytes_le=b'\\x78\\"}
{"url": "https://docs.python.org/3/library/pty.html", "title": "", "text": "pty\nâ Pseudo-terminal utilitiesÂ¶\nSource code: Lib/pty.py\nThe pty\nmodule defines operations for handling the pseudo-terminal\nconcept: starting another process and being able to write to and read from its\ncontrolling terminal programmatically.\nAvailability: Unix.\nPseudo-terminal handling is highly platform dependent. This code is mainly tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX platforms but itâs not been thoroughly tested).\nThe pty\nmodule defines the following functions:\n- pty.fork()Â¶\nFork. Connect the childâs controlling terminal to a pseudo-terminal. Return value is\n(pid, fd)\n. Note that the child gets pid 0, and the fd is invalid. The parentâs return value is the pid of the child, and fd is a file descriptor connected to the childâs controlling terminal (and also to the childâs standard input and output).Warning\nOn macOS the use of this function is unsafe when mixed with using higher-level system APIs, and that includes using\nurllib.request\n.\n- pty.openpty()Â¶\nOpen a new pseudo-terminal pair, using\nos.openpty()\nif possible, or emulation code for generic Unix systems. Return a pair of file descriptors(master, slave)\n, for the master and the slave end, respectively.\n- pty.spawn(argv[, master_read[, stdin_read]])Â¶\nSpawn a process, and connect its controlling terminal with the current processâs standard io. This is often used to baffle programs which insist on reading from the controlling terminal. It is expected that the process spawned behind the pty will eventually terminate, and when it does spawn will return.\nA loop copies STDIN of the current process to the child and data received from the child to STDOUT of the current process. It is not signaled to the child if STDIN of the current process closes down.\nThe functions master_read and stdin_read are passed a file descriptor which they should read from, and they should always return a byte string. In order to force spawn to return before the child process exits an empty byte arr"}
{"url": "https://docs.python.org/3/library/modules.html", "title": "", "text": "Importing ModulesÂ¶\nThe modules described in this chapter provide new ways to import other Python modules and hooks for customizing the import process.\nThe full list of modules described in this chapter is:\nzipimport\nâ Import modules from Zip archivespkgutil\nâ Package extension utilitymodulefinder\nâ Find modules used by a scriptrunpy\nâ Locating and executing Python modulesimportlib\nâ The implementation ofimport\nimportlib.resources\nâ Package resource reading, opening and accessimportlib.resources.abc\nâ Abstract base classes for resourcesimportlib.metadata\nâ Accessing package metadata- The initialization of the\nsys.path\nmodule search path"}
{"url": "https://docs.python.org/3/library/exceptions.html", "title": "", "text": "Built-in ExceptionsÂ¶\nIn Python, all exceptions must be instances of a class that derives from\nBaseException\n. In a try\nstatement with an except\nclause that mentions a particular class, that clause also handles any exception\nclasses derived from that class (but not exception classes from which it is\nderived). Two exception classes that are not related via subclassing are never\nequivalent, even if they have the same name.\nThe built-in exceptions listed in this chapter can be generated by the interpreter or built-in functions. Except where mentioned, they have an âassociated valueâ indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and a string explaining the code). The associated value is usually passed as arguments to the exception classâs constructor.\nUser code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition âjust likeâ the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.\nThe built-in exception classes can be subclassed to define new exceptions;\nprogrammers are encouraged to derive new exceptions from the Exception\nclass or one of its subclasses, and not from BaseException\n. More\ninformation on defining exceptions is available in the Python Tutorial under\nUser-defined Exceptions.\nException contextÂ¶\nThree attributes on exception objects provide information about the context in which the exception was raised:\n- BaseException.__context__Â¶\n- BaseException.__cause__Â¶\n- BaseException.__suppress_context__Â¶\nWhen raising a new exception while another exception is already being handled, the new exceptionâs\n__context__\nattribute is automatically set to the handled exception. An exception may be handled when anexcept\norfinally\nclause, or awith\nstatement, is used.This implicit exception context can be supplemented with an explicit caus"}
{"url": "https://docs.python.org/3/library/tkinter.scrolledtext.html", "title": "", "text": "tkinter.scrolledtext\nâ Scrolled Text WidgetÂ¶\nSource code: Lib/tkinter/scrolledtext.py\nThe tkinter.scrolledtext\nmodule provides a class of the same name which\nimplements a basic text widget which has a vertical scroll bar configured to do\nthe âright thing.â Using the ScrolledText\nclass is a lot easier than\nsetting up a text widget and scroll bar directly.\nThe text widget and scrollbar are packed together in a Frame\n, and the\nmethods of the Grid\nand Pack\ngeometry managers are acquired\nfrom the Frame\nobject. This allows the ScrolledText\nwidget to\nbe used directly to achieve most normal geometry management behavior.\nShould more specific control be necessary, the following attributes are available:"}
{"url": "https://docs.python.org/3/library/io.html", "title": "", "text": "io\nâ Core tools for working with streamsÂ¶\nSource code: Lib/io.py\nOverviewÂ¶\nThe io\nmodule provides Pythonâs main facilities for dealing with various\ntypes of I/O. There are three main types of I/O: text I/O, binary I/O\nand raw I/O. These are generic categories, and various backing stores can\nbe used for each of them. A concrete object belonging to any of these\ncategories is called a file object. Other common terms are stream\nand file-like object.\nIndependent of its category, each concrete stream object will also have various capabilities: it can be read-only, write-only, or read-write. It can also allow arbitrary random access (seeking forwards or backwards to any location), or only sequential access (for example in the case of a socket or pipe).\nAll streams are careful about the type of data you give to them. For example\ngiving a str\nobject to the write()\nmethod of a binary stream\nwill raise a TypeError\n. So will giving a bytes\nobject to the\nwrite()\nmethod of a text stream.\nChanged in version 3.3: Operations that used to raise IOError\nnow raise OSError\n, since\nIOError\nis now an alias of OSError\n.\nText I/OÂ¶\nText I/O expects and produces str\nobjects. This means that whenever\nthe backing store is natively made of bytes (such as in the case of a file),\nencoding and decoding of data is made transparently as well as optional\ntranslation of platform-specific newline characters.\nThe easiest way to create a text stream is with open()\n, optionally\nspecifying an encoding:\nf = open(\"myfile.txt\", \"r\", encoding=\"utf-8\")\nIn-memory text streams are also available as StringIO\nobjects:\nf = io.StringIO(\"some initial text data\")\nThe text stream API is described in detail in the documentation of\nTextIOBase\n.\nBinary I/OÂ¶\nBinary I/O (also called buffered I/O) expects\nbytes-like objects and produces bytes\nobjects. No encoding, decoding, or newline translation is performed. This\ncategory of streams can be used for all kinds of non-text data, and also when\nmanual control over the handlin"}
{"url": "https://docs.python.org/3/library/fileinput.html", "title": "", "text": "fileinput\nâ Iterate over lines from multiple input streamsÂ¶\nSource code: Lib/fileinput.py\nThis module implements a helper class and functions to quickly write a\nloop over standard input or a list of files. If you just want to read or\nwrite one file see open()\n.\nThe typical use is:\nimport fileinput\nfor line in fileinput.input(encoding=\"utf-8\"):\nprocess(line)\nThis iterates over the lines of all files listed in sys.argv[1:]\n, defaulting\nto sys.stdin\nif the list is empty. If a filename is '-'\n, it is also\nreplaced by sys.stdin\nand the optional arguments mode and openhook\nare ignored. To specify an alternative list of filenames, pass it as the\nfirst argument to input()\n. A single file name is also allowed.\nAll files are opened in text mode by default, but you can override this by\nspecifying the mode parameter in the call to input()\nor\nFileInput\n. If an I/O error occurs during opening or reading a file,\nOSError\nis raised.\nIf sys.stdin\nis used more than once, the second and further use will return\nno lines, except perhaps for interactive use, or if it has been explicitly reset\n(e.g. using sys.stdin.seek(0)\n).\nEmpty files are opened and immediately closed; the only time their presence in the list of filenames is noticeable at all is when the last file opened is empty.\nLines are returned with any newlines intact, which means that the last line in a file may not have one.\nYou can control how files are opened by providing an opening hook via the\nopenhook parameter to fileinput.input()\nor FileInput()\n. The\nhook must be a function that takes two arguments, filename and mode, and\nreturns an accordingly opened file-like object. If encoding and/or errors\nare specified, they will be passed to the hook as additional keyword arguments.\nThis module provides a hook_compressed()\nto support compressed files.\nThe following function is the primary interface of this module:\n- fileinput.input(files=None, inplace=False, backup='', *, mode='r', openhook=None, encoding=None, errors=None)Â¶\nCrea"}
{"url": "https://docs.python.org/3/library/multiprocessing.shared_memory.html", "title": "", "text": "multiprocessing.shared_memory\nâ Shared memory for direct access across processesÂ¶\nSource code: Lib/multiprocessing/shared_memory.py\nAdded in version 3.8.\nThis module provides a class, SharedMemory\n, for the allocation\nand management of shared memory to be accessed by one or more processes\non a multicore or symmetric multiprocessor (SMP) machine. To assist with\nthe life-cycle management of shared memory especially across distinct\nprocesses, a BaseManager\nsubclass,\nSharedMemoryManager\n, is also provided in the\nmultiprocessing.managers\nmodule.\nIn this module, shared memory refers to âPOSIX styleâ shared memory blocks (though is not necessarily implemented explicitly as such) and does not refer to âdistributed shared memoryâ. This style of shared memory permits distinct processes to potentially read and write to a common (or shared) region of volatile memory. Processes are conventionally limited to only have access to their own process memory space but shared memory permits the sharing of data between processes, avoiding the need to instead send messages between processes containing that data. Sharing data directly via memory can provide significant performance benefits compared to sharing data via disk or socket or other communications requiring the serialization/deserialization and copying of data.\n- class multiprocessing.shared_memory.SharedMemory(name=None, create=False, size=0, *, track=True)Â¶\nCreate an instance of the\nSharedMemory\nclass for either creating a new shared memory block or attaching to an existing shared memory block. Each shared memory block is assigned a unique name. In this way, one process can create a shared memory block with a particular name and a different process can attach to that same shared memory block using that same name.As a resource for sharing data across processes, shared memory blocks may outlive the original process that created them. When one process no longer needs access to a shared memory block that might still be needed by o"}
{"url": "https://docs.python.org/3/library/python.html", "title": "", "text": "Python Runtime ServicesÂ¶\nThe modules described in this chapter provide a wide range of services related to the Python interpreter and its interaction with its environment. Hereâs an overview:\nsys\nâ System-specific parameters and functionssys.monitoring\nâ Execution event monitoringsysconfig\nâ Provide access to Pythonâs configuration informationbuiltins\nâ Built-in objects__main__\nâ Top-level code environmentwarnings\nâ Warning controldataclasses\nâ Data Classescontextlib\nâ Utilities forwith\n-statement contextsabc\nâ Abstract Base Classesatexit\nâ Exit handlerstraceback\nâ Print or retrieve a stack traceback__future__\nâ Future statement definitionsgc\nâ Garbage Collector interfaceinspect\nâ Inspect live objectssite\nâ Site-specific configuration hook"}
{"url": "https://docs.python.org/3/library/venv.html", "title": "", "text": "venv\nâ Creation of virtual environmentsÂ¶\nAdded in version 3.3.\nSource code: Lib/venv/\nThe venv\nmodule supports creating lightweight âvirtual environmentsâ,\neach with their own independent set of Python packages installed in\ntheir site\ndirectories.\nA virtual environment is created on top of an existing\nPython installation, known as the virtual environmentâs âbaseâ Python, and by\ndefault is isolated from the packages in the base environment, so\nthat only those explicitly installed in the virtual environment are available.\nWhen used from within a virtual environment, common installation tools such as pip will install Python packages into a virtual environment without needing to be told to do so explicitly.\nA virtual environment is (amongst other things):\nUsed to contain a specific Python interpreter and software libraries and binaries which are needed to support a project (library or application). These are by default isolated from software in other virtual environments and Python interpreters and libraries installed in the operating system.\nContained in a directory, conventionally named\n.venv\norvenv\nin the project directory, or under a container directory for lots of virtual environments, such as~/.virtualenvs\n.Not checked into source control systems such as Git.\nConsidered as disposable â it should be simple to delete and recreate it from scratch. You donât place any project code in the environment.\nNot considered as movable or copyable â you just recreate the same environment in the target location.\nSee PEP 405 for more background on Python virtual environments.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nCreating virtual environmentsÂ¶\nVirtual environments are created by executing the venv\nmodule:\npython -m venv /path/to/new/virtual/environment\nThis creates the target directory (including parent directories as needed)\nand places a pyvenv.cfg\nfile in it with a home\nkey\npointing to the Pyth"}
{"url": "https://docs.python.org/3/library/asyncio.html", "title": "", "text": "asyncio\nâ Asynchronous I/OÂ¶\nasyncio is a library to write concurrent code using the async/await syntax.\nasyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc.\nasyncio is often a perfect fit for IO-bound and high-level structured network code.\nSee also\n- A Conceptual Overview of asyncio\nExplanation of the fundamentals of asyncio.\nasyncio provides a set of high-level APIs to:\nrun Python coroutines concurrently and have full control over their execution;\nperform network IO and IPC;\ncontrol subprocesses;\ndistribute tasks via queues;\nsynchronize concurrent code;\nAdditionally, there are low-level APIs for library and framework developers to:\ncreate and manage event loops, which provide asynchronous APIs for networking, running subprocesses, handling OS signals, etc;\nimplement efficient protocols using transports;\nbridge callback-based libraries and code with async/await syntax.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nasyncio REPL\nYou can experiment with an asyncio\nconcurrent context in the REPL:\n$ python -m asyncio\nasyncio REPL ...\nUse \"await\" directly instead of \"asyncio.run()\".\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import asyncio\n>>> await asyncio.sleep(10, result='hello')\n'hello'\nRaises an auditing event cpython.run_stdin\nwith no arguments.\nChanged in version 3.12.5: (also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events.\nChanged in version 3.13: Uses PyREPL if possible, in which case PYTHONSTARTUP\nis\nalso executed. Emits audit events.\nReference\nNote\nThe source code for asyncio can be found in Lib/asyncio/."}
{"url": "https://docs.python.org/3/library/distribution.html", "title": "", "text": "Software Packaging and DistributionÂ¶\nThese libraries help you with publishing and installing Python software. While these modules are designed to work in conjunction with the Python Package Index, they can also be used with a local index server, or without any index server at all."}
{"url": "https://docs.python.org/3/library/warnings.html", "title": "", "text": "warnings\nâ Warning controlÂ¶\nSource code: Lib/warnings.py\nWarning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesnât warrant raising an exception and terminating the program. For example, one might want to issue a warning when a program uses an obsolete module.\nPython programmers issue warnings by calling the warn()\nfunction defined\nin this module. (C programmers use PyErr_WarnEx()\n; see\nException Handling for details).\nWarning messages are normally written to sys.stderr\n, but their disposition\ncan be changed flexibly, from ignoring all warnings to turning them into\nexceptions. The disposition of warnings can vary based on the warning category, the text of the warning message, and the source location where it\nis issued. Repetitions of a particular warning for the same source location are\ntypically suppressed.\nThere are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook.\nThe determination whether to issue a warning message is controlled by the\nwarning filter, which is a sequence of matching rules and actions. Rules can be\nadded to the filter by calling filterwarnings()\nand reset to its default\nstate by calling resetwarnings()\n.\nThe printing of warning messages is done by calling showwarning()\n, which\nmay be overridden; the default implementation of this function formats the\nmessage by calling formatwarning()\n, which is also available for use by\ncustom implementations.\nSee also\nlogging.captureWarnings()\nallows you to handle all warnings with\nthe standard logging infrastructure.\nWarning CategoriesÂ¶\nThere are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.\nWhile these are technically built-in exceptions,"}
{"url": "https://docs.python.org/3/library/persistence.html", "title": "", "text": "Data PersistenceÂ¶\nThe modules described in this chapter support storing Python data in a\npersistent form on disk. The pickle\nand marshal\nmodules can turn\nmany Python data types into a stream of bytes and then recreate the objects from\nthe bytes. The various DBM-related modules support a family of hash-based file\nformats that store a mapping of strings to other strings.\nThe list of modules described in this chapter is:\npickle\nâ Python object serializationcopyreg\nâ Registerpickle\nsupport functionsshelve\nâ Python object persistencemarshal\nâ Internal Python object serializationdbm\nâ Interfaces to Unix âdatabasesâsqlite3\nâ DB-API 2.0 interface for SQLite databases- Tutorial\n- Reference\n- How-to guides\n- How to use placeholders to bind values in SQL queries\n- How to adapt custom Python types to SQLite values\n- How to convert SQLite values to custom Python types\n- Adapter and converter recipes\n- How to use connection shortcut methods\n- How to use the connection context manager\n- How to work with SQLite URIs\n- How to create and use row factories\n- How to handle non-UTF-8 text encodings\n- Explanation"}
{"url": "https://docs.python.org/3/library/curses.html", "title": "", "text": "curses\nâ Terminal handling for character-cell displaysÂ¶\nSource code: Lib/curses\nThe curses\nmodule provides an interface to the curses library, the\nde-facto standard for portable advanced terminal handling.\nWhile curses is most widely used in the Unix environment, versions are available for Windows, DOS, and possibly other systems as well. This extension module is designed to match the API of ncurses, an open-source curses library hosted on Linux and the BSD variants of Unix.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nNote\nWhenever the documentation mentions a character it can be specified as an integer, a one-character Unicode string or a one-byte byte string.\nWhenever the documentation mentions a character string it can be specified as a Unicode string or a byte string.\nSee also\n- Module\ncurses.ascii\nUtilities for working with ASCII characters, regardless of your locale settings.\n- Module\ncurses.panel\nA panel stack extension that adds depth to curses windows.\n- Module\ncurses.textpad\nEditable text widget for curses supporting Emacs-like bindings.\n- Curses Programming with Python\nTutorial material on using curses with Python, by Andrew Kuchling and Eric Raymond.\nFunctionsÂ¶\nThe module curses\ndefines the following exception:\n- exception curses.errorÂ¶\nException raised when a curses library function returns an error.\nNote\nWhenever x or y arguments to a function or a method are optional, they\ndefault to the current cursor location. Whenever attr is optional, it defaults\nto A_NORMAL\n.\nThe module curses\ndefines the following functions:\n- curses.baudrate()Â¶\nReturn the output speed of the terminal in bits per second. On software terminal emulators it will have a fixed high value. Included for historical reasons; in former times, it was used to write output loops for time delays and occasionally to change interfaces depending on the line speed.\n- curses.beep()Â¶\nEmit a short attention sound.\n- cu"}
{"url": "https://docs.python.org/3/reference/grammar.html", "title": "", "text": "10. Full Grammar specificationÂ¶\nThis is the full Python grammar, derived directly from the grammar used to generate the CPython parser (see Grammar/python.gram). The version here omits details related to code generation and error recovery.\nThe notation is a mixture of EBNF\nand PEG.\nIn particular, &\nfollowed by a symbol, token or parenthesized\ngroup indicates a positive lookahead (i.e., is required to match but\nnot consumed), while !\nindicates a negative lookahead (i.e., is\nrequired not to match). We use the |\nseparator to mean PEGâs\nâordered choiceâ (written as /\nin traditional PEG grammars). See\nPEP 617 for more details on the grammarâs syntax.\n# PEG grammar for Python\n# ========================= START OF THE GRAMMAR =========================\n# General grammatical elements and rules:\n#\n# * Strings with double quotes (\") denote SOFT KEYWORDS\n# * Strings with single quotes (') denote KEYWORDS\n# * Upper case names (NAME) denote tokens in the Grammar/Tokens file\n# * Rule names starting with \"invalid_\" are used for specialized syntax errors\n# - These rules are NOT used in the first pass of the parser.\n# - Only if the first pass fails to parse, a second pass including the invalid\n# rules will be executed.\n# - If the parser fails in the second phase with a generic syntax error, the\n# location of the generic failure of the first pass will be used (this avoids\n# reporting incorrect locations due to the invalid rules).\n# - The order of the alternatives involving invalid rules matter\n# (like any rule in PEG).\n#\n# Grammar Syntax (see PEP 617 for more information):\n#\n# rule_name: expression\n# Optionally, a type can be included right after the rule name, which\n# specifies the return type of the C or Python function corresponding to the\n# rule:\n# rule_name[return_type]: expression\n# If the return type is omitted, then a void * is returned in C and an Any in\n# Python.\n# e1 e2\n# Match e1, then match e2.\n# e1 | e2\n# Match e1 or e2.\n# The first alternative can also appear on the lin"}
{"url": "https://docs.python.org/3/library/__main__.html", "title": "", "text": "__main__\nâ Top-level code environmentÂ¶\nIn Python, the special name __main__\nis used for two important constructs:\nthe name of the top-level environment of the program, which can be checked using the\n__name__ == '__main__'\nexpression; andthe\n__main__.py\nfile in Python packages.\nBoth of these mechanisms are related to Python modules; how users interact with them and how they interact with each other. They are explained in detail below. If youâre new to Python modules, see the tutorial section Modules for an introduction.\n__name__ == '__main__'\nÂ¶\nWhen a Python module or package is imported, __name__\nis set to the\nmoduleâs name. Usually, this is the name of the Python file itself without the\n.py\nextension:\n>>> import configparser\n>>> configparser.__name__\n'configparser'\nIf the file is part of a package, __name__\nwill also include the parent\npackageâs path:\n>>> from concurrent.futures import process\n>>> process.__name__\n'concurrent.futures.process'\nHowever, if the module is executed in the top-level code environment,\nits __name__\nis set to the string '__main__'\n.\nWhat is the âtop-level code environmentâ?Â¶\n__main__\nis the name of the environment where top-level code is run.\nâTop-level codeâ is the first user-specified Python module that starts running.\nItâs âtop-levelâ because it imports all other modules that the program needs.\nSometimes âtop-level codeâ is called an entry point to the application.\nThe top-level code environment can be:\nthe scope of an interactive prompt:\n>>> __name__ '__main__'\nthe Python module passed to the Python interpreter as a file argument:\n$ python helloworld.py Hello, world!\nthe Python module or package passed to the Python interpreter with the\n-m\nargument:$ python -m tarfile usage: tarfile.py [-h] [-v] (...)\nPython code read by the Python interpreter from standard input:\n$ echo \"import this\" | python The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. ...\nPython code passed to the Python interpr"}
{"url": "https://docs.python.org/3/library/http.client.html", "title": "", "text": "http.client\nâ HTTP protocol clientÂ¶\nSource code: Lib/http/client.py\nThis module defines classes that implement the client side of the HTTP and\nHTTPS protocols. It is normally not used directly â the module\nurllib.request\nuses it to handle URLs that use HTTP and HTTPS.\nSee also\nThe Requests package is recommended for a higher-level HTTP client interface.\nNote\nHTTPS support is only available if Python was compiled with SSL support\n(through the ssl\nmodule).\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe module provides the following classes:\n- class http.client.HTTPConnection(host, port=None, [timeout, ]source_address=None, blocksize=8192)Â¶\nAn\nHTTPConnection\ninstance represents one transaction with an HTTP server. It should be instantiated by passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the formhost:port\n, else the default HTTP port (80) is used. If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional blocksize parameter sets the buffer size in bytes for sending a file-like message body.For example, the following calls all create instances that connect to the server at the same host and port:\n>>> h1 = http.client.HTTPConnection('www.python.org') >>> h2 = http.client.HTTPConnection('www.python.org:80') >>> h3 = http.client.HTTPConnection('www.python.org', 80) >>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)\nChanged in version 3.2: source_address was added.\nChanged in version 3.4: The strict parameter was removed. HTTP 0.9-style âSimple Responsesâ are no longer supported.\nChanged in version 3.7: bloc"}
{"url": "https://docs.python.org/3/library/dataclasses.html", "title": "", "text": "dataclasses\nâ Data ClassesÂ¶\nSource code: Lib/dataclasses.py\nThis module provides a decorator and functions for automatically\nadding generated special methods such as __init__()\nand\n__repr__()\nto user-defined classes. It was originally described\nin PEP 557.\nThe member variables to use in these generated methods are defined using PEP 526 type annotations. For example, this code:\nfrom dataclasses import dataclass\n@dataclass\nclass InventoryItem:\n\"\"\"Class for keeping track of an item in inventory.\"\"\"\nname: str\nunit_price: float\nquantity_on_hand: int = 0\ndef total_cost(self) -> float:\nreturn self.unit_price * self.quantity_on_hand\nwill add, among other things, a __init__()\nthat looks like:\ndef __init__(self, name: str, unit_price: float, quantity_on_hand: int = 0):\nself.name = name\nself.unit_price = unit_price\nself.quantity_on_hand = quantity_on_hand\nNote that this method is automatically added to the class: it is not\ndirectly specified in the InventoryItem\ndefinition shown above.\nAdded in version 3.7.\nModule contentsÂ¶\n- @dataclasses.dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)Â¶\nThis function is a decorator that is used to add generated special methods to classes, as described below.\nThe\n@dataclass\ndecorator examines the class to findfield\ns. Afield\nis defined as a class variable that has a type annotation. With two exceptions described below, nothing in@dataclass\nexamines the type specified in the variable annotation.The order of the fields in all of the generated methods is the order in which they appear in the class definition.\nThe\n@dataclass\ndecorator will add various âdunderâ methods to the class, described below. If any of the added methods already exist in the class, the behavior depends on the parameter, as documented below. The decorator returns the same class that it is called on; no new class is created.If\n@dataclass\nis used just as a simple decorato"}
{"url": "https://docs.python.org/3/library/syslog.html", "title": "", "text": "syslog\nâ Unix syslog library routinesÂ¶\nThis module provides an interface to the Unix syslog\nlibrary routines.\nRefer to the Unix manual pages for a detailed description of the syslog\nfacility.\nAvailability: Unix, not WASI, not iOS.\nThis module wraps the system syslog\nfamily of routines. A pure Python\nlibrary that can speak to a syslog server is available in the\nlogging.handlers\nmodule as SysLogHandler\n.\nThe module defines the following functions:\n- syslog.syslog(message)Â¶\n- syslog.syslog(priority, message)\nSend the string message to the system logger. A trailing newline is added if necessary. Each message is tagged with a priority composed of a facility and a level. The optional priority argument, which defaults to\nLOG_INFO\n, determines the message priority. If the facility is not encoded in priority using logical-or (LOG_INFO | LOG_USER\n), the value given in theopenlog()\ncall is used.If\nopenlog()\nhas not been called prior to the call tosyslog()\n,openlog()\nwill be called with no arguments.Raises an auditing event\nsyslog.syslog\nwith argumentspriority\n,message\n.Changed in version 3.2: In previous versions,\nopenlog()\nwould not be called automatically if it wasnât called prior to the call tosyslog()\n, deferring to the syslog implementation to callopenlog()\n.Changed in version 3.12: This function is restricted in subinterpreters. (Only code that runs in multiple interpreters is affected and the restriction is not relevant for most users.)\nopenlog()\nmust be called in the main interpreter beforesyslog()\nmay be used in a subinterpreter. Otherwise it will raiseRuntimeError\n.\n- syslog.openlog([ident[, logoption[, facility]]])Â¶\nLogging options of subsequent\nsyslog()\ncalls can be set by callingopenlog()\n.syslog()\nwill callopenlog()\nwith no arguments if the log is not currently open.The optional ident keyword argument is a string which is prepended to every message, and defaults to\nsys.argv[0]\nwith leading path components stripped. The optional logoption keyword argument (defa"}
{"url": "https://docs.python.org/3/library/http.server.html", "title": "", "text": "http.server\nâ HTTP serversÂ¶\nSource code: Lib/http/server.py\nThis module defines classes for implementing HTTP servers.\nWarning\nhttp.server\nis not recommended for production. It only implements\nbasic security checks.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nOne class, HTTPServer\n, is a socketserver.TCPServer\nsubclass.\nIt creates and listens at the HTTP socket, dispatching the requests to a\nhandler. Code to create and run the server looks like this:\ndef run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\nserver_address = ('', 8000)\nhttpd = server_class(server_address, handler_class)\nhttpd.serve_forever()\n- class http.server.HTTPServer(server_address, RequestHandlerClass)Â¶\nThis class builds on the\nTCPServer\nclass by storing the server address as instance variables namedserver_name\nandserver_port\n. The server is accessible by the handler, typically through the handlerâsserver\ninstance variable.\n- class http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)Â¶\nThis class is identical to HTTPServer but uses threads to handle requests by using the\nThreadingMixIn\n. This is useful to handle web browsers pre-opening sockets, on whichHTTPServer\nwould wait indefinitely.Added in version 3.7.\nThe HTTPServer\nand ThreadingHTTPServer\nmust be given\na RequestHandlerClass on instantiation, of which this module\nprovides three different variants:\n- class http.server.BaseHTTPRequestHandler(request, client_address, server)Â¶\nThis class is used to handle the HTTP requests that arrive at the server. By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g. GET or POST).\nBaseHTTPRequestHandler\nprovides a number of class and instance variables, and methods for use by subclasses.The handler will parse the request and the headers, then call a method specific to the request type. The method name is constructed from th"}
{"url": "https://docs.python.org/3/library/base64.html", "title": "", "text": "base64\nâ Base16, Base32, Base64, Base85 Data EncodingsÂ¶\nSource code: Lib/base64.py\nThis module provides functions for encoding binary data to printable ASCII characters and decoding such encodings back to binary data. This includes the encodings specified in RFC 4648 (Base64, Base32 and Base16) and the non-standard Base85 encodings.\nThere are two interfaces provided by this module. The modern interface\nsupports encoding bytes-like objects to ASCII\nbytes\n, and decoding bytes-like objects or\nstrings containing ASCII to bytes\n. Both base-64 alphabets\ndefined in RFC 4648 (normal, and URL- and filesystem-safe) are supported.\nThe legacy interface does not support decoding from strings, but it does\nprovide functions for encoding and decoding to and from file objects. It only supports the Base64 standard alphabet, and it adds\nnewlines every 76 characters as per RFC 2045. Note that if you are looking\nfor RFC 2045 support you probably want to be looking at the email\npackage instead.\nChanged in version 3.3: ASCII-only Unicode strings are now accepted by the decoding functions of the modern interface.\nChanged in version 3.4: Any bytes-like objects are now accepted by all encoding and decoding functions in this module. Ascii85/Base85 support added.\nRFC 4648 EncodingsÂ¶\nThe RFC 4648 encodings are suitable for encoding binary data so that it can be safely sent by email, used as parts of URLs, or included as part of an HTTP POST request.\n- base64.b64encode(s, altchars=None)Â¶\nEncode the bytes-like object s using Base64 and return the encoded\nbytes\n.Optional altchars must be a bytes-like object of length 2 which specifies an alternative alphabet for the\n+\nand/\ncharacters. This allows an application to e.g. generate URL or filesystem safe Base64 strings. The default isNone\n, for which the standard Base64 alphabet is used.May assert or raise a\nValueError\nif the length of altchars is not 2. Raises aTypeError\nif altchars is not a bytes-like object.\n- base64.b64decode(s, altchars=None, "}
{"url": "https://docs.python.org/3/library/hmac.html", "title": "", "text": "hmac\nâ Keyed-Hashing for Message AuthenticationÂ¶\nSource code: Lib/hmac.py\nThis module implements the HMAC algorithm as described by RFC 2104. The interface allows to use any hash function with a fixed digest size. In particular, extendable output functions such as SHAKE-128 or SHAKE-256 cannot be used with HMAC.\n- hmac.new(key, msg=None, digestmod)Â¶\nReturn a new hmac object. key is a bytes or bytearray object giving the secret key. If msg is present, the method call\nupdate(msg)\nis made. digestmod is the digest name, digest constructor or module for the HMAC object to use. It may be any name suitable tohashlib.new()\n. Despite its argument position, it is required.Changed in version 3.4: Parameter key can be a bytes or bytearray object. Parameter msg can be of any type supported by\nhashlib\n. Parameter digestmod can be the name of a hash algorithm.Changed in version 3.8: The digestmod argument is now required. Pass it as a keyword argument to avoid awkwardness when you do not have an initial msg.\n- hmac.digest(key, msg, digest)Â¶\nReturn digest of msg for given secret key and digest. The function is equivalent to\nHMAC(key, msg, digest).digest()\n, but uses an optimized C or inline implementation, which is faster for messages that fit into memory. The parameters key, msg, and digest have the same meaning as innew()\n.CPython implementation detail, the optimized C implementation is only used when digest is a string and name of a digest algorithm, which is supported by OpenSSL.\nAdded in version 3.7.\n- class hmac.HMACÂ¶\nAn HMAC object has the following methods:\n- HMAC.update(msg)Â¶\nUpdate the hmac object with msg. Repeated calls are equivalent to a single call with the concatenation of all the arguments:\nm.update(a); m.update(b)\nis equivalent tom.update(a + b)\n.Changed in version 3.4: Parameter msg can be of any type supported by\nhashlib\n.\n- HMAC.digest()Â¶\nReturn the digest of the bytes passed to the\nupdate()\nmethod so far. This bytes object will be the same length as the "}
{"url": "https://docs.python.org/3/library/allos.html", "title": "", "text": "Generic Operating System ServicesÂ¶\nThe modules described in this chapter provide interfaces to operating system features that are available on (almost) all operating systems, such as files and a clock. The interfaces are generally modeled after the Unix or C interfaces, but they are available on most other systems as well. Hereâs an overview:\nos\nâ Miscellaneous operating system interfacesio\nâ Core tools for working with streamstime\nâ Time access and conversionslogging\nâ Logging facility for Pythonlogging.config\nâ Logging configurationlogging.handlers\nâ Logging handlersplatform\nâ Access to underlying platformâs identifying dataerrno\nâ Standard errno system symbolsctypes\nâ A foreign function library for Python- ctypes tutorial\n- Loading dynamic link libraries\n- Accessing functions from loaded dlls\n- Calling functions\n- Fundamental data types\n- Calling functions, continued\n- Calling variadic functions\n- Calling functions with your own custom data types\n- Specifying the required argument types (function prototypes)\n- Return types\n- Passing pointers (or: passing parameters by reference)\n- Structures and unions\n- Structure/union alignment and byte order\n- Bit fields in structures and unions\n- Arrays\n- Pointers\n- Type conversions\n- Incomplete Types\n- Callback functions\n- Accessing values exported from dlls\n- Surprises\n- Variable-sized data types\n- ctypes reference\n- ctypes tutorial"}
{"url": "https://docs.python.org/3/library/mimetypes.html", "title": "", "text": "mimetypes\nâ Map filenames to MIME typesÂ¶\nSource code: Lib/mimetypes.py\nThe mimetypes\nmodule converts between a filename or URL and the MIME type\nassociated with the filename extension. Conversions are provided from filename\nto MIME type and from MIME type to filename extension; encodings are not\nsupported for the latter conversion.\nThe module provides one class and a number of convenience functions. The functions are the normal interface to this module, but some applications may be interested in the class as well.\nThe functions described below provide the primary interface for this module. If\nthe module has not been initialized, they will call init()\nif they rely on\nthe information init()\nsets up.\n- mimetypes.guess_type(url, strict=True)Â¶\nGuess the type of a file based on its filename, path or URL, given by url. URL can be a string or a path-like object.\nThe return value is a tuple\n(type, encoding)\nwhere type isNone\nif the type canât be guessed (missing or unknown suffix) or a string of the form'type/subtype'\n, usable for a MIME content-type header.encoding is\nNone\nfor no encoding or the name of the program used to encode (e.g. compress or gzip). The encoding is suitable for use as a Content-Encoding header, not as a Content-Transfer-Encoding header. The mappings are table driven. Encoding suffixes are case sensitive; type suffixes are first tried case sensitively, then case insensitively.The optional strict argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA. When strict is\nTrue\n(the default), only the IANA types are supported; when strict isFalse\n, some additional non-standard but commonly used MIME types are also recognized.Changed in version 3.8: Added support for url being a path-like object.\nDeprecated since version 3.13: Passing a file path instead of URL is soft deprecated. Use\nguess_file_type()\nfor this.\n- mimetypes.guess_file_type(path, *, strict=True)Â¶\nGuess the type of a file ba"}
{"url": "https://docs.python.org/3/library/getopt.html", "title": "", "text": "getopt\nâ C-style parser for command line optionsÂ¶\nSource code: Lib/getopt.py\nNote\nThis module is considered feature complete. A more declarative and\nextensible alternative to this API is provided in the optparse\nmodule. Further functional enhancements for command line parameter\nprocessing are provided either as third party modules on PyPI,\nor else as features in the argparse\nmodule.\nThis module helps scripts to parse the command line arguments in sys.argv\n.\nIt supports the same conventions as the Unix getopt()\nfunction (including\nthe special meanings of arguments of the form â-\nâ and â--\nâ). Long\noptions similar to those supported by GNU software may be used as well via an\noptional third argument.\nUsers who are unfamiliar with the Unix getopt()\nfunction should consider\nusing the argparse\nmodule instead. Users who are familiar with the Unix\ngetopt()\nfunction, but would like to get equivalent behavior while\nwriting less code and getting better help and error messages should consider\nusing the optparse\nmodule. See Choosing an argument parsing library for\nadditional details.\nThis module provides two functions and an exception:\n- getopt.getopt(args, shortopts, longopts=[])Â¶\nParses command line options and parameter list. args is the argument list to be parsed, without the leading reference to the running program. Typically, this means\nsys.argv[1:]\n. shortopts is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (':'\n; i.e., the same format that Unixgetopt()\nuses).Note\nUnlike GNU\ngetopt()\n, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.longopts, if specified, must be a list of strings with the names of the long options which should be supported. The leading\n'--'\ncharacters should not be included in the option name. Long options which require an argument should be followed by an equal sign ('='\n). Optional arg"}
{"url": "https://docs.python.org/3/library/wsgiref.html", "title": "", "text": "wsgiref\nâ WSGI Utilities and Reference ImplementationÂ¶\nSource code: Lib/wsgiref\nThe Web Server Gateway Interface (WSGI) is a standard interface between web server software and web applications written in Python. Having a standard interface makes it easy to use an application that supports WSGI with a number of different web servers.\nOnly authors of web servers and programming frameworks need to know every detail and corner case of the WSGI design. You donât need to understand every detail of WSGI just to install a WSGI application or to write a web application using an existing framework.\nwsgiref\nis a reference implementation of the WSGI specification that can\nbe used to add WSGI support to a web server or framework. It provides utilities\nfor manipulating WSGI environment variables and response headers, base classes\nfor implementing WSGI servers, a demo HTTP server that serves WSGI applications,\ntypes for static type checking,\nand a validation tool that checks WSGI servers and applications for conformance\nto the WSGI specification (PEP 3333).\nSee wsgi.readthedocs.io for more information about WSGI, and links to tutorials and other resources.\nwsgiref.util\nâ WSGI environment utilitiesÂ¶\nThis module provides a variety of utility functions for working with WSGI\nenvironments. A WSGI environment is a dictionary containing HTTP request\nvariables as described in PEP 3333. All of the functions taking an environ\nparameter expect a WSGI-compliant dictionary to be supplied; please see\nPEP 3333 for a detailed specification and\nWSGIEnvironment\nfor a type alias that can be used\nin type annotations.\n- wsgiref.util.guess_scheme(environ)Â¶\nReturn a guess for whether\nwsgi.url_scheme\nshould be âhttpâ or âhttpsâ, by checking for aHTTPS\nenvironment variable in the environ dictionary. The return value is a string.This function is useful when creating a gateway that wraps CGI or a CGI-like protocol such as FastCGI. Typically, servers providing such protocols will include a\nHTTPS\nvariable "}
{"url": "https://docs.python.org/3/library/numbers.html", "title": "", "text": "numbers\nâ Numeric abstract base classesÂ¶\nSource code: Lib/numbers.py\nThe numbers\nmodule (PEP 3141) defines a hierarchy of numeric\nabstract base classes which progressively define\nmore operations. None of the types defined in this module are intended to be instantiated.\n- class numbers.NumberÂ¶\nThe root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use\nisinstance(x, Number)\n.\nThe numeric towerÂ¶\n- class numbers.ComplexÂ¶\nSubclasses of this type describe complex numbers and include the operations that work on the built-in\ncomplex\ntype. These are: conversions tocomplex\nandbool\n,real\n,imag\n,+\n,-\n,*\n,/\n,**\n,abs()\n,conjugate()\n,==\n, and!=\n. All except-\nand!=\nare abstract.- realÂ¶\nAbstract. Retrieves the real component of this number.\n- imagÂ¶\nAbstract. Retrieves the imaginary component of this number.\n- abstractmethod conjugate()Â¶\nAbstract. Returns the complex conjugate. For example,\n(1+3j).conjugate() == (1-3j)\n.\n- class numbers.RealÂ¶\nTo\nComplex\n,Real\nadds the operations that work on real numbers.In short, those are: a conversion to\nfloat\n,math.trunc()\n,round()\n,math.floor()\n,math.ceil()\n,divmod()\n,//\n,%\n,<\n,<=\n,>\n, and>=\n.Real also provides defaults for\ncomplex()\n,real\n,imag\n, andconjugate()\n.\n- class numbers.RationalÂ¶\nSubtypes\nReal\nand addsnumerator\nanddenominator\nproperties. It also provides a default forfloat()\n.The\nnumerator\nanddenominator\nvalues should be instances ofIntegral\nand should be in lowest terms withdenominator\npositive.- numeratorÂ¶\nAbstract. The numerator of this rational number.\n- denominatorÂ¶\nAbstract. The denominator of this rational number.\nNotes for type implementersÂ¶\nImplementers should be careful to make equal numbers equal and hash\nthem to the same values. This may be subtle if there are two different\nextensions of the real numbers. For example, fractions.Fraction\nimplements hash()\nas follows:\ndef __hash__(self):\nif self.denominator == 1:\n# Get integers right.\nreturn hash(self.n"}
{"url": "https://docs.python.org/3/library/graphlib.html", "title": "", "text": "graphlib\nâ Functionality to operate with graph-like structuresÂ¶\nSource code: Lib/graphlib.py\n- class graphlib.TopologicalSorter(graph=None)Â¶\nProvides functionality to topologically sort a graph of hashable nodes.\nA topological order is a linear ordering of the vertices in a graph such that for every directed edge u -> v from vertex u to vertex v, vertex u comes before vertex v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this example, a topological ordering is just a valid sequence for the tasks. A complete topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph.\nIf the optional graph argument is provided it must be a dictionary representing a directed acyclic graph where the keys are nodes and the values are iterables of all predecessors of that node in the graph (the nodes that have edges that point to the value in the key). Additional nodes can be added to the graph using the\nadd()\nmethod.In the general case, the steps required to perform the sorting of a given graph are as follows:\nCreate an instance of the\nTopologicalSorter\nwith an optional initial graph.Add additional nodes to the graph.\nCall\nprepare()\non the graph.While\nis_active()\nisTrue\n, iterate over the nodes returned byget_ready()\nand process them. Calldone()\non each node as it finishes processing.\nIn case just an immediate sorting of the nodes in the graph is required and no parallelism is involved, the convenience method\nTopologicalSorter.static_order()\ncan be used directly:>>> graph = {\"D\": {\"B\", \"C\"}, \"C\": {\"A\"}, \"B\": {\"A\"}} >>> ts = TopologicalSorter(graph) >>> tuple(ts.static_order()) ('A', 'C', 'B', 'D')\nThe class is designed to easily support parallel processing of the nodes as they become ready. For instance:\ntopological_sorter = TopologicalSorter() # Add nodes to 'topological_sorter'... "}
{"url": "https://docs.python.org/3/library/configparser.html", "title": "", "text": "configparser\nâ Configuration file parserÂ¶\nSource code: Lib/configparser.py\nThis module provides the ConfigParser\nclass which implements a basic\nconfiguration language which provides a structure similar to whatâs found in\nMicrosoft Windows INI files. You can use this to write Python programs which\ncan be customized by end users easily.\nNote\nThis library does not interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax.\nSee also\n- Module\ntomllib\nTOML is a well-specified format for application configuration files. It is specifically designed to be an improved version of INI.\n- Module\nshlex\nSupport for creating Unix shell-like mini-languages which can also be used for application configuration files.\n- Module\njson\nThe\njson\nmodule implements a subset of JavaScript syntax which is sometimes used for configuration, but does not support comments.\nQuick StartÂ¶\nLetâs take a very basic configuration file that looks like this:\n[DEFAULT]\nServerAliveInterval = 45\nCompression = yes\nCompressionLevel = 9\nForwardX11 = yes\n[forge.example]\nUser = hg\n[topsecret.server.example]\nPort = 50022\nForwardX11 = no\nThe structure of INI files is described in the following section. Essentially, the file\nconsists of sections, each of which contains keys with values.\nconfigparser\nclasses can read and write such files. Letâs start by\ncreating the above configuration file programmatically.\n>>> import configparser\n>>> config = configparser.ConfigParser()\n>>> config['DEFAULT'] = {'ServerAliveInterval': '45',\n... 'Compression': 'yes',\n... 'CompressionLevel': '9'}\n>>> config['forge.example'] = {}\n>>> config['forge.example']['User'] = 'hg'\n>>> config['topsecret.server.example'] = {}\n>>> topsecret = config['topsecret.server.example']\n>>> topsecret['Port'] = '50022' # mutates the parser\n>>> topsecret['ForwardX11'] = 'no' # same here\n>>> config['DEFAULT']['ForwardX11'] = 'yes'\n>>> with open('example.ini', 'w') as configfile:\n... config.write(configfile)\n...\nAs yo"}
{"url": "https://docs.python.org/3/library/logging.html", "title": "", "text": "logging\nâ Logging facility for PythonÂ¶\nSource code: Lib/logging/__init__.py\nThis module defines functions and classes which implement a flexible event logging system for applications and libraries.\nThe key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules.\nHereâs a simple example of idiomatic usage:\n# myapp.py\nimport logging\nimport mylib\nlogger = logging.getLogger(__name__)\ndef main():\nlogging.basicConfig(filename='myapp.log', level=logging.INFO)\nlogger.info('Started')\nmylib.do_something()\nlogger.info('Finished')\nif __name__ == '__main__':\nmain()\n# mylib.py\nimport logging\nlogger = logging.getLogger(__name__)\ndef do_something():\nlogger.info('Doing something')\nIf you run myapp.py, you should see this in myapp.log:\nINFO:__main__:Started\nINFO:mylib:Doing something\nINFO:__main__:Finished\nThe key feature of this idiomatic usage is that the majority of code is simply\ncreating a module level logger with getLogger(__name__)\n, and using that\nlogger to do any needed logging. This is concise, while allowing downstream\ncode fine-grained control if needed. Logged messages to the module-level logger\nget forwarded to handlers of loggers in higher-level modules, all the way up to\nthe highest-level logger known as the root logger; this approach is known as\nhierarchical logging.\nFor logging to be useful, it needs to be configured: setting the levels and\ndestinations for each logger, potentially changing how specific modules log,\noften based on command-line arguments or application configuration. In most\ncases, like the one above, only the root logger needs to be so configured, since\nall the lower level loggers at module level eventually forward their messages to\nits handlers. basicConfig()\nprovides a quick way to configure\nthe root logger that handles many use cases.\nThe module provides a lot of functional"}
{"url": "https://docs.python.org/3/library/xml.dom.minidom.html", "title": "", "text": "xml.dom.minidom\nâ Minimal DOM implementationÂ¶\nSource code: Lib/xml/dom/minidom.py\nxml.dom.minidom\nis a minimal implementation of the Document Object\nModel interface, with an API similar to that in other languages. It is intended\nto be simpler than the full DOM and also significantly smaller. Users who are\nnot already proficient with the DOM should consider using the\nxml.etree.ElementTree\nmodule for their XML processing instead.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nDOM applications typically start by parsing some XML into a DOM. With\nxml.dom.minidom\n, this is done through the parse functions:\nfrom xml.dom.minidom import parse, parseString\ndom1 = parse('c:\\\\temp\\\\mydata.xml') # parse an XML file by name\ndatasource = open('c:\\\\temp\\\\mydata.xml')\ndom2 = parse(datasource) # parse an open file\ndom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')\nThe parse()\nfunction can take either a filename or an open file object.\n- xml.dom.minidom.parse(filename_or_file, parser=None, bufsize=None)Â¶\nReturn a\nDocument\nfrom the given input. filename_or_file may be either a file name, or a file-like object. parser, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.\nIf you have XML in a string, you can use the parseString()\nfunction\ninstead:\n- xml.dom.minidom.parseString(string, parser=None)Â¶\nReturn a\nDocument\nthat represents the string. This method creates anio.StringIO\nobject for the string and passes that on toparse()\n.\nBoth functions return a Document\nobject representing the content of the\ndocument.\nWhat the parse()\nand parseString()\nfunctions do is connect an XML\nparser with a âDOM builderâ that can accept parse events from any SAX parser and\nconvert them into a DOM tree. The name of the functions are perhaps misleading,\nbut are easy to grasp when learn"}
{"url": "https://docs.python.org/3/library/ast.html", "title": "", "text": "ast\nâ Abstract Syntax TreesÂ¶\nSource code: Lib/ast.py\nThe ast\nmodule helps Python applications to process trees of the Python\nabstract syntax grammar. The abstract syntax itself might change with each\nPython release; this module helps to find out programmatically what the current\ngrammar looks like.\nAn abstract syntax tree can be generated by passing ast.PyCF_ONLY_AST\nas\na flag to the compile()\nbuilt-in function, or using the parse()\nhelper provided in this module. The result will be a tree of objects whose\nclasses all inherit from ast.AST\n. An abstract syntax tree can be\ncompiled into a Python code object using the built-in compile()\nfunction.\nAbstract GrammarÂ¶\nThe abstract grammar is currently defined as follows:\n-- ASDL's 4 builtin types are:\n-- identifier, int, string, constant\nmodule Python\n{\nmod = Module(stmt* body, type_ignore* type_ignores)\n| Interactive(stmt* body)\n| Expression(expr body)\n| FunctionType(expr* argtypes, expr returns)\nstmt = FunctionDef(identifier name, arguments args,\nstmt* body, expr* decorator_list, expr? returns,\nstring? type_comment, type_param* type_params)\n| AsyncFunctionDef(identifier name, arguments args,\nstmt* body, expr* decorator_list, expr? returns,\nstring? type_comment, type_param* type_params)\n| ClassDef(identifier name,\nexpr* bases,\nkeyword* keywords,\nstmt* body,\nexpr* decorator_list,\ntype_param* type_params)\n| Return(expr? value)\n| Delete(expr* targets)\n| Assign(expr* targets, expr value, string? type_comment)\n| TypeAlias(expr name, type_param* type_params, expr value)\n| AugAssign(expr target, operator op, expr value)\n-- 'simple' indicates that we annotate simple name without parens\n| AnnAssign(expr target, expr annotation, expr? value, int simple)\n-- use 'orelse' because else is a keyword in target languages\n| For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| While(expr test, stmt* body, stmt* orelse)\n| If(expr tes"}
{"url": "https://docs.python.org/3/library/gettext.html", "title": "", "text": "gettext\nâ Multilingual internationalization servicesÂ¶\nSource code: Lib/gettext.py\nThe gettext\nmodule provides internationalization (I18N) and localization\n(L10N) services for your Python modules and applications. It supports both the\nGNU gettext message catalog API and a higher level, class-based API that may\nbe more appropriate for Python files. The interface described below allows you\nto write your module and application messages in one natural language, and\nprovide a catalog of translated messages for running under different natural\nlanguages.\nSome hints on localizing your Python modules and applications are also given.\nGNU gettext APIÂ¶\nThe gettext\nmodule defines the following API, which is very similar to\nthe GNU gettext API. If you use this API you will affect the\ntranslation of your entire application globally. Often this is what you want if\nyour application is monolingual, with the choice of language dependent on the\nlocale of your user. If you are localizing a Python module, or if your\napplication needs to switch languages on the fly, you probably want to use the\nclass-based API instead.\n- gettext.bindtextdomain(domain, localedir=None)Â¶\nBind the domain to the locale directory localedir. More concretely,\ngettext\nwill look for binary.mo\nfiles for the given domain using the path (on Unix):localedir/language/LC_MESSAGES/domain.mo\n, where language is searched for in the environment variablesLANGUAGE\n,LC_ALL\n,LC_MESSAGES\n, andLANG\nrespectively.If localedir is omitted or\nNone\n, then the current binding for domain is returned. [1]\n- gettext.textdomain(domain=None)Â¶\nChange or query the current global domain. If domain is\nNone\n, then the current global domain is returned, otherwise the global domain is set to domain, which is returned.\n- gettext.gettext(message)Â¶\nReturn the localized translation of message, based on the current global domain, language, and locale directory. This function is usually aliased as\n_()\nin the local namespace (see examples below).\n- get"}
{"url": "https://docs.python.org/3/library/functions.html", "title": "", "text": "Built-in FunctionsÂ¶\nThe Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\nBuilt-in Functions |\n|||\n|---|---|---|---|\n- abs(number, /)Â¶\nReturn the absolute value of a number. The argument may be an integer, a floating-point number, or an object implementing\n__abs__()\n. If the argument is a complex number, its magnitude is returned.\n- aiter(async_iterable, /)Â¶\nReturn an asynchronous iterator for an asynchronous iterable. Equivalent to calling\nx.__aiter__()\n.Note: Unlike\niter()\n,aiter()\nhas no 2-argument variant.Added in version 3.10.\n- all(iterable, /)Â¶\nReturn\nTrue\nif all elements of the iterable are true (or if the iterable is empty). Equivalent to:def all(iterable): for element in iterable: if not element: return False return True\n- awaitable anext(async_iterator, /)Â¶\n- awaitable anext(async_iterator, default, /)\nWhen awaited, return the next item from the given asynchronous iterator, or default if given and the iterator is exhausted.\nThis is the async variant of the\nnext()\nbuiltin, and behaves similarly.This calls the\n__anext__()\nmethod of async_iterator, returning an awaitable. Awaiting this returns the next value of the iterator. If default is given, it is returned if the iterator is exhausted, otherwiseStopAsyncIteration\nis raised.Added in version 3.10.\n- any(iterable, /)Â¶\nReturn\nTrue\nif any element of the iterable is true. If the iterable is empty, returnFalse\n. Equivalent to:def any(iterable): for element in iterable: if element: return True return False\n- ascii(object, /)Â¶\nAs\nrepr()\n, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned byrepr()\nusing\\x\n,\\u\n, or\\U\nescapes. This generates a string similar to that returned byrepr()\nin Python 2.\n- bin(integer, /)Â¶\nConvert an integer number to a binary string prefixed with â0bâ. The result is a valid Python expression. If integer is not a Pytho"}
{"url": "https://docs.python.org/3/library/marshal.html", "title": "", "text": "marshal\nâ Internal Python object serializationÂ¶\nThis module contains functions that can read and write Python values in a binary format. The format is specific to Python, but independent of machine architecture issues (e.g., you can write a Python value to a file on a PC, transport the file to a Mac, and read it back there). Details of the format are undocumented on purpose; it may change between Python versions (although it rarely does). [1]\nThis is not a general âpersistenceâ module. For general persistence and\ntransfer of Python objects through RPC calls, see the modules pickle\nand\nshelve\n. The marshal\nmodule exists mainly to support reading and\nwriting the âpseudo-compiledâ code for Python modules of .pyc\nfiles.\nTherefore, the Python maintainers reserve the right to modify the marshal format\nin backward incompatible ways should the need arise.\nThe format of code objects is not compatible between Python versions,\neven if the version of the format is the same.\nDe-serializing a code object in the incorrect Python version has undefined behavior.\nIf youâre serializing and\nde-serializing Python objects, use the pickle\nmodule instead â the\nperformance is comparable, version independence is guaranteed, and pickle\nsupports a substantially wider range of objects than marshal.\nWarning\nThe marshal\nmodule is not intended to be secure against erroneous or\nmaliciously constructed data. Never unmarshal data received from an\nuntrusted or unauthenticated source.\nNot all Python object types are supported; in general, only objects whose value\nis independent from a particular invocation of Python can be written and read by\nthis module. The following types are supported: booleans, integers, floating-point\nnumbers, complex numbers, strings, bytes, bytearrays, tuples, lists, sets,\nfrozensets, dictionaries, and code objects (if allow_code is true),\nwhere it should be understood that\ntuples, lists, sets, frozensets and dictionaries are only supported as long as\nthe values contained ther"}
{"url": "https://docs.python.org/3/library/pprint.html", "title": "", "text": "pprint\nâ Data pretty printerÂ¶\nSource code: Lib/pprint.py\nThe pprint\nmodule provides a capability to âpretty-printâ arbitrary\nPython data structures in a form which can be used as input to the interpreter.\nIf the formatted structures include objects which are not fundamental Python\ntypes, the representation may not be loadable. This may be the case if objects\nsuch as files, sockets or classes are included, as well as many other\nobjects which are not representable as Python literals.\nThe formatted representation keeps objects on a single line if it can, and breaks them onto multiple lines if they donât fit within the allowed width, adjustable by the width parameter defaulting to 80 characters.\nDictionaries are sorted by key before the display is computed.\nChanged in version 3.9: Added support for pretty-printing types.SimpleNamespace\n.\nChanged in version 3.10: Added support for pretty-printing dataclasses.dataclass\n.\nFunctionsÂ¶\n- pprint.pp(object, stream=None, indent=1, width=80, depth=None, *, compact=False, sort_dicts=False, underscore_numbers=False)Â¶\nPrints the formatted representation of object, followed by a newline. This function may be used in the interactive interpreter instead of the\nprint()\nfunction for inspecting values. Tip: you can reassignprint = pprint.pp\nfor use within a scope.- Parameters:\nobject â The object to be printed.\nstream (file-like object | None) â A file-like object to which the output will be written by calling its\nwrite()\nmethod. IfNone\n(the default),sys.stdout\nis used.indent (int) â The amount of indentation added for each nesting level.\nwidth (int) â The desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made.\ndepth (int | None) â The number of nesting levels which may be printed. If the data structure being printed is too deep, the next contained level is replaced by\n...\n. IfNone\n(the default), there is no constraint on the depth of the o"}
{"url": "https://docs.python.org/3/library/smtplib.html", "title": "", "text": "smtplib\nâ SMTP protocol clientÂ¶\nSource code: Lib/smtplib.py\nThe smtplib\nmodule defines an SMTP client session object that can be used\nto send mail to any internet machine with an SMTP or ESMTP listener daemon. For\ndetails of SMTP and ESMTP operation, consult RFC 821 (Simple Mail Transfer\nProtocol) and RFC 1869 (SMTP Service Extensions).\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\n- class smtplib.SMTP(host='', port=0, local_hostname=None, [timeout, ]source_address=None)Â¶\nAn\nSMTP\ninstance encapsulates an SMTP connection. It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTPconnect()\nmethod is called with those parameters during initialization. If specified, local_hostname is used as the FQDN of the local host in the HELO/EHLO command. Otherwise, the local hostname is found usingsocket.getfqdn()\n. If theconnect()\ncall returns anything other than a success code, anSMTPConnectError\nis raised. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). If the timeout expires,TimeoutError\nis raised. The optional source_address parameter allows binding to some specific source address in a machine with multiple network interfaces, and/or to some specific source TCP port. It takes a 2-tuple(host, port)\n, for the socket to bind to as its source address before connecting. If omitted (or if host or port are''\nand/or0\nrespectively) the OS default behavior will be used.For normal use, you should only require the initialization/connect,\nsendmail()\n, andSMTP.quit()\nmethods. An example is included below.The\nSMTP\nclass supports thewith\nstatement. When used like this, the SMTPQUIT\ncommand is issued automatically when thewith\nstatement exits. E.g.:>>> from smtplib import SMTP >>> with SMTP(\"dom"}
{"url": "https://docs.python.org/3/library/copyreg.html", "title": "", "text": "copyreg\nâ Register pickle\nsupport functionsÂ¶\nSource code: Lib/copyreg.py\nThe copyreg\nmodule offers a way to define functions used while pickling\nspecific objects. The pickle\nand copy\nmodules use those functions\nwhen pickling/copying those objects. The module provides configuration\ninformation about object constructors which are not classes.\nSuch constructors may be factory functions or class instances.\n- copyreg.constructor(object)Â¶\nDeclares object to be a valid constructor. If object is not callable (and hence not valid as a constructor), raises\nTypeError\n.\n- copyreg.pickle(type, function, constructor_ob=None)Â¶\nDeclares that function should be used as a âreductionâ function for objects of type type. function must return either a string or a tuple containing between two and six elements. See the\ndispatch_table\nfor more details on the interface of function.The constructor_ob parameter is a legacy feature and is now ignored, but if passed it must be a callable.\nNote that the\ndispatch_table\nattribute of a pickler object or subclass ofpickle.Pickler\ncan also be used for declaring reduction functions.\nExampleÂ¶\nThe example below would like to show how to register a pickle function and how it will be used:\n>>> import copyreg, copy, pickle\n>>> class C:\n... def __init__(self, a):\n... self.a = a\n...\n>>> def pickle_c(c):\n... print(\"pickling a C instance...\")\n... return C, (c.a,)\n...\n>>> copyreg.pickle(C, pickle_c)\n>>> c = C(1)\n>>> d = copy.copy(c)\npickling a C instance...\n>>> p = pickle.dumps(c)\npickling a C instance..."}
{"url": "https://docs.python.org/3/library/ssl.html", "title": "", "text": "ssl\nâ TLS/SSL wrapper for socket objectsÂ¶\nSource code: Lib/ssl.py\nThis module provides access to Transport Layer Security (often known as âSecure Sockets Layerâ) encryption and peer authentication facilities for network sockets, both client-side and server-side. This module uses the OpenSSL library. It is available on all modern Unix systems, Windows, macOS, and probably additional platforms, as long as OpenSSL is installed on that platform.\nNote\nSome behavior may be platform dependent, since calls are made to the operating system socket APIs. The installed version of OpenSSL may also cause variations in behavior. For example, TLSv1.3 comes with OpenSSL version 1.1.1.\nWarning\nDonât use this module without reading the Security considerations. Doing so may lead to a false sense of security, as the default settings of the ssl module are not necessarily appropriate for your application.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThis section documents the objects and functions in the ssl\nmodule; for more\ngeneral information about TLS, SSL, and certificates, the reader is referred to\nthe documents in the âSee Alsoâ section at the bottom.\nThis module provides a class, ssl.SSLSocket\n, which is derived from the\nsocket.socket\ntype, and provides a socket-like wrapper that also\nencrypts and decrypts the data going over the socket with SSL. It supports\nadditional methods such as getpeercert()\n, which retrieves the\ncertificate of the other side of the connection, cipher()\n, which\nretrieves the cipher being used for the secure connection or\nget_verified_chain()\n, get_unverified_chain()\nwhich retrieves\ncertificate chain.\nFor more sophisticated applications, the ssl.SSLContext\nclass\nhelps manage settings and certificates, which can then be inherited\nby SSL sockets created through the SSLContext.wrap_socket()\nmethod.\nChanged in version 3.5.3: Updated to support linking with OpenSSL 1.1.0\nChan"}
{"url": "https://docs.python.org/3/library/copy.html", "title": "", "text": "copy\nâ Shallow and deep copy operationsÂ¶\nSource code: Lib/copy.py\nAssignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).\nInterface summary:\n- copy.copy(obj)Â¶\nReturn a shallow copy of obj.\n- copy.deepcopy(obj[, memo])Â¶\nReturn a deep copy of obj.\n- copy.replace(obj, /, **changes)Â¶\nCreates a new object of the same type as obj, replacing fields with values from changes.\nAdded in version 3.13.\n- exception copy.ErrorÂ¶\nRaised for module specific errors.\nThe difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):\nA shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.\nA deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.\nTwo problems often exist with deep copy operations that donât exist with shallow copy operations:\nRecursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop.\nBecause deep copy copies everything it may copy too much, such as data which is intended to be shared between copies.\nThe deepcopy()\nfunction avoids these problems by:\nkeeping a\nmemo\ndictionary of objects already copied during the current copying pass; andletting user-defined classes override the copying operation or the set of components copied.\nThis module does not copy types like module, method, stack trace, stack frame,\nfile, socket, window, or any similar types. It does âcopyâ functions and\nclasses (shallow and deeply), by returning the original object unchanged; this\nis compatible with the way these "}
{"url": "https://docs.python.org/3/library/gzip.html", "title": "", "text": "gzip\nâ Support for gzip filesÂ¶\nSource code: Lib/gzip.py\nThis module provides a simple interface to compress and decompress files just like the GNU programs gzip and gunzip would.\nThe data compression is provided by the zlib\nmodule.\nThe gzip\nmodule provides the GzipFile\nclass, as well as the\nopen()\n, compress()\nand decompress()\nconvenience functions.\nThe GzipFile\nclass reads and writes gzip-format files,\nautomatically compressing or decompressing the data so that it looks like an\nordinary file object.\nNote that additional file formats which can be decompressed by the gzip and gunzip programs, such as those produced by compress and pack, are not supported by this module.\nThe module defines the following items:\n- gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)Â¶\nOpen a gzip-compressed file in binary or text mode, returning a file object.\nThe filename argument can be an actual filename (a\nstr\norbytes\nobject), or an existing file object to read from or write to.The mode argument can be any of\n'r'\n,'rb'\n,'a'\n,'ab'\n,'w'\n,'wb'\n,'x'\nor'xb'\nfor binary mode, or'rt'\n,'at'\n,'wt'\n, or'xt'\nfor text mode. The default is'rb'\n.The compresslevel argument is an integer from 0 to 9, as for the\nGzipFile\nconstructor.For binary mode, this function is equivalent to the\nGzipFile\nconstructor:GzipFile(filename, mode, compresslevel)\n. In this case, the encoding, errors and newline arguments must not be provided.For text mode, a\nGzipFile\nobject is created, and wrapped in anio.TextIOWrapper\ninstance with the specified encoding, error handling behavior, and line ending(s).Changed in version 3.3: Added support for filename being a file object, support for text mode, and the encoding, errors and newline arguments.\nChanged in version 3.4: Added support for the\n'x'\n,'xb'\nand'xt'\nmodes.Changed in version 3.6: Accepts a path-like object.\n- exception gzip.BadGzipFileÂ¶\nAn exception raised for invalid gzip files. It inherits from\nOSError\n.EOFError\nandzlib.error\nc"}
{"url": "https://docs.python.org/3/library/bdb.html", "title": "", "text": "bdb\nâ Debugger frameworkÂ¶\nSource code: Lib/bdb.py\nThe bdb\nmodule handles basic debugger functions, like setting breakpoints\nor managing execution via the debugger.\nThe following exception is defined:\nThe bdb\nmodule also defines two classes:\n- class bdb.Breakpoint(self, file, line, temporary=False, cond=None, funcname=None)Â¶\nThis class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals.\nBreakpoints are indexed by number through a list called\nbpbynumber\nand by(file, line)\npairs throughbplist\n. The former points to a single instance of classBreakpoint\n. The latter points to a list of such instances since there may be more than one breakpoint per line.When creating a breakpoint, its associated\nfile name\nshould be in canonical form. If afuncname\nis defined, a breakpointhit\nwill be counted when the first line of that function is executed. Aconditional\nbreakpoint always counts ahit\n.Breakpoint\ninstances have the following methods:- deleteMe()Â¶\nDelete the breakpoint from the list associated to a file/line. If it is the last breakpoint in that position, it also deletes the entry for the file/line.\n- enable()Â¶\nMark the breakpoint as enabled.\n- disable()Â¶\nMark the breakpoint as disabled.\n- bpformat()Â¶\nReturn a string with all the information about the breakpoint, nicely formatted:\nBreakpoint number.\nTemporary status (del or keep).\nFile/line position.\nBreak condition.\nNumber of times to ignore.\nNumber of times hit.\nAdded in version 3.2.\n- bpprint(out=None)Â¶\nPrint the output of\nbpformat()\nto the file out, or if it isNone\n, to standard output.\nBreakpoint\ninstances have the following attributes:- fileÂ¶\nFile name of the\nBreakpoint\n.\n- lineÂ¶\nLine number of the\nBreakpoint\nwithinfile\n.\n- temporaryÂ¶\nTrue\nif aBreakpoint\nat (file, line) is temporary.\n- condÂ¶\nCondition for evaluating a\nBreakpoint\nat (file, line).\n- funcnameÂ¶\nFunction name that defines whether a\nBreakpoint\nis hit upon entering the function.\n- enabledÂ¶\nTrue\nifBreakpoi"}
{"url": "https://docs.python.org/3/library/pyexpat.html", "title": "", "text": "xml.parsers.expat\nâ Fast XML parsing using ExpatÂ¶\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nThe xml.parsers.expat\nmodule is a Python interface to the Expat\nnon-validating XML parser. The module provides a single extension type,\nxmlparser\n, that represents the current state of an XML parser. After\nan xmlparser\nobject has been created, various attributes of the object\ncan be set to handler functions. When an XML document is then fed to the\nparser, the handler functions are called for the character data and markup in\nthe XML document.\nThis module uses the pyexpat\nmodule to provide access to the Expat\nparser. Direct use of the pyexpat\nmodule is deprecated.\nThis module provides one exception and one type object:\n- exception xml.parsers.expat.ExpatErrorÂ¶\nThe exception raised when Expat reports an error. See section ExpatError Exceptions for more information on interpreting Expat errors.\n- exception xml.parsers.expat.errorÂ¶\nAlias for\nExpatError\n.\n- xml.parsers.expat.XMLParserTypeÂ¶\nThe type of the return values from the\nParserCreate()\nfunction.\nThe xml.parsers.expat\nmodule contains two functions:\n- xml.parsers.expat.ErrorString(errno)Â¶\nReturns an explanatory string for a given error number errno.\n- xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)Â¶\nCreates and returns a new\nxmlparser\nobject. encoding, if specified, must be a string naming the encoding used by the XML data. Expat doesnât support as many encodings as Python does, and its repertoire of encodings canât be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII. If encoding [1] is given it will override the implicit or explicit encoding of the document.Expat can optionally do XML namespace processing for you, enabled by providing a value for namespace_separator. The value must be a one-character string; a\nValueError\nwill be raised if the string has an illegal length (None\nis considered the same as omission). When namespace processing is"}
{"url": "https://docs.python.org/3/library/windows.html", "title": "", "text": "pickletools â Tools for pickle developers\npickletools\nmsvcrt â Useful routines from the MS VC++ runtime\nmsvcrt\nThis chapter describes modules that are only available on MS Windows platforms.\nwinreg\nwinsound"}
{"url": "https://docs.python.org/3/library/optparse.html", "title": "", "text": "optparse\nâ Parser for command line optionsÂ¶\nSource code: Lib/optparse.py\nChoosing an argument parsing libraryÂ¶\nThe standard library includes three argument parsing libraries:\ngetopt\n: a module that closely mirrors the procedural Cgetopt\nAPI. Included in the standard library since before the initial Python 1.0 release.optparse\n: a declarative replacement forgetopt\nthat provides equivalent functionality without requiring each application to implement its own procedural option parsing logic. Included in the standard library since the Python 2.3 release.argparse\n: a more opinionated alternative tooptparse\nthat provides more functionality by default, at the expense of reduced application flexibility in controlling exactly how arguments are processed. Included in the standard library since the Python 2.7 and Python 3.2 releases.\nIn the absence of more specific argument parsing design constraints, argparse\nis the recommended choice for implementing command line applications, as it offers\nthe highest level of baseline functionality with the least application level code.\ngetopt\nis retained almost entirely for backwards compatibility reasons.\nHowever, it also serves a niche use case as a tool for prototyping and testing\ncommand line argument handling in getopt\n-based C applications.\noptparse\nshould be considered as an alternative to argparse\nin the\nfollowing cases:\nan application is already using\noptparse\nand doesnât want to risk the subtle behavioural changes that may arise when migrating toargparse\nthe application requires additional control over the way options and positional parameters are interleaved on the command line (including the ability to disable the interleaving feature completely)\nthe application requires additional control over the incremental parsing of command line elements (while\nargparse\ndoes support this, the exact way it works in practice is undesirable for some use cases)the application requires additional control over the handling of options which acc"}
{"url": "https://docs.python.org/3/library/subprocess.html", "title": "", "text": "subprocess\nâ Subprocess managementÂ¶\nSource code: Lib/subprocess.py\nThe subprocess\nmodule allows you to spawn new processes, connect to their\ninput/output/error pipes, and obtain their return codes. This module intends to\nreplace several older modules and functions:\nos.system\nos.spawn*\nInformation about how the subprocess\nmodule can be used to replace these\nmodules and functions can be found in the following sections.\nSee also\nPEP 324 â PEP proposing the subprocess module\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nUsing the subprocess\nModuleÂ¶\nThe recommended approach to invoking subprocesses is to use the run()\nfunction for all use cases it can handle. For more advanced use cases, the\nunderlying Popen\ninterface can be used directly.\n- subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)Â¶\nRun the command described by args. Wait for command to complete, then return a\nCompletedProcess\ninstance.The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the use of keyword-only notation in the abbreviated signature). The full function signature is largely the same as that of the\nPopen\nconstructor - most of the arguments to this function are passed through to that interface. (timeout, input, check, and capture_output are not.)If capture_output is true, stdout and stderr will be captured. When used, the internal\nPopen\nobject is automatically created with stdout and stderr both set toPIPE\n. The stdout and stderr arguments may not be supplied at the same time as capture_output. If you wish to capture and combine both streams into one, set stdout toPIPE\nand stderr toSTDOUT\n, instead of using capture_output.A timeout may be specified in seconds, it is internally "}
{"url": "https://docs.python.org/3/library/secrets.html", "title": "", "text": "secrets\nâ Generate secure random numbers for managing secretsÂ¶\nAdded in version 3.6.\nSource code: Lib/secrets.py\nThe secrets\nmodule is used for generating cryptographically strong\nrandom numbers suitable for managing data such as passwords, account\nauthentication, security tokens, and related secrets.\nIn particular, secrets\nshould be used in preference to the\ndefault pseudo-random number generator in the random\nmodule, which\nis designed for modelling and simulation, not security or cryptography.\nSee also\nRandom numbersÂ¶\nThe secrets\nmodule provides access to the most secure source of\nrandomness that your operating system provides.\n- class secrets.SystemRandomÂ¶\nA class for generating random numbers using the highest-quality sources provided by the operating system. See\nrandom.SystemRandom\nfor additional details.\n- secrets.choice(seq)Â¶\nReturn a randomly chosen element from a non-empty sequence.\n- secrets.randbelow(exclusive_upper_bound)Â¶\nReturn a random int in the range [0, exclusive_upper_bound).\n- secrets.randbits(k)Â¶\nReturn a non-negative int with k random bits.\nGenerating tokensÂ¶\nThe secrets\nmodule provides functions for generating secure\ntokens, suitable for applications such as password resets,\nhard-to-guess URLs, and similar.\n- secrets.token_bytes([nbytes=None])Â¶\nReturn a random byte string containing nbytes number of bytes. If nbytes is\nNone\nor not supplied, a reasonable default is used.>>> token_bytes(16) b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'\n- secrets.token_hex([nbytes=None])Â¶\nReturn a random text string, in hexadecimal. The string has nbytes random bytes, each byte converted to two hex digits. If nbytes is\nNone\nor not supplied, a reasonable default is used.>>> token_hex(16) 'f9bf78b9a18ce6d46a0cd2b0b86df9da'\n- secrets.token_urlsafe([nbytes=None])Â¶\nReturn a random URL-safe text string, containing nbytes random bytes. The text is Base64 encoded, so on average each byte results in approximately 1.3 characters. If nbytes is\nNone\nor not supplie"}
{"url": "https://docs.python.org/3/library/i18n.html", "title": "", "text": "InternationalizationÂ¶\nThe modules described in this chapter help you write software that is independent of language and locale by providing mechanisms for selecting a language to be used in program messages or by tailoring output to match local conventions.\nThe list of modules described in this chapter is:"}
{"url": "https://docs.python.org/3/library/removed.html", "title": "", "text": "Removed ModulesÂ¶\nThe modules described in this chapter have been removed from the Python standard library. They are documented here to help people find replacements.\naifc\nâ Read and write AIFF and AIFC filesasynchat\nâ Asynchronous socket command/response handlerasyncore\nâ Asynchronous socket handleraudioop\nâ Manipulate raw audio datacgi\nâ Common Gateway Interface supportcgitb\nâ Traceback manager for CGI scriptschunk\nâ Read IFF chunked datacrypt\nâ Function to check Unix passwordsdistutils\nâ Building and installing Python modulesimghdr\nâ Determine the type of an imageimp\nâ Access the import internalsmailcap\nâ Mailcap file handlingmsilib\nâ Read and write Microsoft Installer filesnis\nâ Interface to Sunâs NIS (Yellow Pages)nntplib\nâ NNTP protocol clientossaudiodev\nâ Access to OSS-compatible audio devicespipes\nâ Interface to shell pipelinessmtpd\nâ SMTP Serversndhdr\nâ Determine type of sound filespwd\nâ The shadow password databasesunau\nâ Read and write Sun AU filestelnetlib\nâ Telnet clientuu\nâ Encode and decode uuencode filesxdrlib\nâ Encode and decode XDR data"}
{"url": "https://docs.python.org/3/library/tty.html", "title": "", "text": "tty\nâ Terminal control functionsÂ¶\nSource code: Lib/tty.py\nThe tty\nmodule defines functions for putting the tty into cbreak and raw\nmodes.\nAvailability: Unix.\nBecause it requires the termios\nmodule, it will work only on Unix.\nThe tty\nmodule defines the following functions:\n- tty.cfmakeraw(mode)Â¶\nConvert the tty attribute list mode, which is a list like the one returned by\ntermios.tcgetattr()\n, to that of a tty in raw mode.Added in version 3.12.\n- tty.cfmakecbreak(mode)Â¶\nConvert the tty attribute list mode, which is a list like the one returned by\ntermios.tcgetattr()\n, to that of a tty in cbreak mode.This clears the\nECHO\nandICANON\nlocal mode flags in mode as well as setting the minimum input to 1 byte with no delay.Added in version 3.12.\nChanged in version 3.12.2: The\nICRNL\nflag is no longer cleared. This matches Linux and macOSstty cbreak\nbehavior and whatsetcbreak()\nhistorically did.\n- tty.setraw(fd, when=termios.TCSAFLUSH)Â¶\nChange the mode of the file descriptor fd to raw. If when is omitted, it defaults to\ntermios.TCSAFLUSH\n, and is passed totermios.tcsetattr()\n. The return value oftermios.tcgetattr()\nis saved before setting fd to raw mode; this value is returned.Changed in version 3.12: The return value is now the original tty attributes, instead of\nNone\n.\n- tty.setcbreak(fd, when=termios.TCSAFLUSH)Â¶\nChange the mode of file descriptor fd to cbreak. If when is omitted, it defaults to\ntermios.TCSAFLUSH\n, and is passed totermios.tcsetattr()\n. The return value oftermios.tcgetattr()\nis saved before setting fd to cbreak mode; this value is returned.This clears the\nECHO\nandICANON\nlocal mode flags as well as setting the minimum input to 1 byte with no delay.Changed in version 3.12: The return value is now the original tty attributes, instead of\nNone\n.Changed in version 3.12.2: The\nICRNL\nflag is no longer cleared. This restores the behavior of Python 3.11 and earlier as well as matching what Linux, macOS, & BSDs describe in theirstty(1)\nman pages regarding cbreak mod"}
{"url": "https://docs.python.org/3/library/pkgutil.html", "title": "", "text": "pkgutil\nâ Package extension utilityÂ¶\nSource code: Lib/pkgutil.py\nThis module provides utilities for the import system, in particular package support.\n- class pkgutil.ModuleInfo(module_finder, name, ispkg)Â¶\nA namedtuple that holds a brief summary of a moduleâs info.\nAdded in version 3.6.\n- pkgutil.extend_path(path, name)Â¶\nExtend the search path for the modules which comprise a package. Intended use is to place the following code in a packageâs\n__init__.py\n:from pkgutil import extend_path __path__ = extend_path(__path__, __name__)\nFor each directory on\nsys.path\nthat has a subdirectory that matches the package name, add the subdirectory to the packageâs__path__\n. This is useful if one wants to distribute different parts of a single logical package as multiple directories.It also looks for\n*.pkg\nfiles beginning where*\nmatches the name argument. This feature is similar to*.pth\nfiles (see thesite\nmodule for more information), except that it doesnât special-case lines starting withimport\n. A*.pkg\nfile is trusted at face value: apart from skipping blank lines and ignoring comments, all entries found in a*.pkg\nfile are added to the path, regardless of whether they exist on the filesystem (this is a feature).If the input path is not a list (as is the case for frozen packages) it is returned unchanged. The input path is not modified; an extended copy is returned. Items are only appended to the copy at the end.\nIt is assumed that\nsys.path\nis a sequence. Items ofsys.path\nthat are not strings referring to existing directories are ignored. Unicode items onsys.path\nthat cause errors when used as filenames may cause this function to raise an exception (in line withos.path.isdir()\nbehavior).\n- pkgutil.find_loader(fullname)Â¶\nRetrieve a module loader for the given fullname.\nThis is a backwards compatibility wrapper around\nimportlib.util.find_spec()\nthat converts most failures toImportError\nand only returns the loader rather than the fullimportlib.machinery.ModuleSpec\n.Changed in ve"}
{"url": "https://docs.python.org/3/library/concurrent.futures.html", "title": "", "text": "concurrent.futures\nâ Launching parallel tasksÂ¶\nAdded in version 3.2.\nSource code: Lib/concurrent/futures/thread.py and Lib/concurrent/futures/process.py\nThe concurrent.futures\nmodule provides a high-level interface for\nasynchronously executing callables.\nThe asynchronous execution can be performed with threads, using\nThreadPoolExecutor\n, or separate processes, using\nProcessPoolExecutor\n. Both implement the same interface, which is\ndefined by the abstract Executor\nclass.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nExecutor ObjectsÂ¶\n- class concurrent.futures.ExecutorÂ¶\nAn abstract class that provides methods to execute calls asynchronously. It should not be used directly, but through its concrete subclasses.\n- submit(fn, /, *args, **kwargs)Â¶\nSchedules the callable, fn, to be executed as\nfn(*args, **kwargs)\nand returns aFuture\nobject representing the execution of the callable.with ThreadPoolExecutor(max_workers=1) as executor: future = executor.submit(pow, 323, 1235) print(future.result())\n- map(fn, *iterables, timeout=None, chunksize=1)Â¶\nSimilar to\nmap(fn, *iterables)\nexcept:the iterables are collected immediately rather than lazily;\nfn is executed asynchronously and several calls to fn may be made concurrently.\nThe returned iterator raises a\nTimeoutError\nif__next__()\nis called and the result isnât available after timeout seconds from the original call toExecutor.map()\n. timeout can be an int or a float. If timeout is not specified orNone\n, there is no limit to the wait time.If a fn call raises an exception, then that exception will be raised when its value is retrieved from the iterator.\nWhen using\nProcessPoolExecutor\n, this method chops iterables into a number of chunks which it submits to the pool as separate tasks. The (approximate) size of these chunks can be specified by setting chunksize to a positive integer. For very long iterables, using a large value for chunksize"}
{"url": "https://docs.python.org/3/library/pickle.html", "title": "", "text": "pickle\nâ Python object serializationÂ¶\nSource code: Lib/pickle.py\nThe pickle\nmodule implements binary protocols for serializing and\nde-serializing a Python object structure. âPicklingâ is the process\nwhereby a Python object hierarchy is converted into a byte stream, and\nâunpicklingâ is the inverse operation, whereby a byte stream\n(from a binary file or bytes-like object) is converted\nback into an object hierarchy. Pickling (and unpickling) is alternatively\nknown as âserializationâ, âmarshalling,â [1] or âflatteningâ; however, to\navoid confusion, the terms used here are âpicklingâ and âunpicklingâ.\nWarning\nThe pickle\nmodule is not secure. Only unpickle data you trust.\nIt is possible to construct malicious pickle data which will execute arbitrary code during unpickling. Never unpickle data that could have come from an untrusted source, or that could have been tampered with.\nConsider signing data with hmac\nif you need to ensure that it has not\nbeen tampered with.\nSafer serialization formats such as json\nmay be more appropriate if\nyou are processing untrusted data. See Comparison with json.\nRelationship to other Python modulesÂ¶\nComparison with marshal\nÂ¶\nPython has a more primitive serialization module called marshal\n, but in\ngeneral pickle\nshould always be the preferred way to serialize Python\nobjects. marshal\nexists primarily to support Pythonâs .pyc\nfiles.\nThe pickle\nmodule differs from marshal\nin several significant ways:\nThe\npickle\nmodule keeps track of the objects it has already serialized, so that later references to the same object wonât be serialized again.marshal\ndoesnât do this.This has implications both for recursive objects and object sharing. Recursive objects are objects that contain references to themselves. These are not handled by marshal, and in fact, attempting to marshal recursive objects will crash your Python interpreter. Object sharing happens when there are multiple references to the same object in different places in the object hierarchy being"}
{"url": "https://docs.python.org/3/library/atexit.html", "title": "", "text": "atexit\nâ Exit handlersÂ¶\nThe atexit\nmodule defines functions to register and unregister cleanup\nfunctions. Functions thus registered are automatically executed upon normal\ninterpreter termination. atexit\nruns these functions in the reverse\norder in which they were registered; if you register A\n, B\n, and C\n,\nat interpreter termination time they will be run in the order C\n, B\n,\nA\n.\nNote: The functions registered via this module are not called when the\nprogram is killed by a signal not handled by Python, when a Python fatal\ninternal error is detected, or when os._exit()\nis called.\nNote: The effect of registering or unregistering functions from within a cleanup function is undefined.\nChanged in version 3.7: When used with C-API subinterpreters, registered functions are local to the interpreter they were registered in.\n- atexit.register(func, *args, **kwargs)Â¶\nRegister func as a function to be executed at termination. Any optional arguments that are to be passed to func must be passed as arguments to\nregister()\n. It is possible to register the same function and arguments more than once.At normal program termination (for instance, if\nsys.exit()\nis called or the main moduleâs execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.If an exception is raised during execution of the exit handlers, a traceback is printed (unless\nSystemExit\nis raised) and the exception information is saved. After all exit handlers have had a chance to run, the last exception to be raised is re-raised.This function returns func, which makes it possible to use it as a decorator.\nWarning\nStarting new threads or calling\nos.fork()\nfrom a registered function can lead to race condition between the main Python runtime thread freeing thread states while internalthreading\nroutines or the new process try to use that state. This can lead to crash"}
{"url": "https://docs.python.org/3/library/pdb.html", "title": "", "text": "pdb\nâ The Python DebuggerÂ¶\nSource code: Lib/pdb.py\nThe module pdb\ndefines an interactive source code debugger for Python\nprograms. It supports setting (conditional) breakpoints and single stepping at\nthe source line level, inspection of stack frames, source code listing, and\nevaluation of arbitrary Python code in the context of any stack frame. It also\nsupports post-mortem debugging and can be called under program control.\nThe debugger is extensible â it is actually defined as the class Pdb\n.\nThis is currently undocumented but easily understood by reading the source. The\nextension interface uses the modules bdb\nand cmd\n.\nSee also\n- Module\nfaulthandler\nUsed to dump Python tracebacks explicitly, on a fault, after a timeout, or on a user signal.\n- Module\ntraceback\nStandard interface to extract, format and print stack traces of Python programs.\nThe typical usage to break into the debugger is to insert:\nimport pdb; pdb.set_trace()\nOr:\nbreakpoint()\nat the location you want to break into the debugger, and then run the program.\nYou can then step through the code following this statement, and continue\nrunning without the debugger using the continue\ncommand.\nChanged in version 3.7: The built-in breakpoint()\n, when called with defaults, can be used\ninstead of import pdb; pdb.set_trace()\n.\ndef double(x):\nbreakpoint()\nreturn x * 2\nval = 3\nprint(f\"{val} * 2 is {double(val)}\")\nThe debuggerâs prompt is (Pdb)\n, which is the indicator that you are in debug mode:\n> ...(2)double()\n-> breakpoint()\n(Pdb) p x\n3\n(Pdb) continue\n3 * 2 is 6\nChanged in version 3.3: Tab-completion via the readline\nmodule is available for commands and\ncommand arguments, e.g. the current global and local names are offered as\narguments of the p\ncommand.\nYou can also invoke pdb\nfrom the command line to debug other scripts. For\nexample:\npython -m pdb [-c command] (-m module | pyfile) [args ...]\nWhen invoked as a module, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormall"}
{"url": "https://docs.python.org/3/library/urllib.request.html", "title": "", "text": "urllib.request\nâ Extensible library for opening URLsÂ¶\nSource code: Lib/urllib/request.py\nThe urllib.request\nmodule defines functions and classes which help in\nopening URLs (mostly HTTP) in a complex world â basic and digest\nauthentication, redirections, cookies and more.\nSee also\nThe Requests package is recommended for a higher-level HTTP client interface.\nWarning\nOn macOS it is unsafe to use this module in programs using\nos.fork()\nbecause the getproxies()\nimplementation for\nmacOS uses a higher-level system API. Set the environment variable\nno_proxy\nto *\nto avoid this problem\n(e.g. os.environ[\"no_proxy\"] = \"*\"\n).\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe urllib.request\nmodule defines the following functions:\n- urllib.request.urlopen(url, data=None, [timeout, ]*, context=None)Â¶\nOpen url, which can be either a string containing a valid, properly encoded URL, or a\nRequest\nobject.data must be an object specifying additional data to be sent to the server, or\nNone\nif no such data is needed. SeeRequest\nfor details.urllib.request module uses HTTP/1.1 and includes\nConnection:close\nheader in its HTTP requests.The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). This actually only works for HTTP, HTTPS and FTP connections.\nIf context is specified, it must be a\nssl.SSLContext\ninstance describing the various SSL options. SeeHTTPSConnection\nfor more details.This function always returns an object which can work as a context manager and has the properties url, headers, and status. See\nurllib.response.addinfourl\nfor more detail on these properties.For HTTP and HTTPS URLs, this function returns a\nhttp.client.HTTPResponse\nobject slightly modified. In addition to the three new methods above, the msg attribute contains the same information as thereason\nattribute "}
{"url": "https://docs.python.org/3/library/site.html", "title": "", "text": "site\nâ Site-specific configuration hookÂ¶\nSource code: Lib/site.py\nThis module is automatically imported during initialization. The automatic\nimport can be suppressed using the interpreterâs -S\noption.\nImporting this module normally appends site-specific paths to the module search path\nand adds callables, including help()\nto the built-in\nnamespace. However, Python startup option -S\nblocks this and this module\ncan be safely imported with no automatic modifications to the module search path\nor additions to the builtins. To explicitly trigger the usual site-specific\nadditions, call the main()\nfunction.\nChanged in version 3.3: Importing the module used to trigger paths manipulation even when using\n-S\n.\nIt starts by constructing up to four directories from a head and a tail part.\nFor the head part, it uses sys.prefix\nand sys.exec_prefix\n; empty heads\nare skipped. For the tail part, it uses the empty string and then\nlib/site-packages\n(on Windows) or\nlib/pythonX.Y[t]/site-packages\n(on Unix and macOS). (The\noptional suffix âtâ indicates the free threading build, and is\nappended if \"t\"\nis present in the sys.abiflags\nconstant.)\nFor each\nof the distinct head-tail combinations, it sees if it refers to an existing\ndirectory, and if so, adds it to sys.path\nand also inspects the newly\nadded path for configuration files.\nChanged in version 3.5: Support for the âsite-pythonâ directory has been removed.\nChanged in version 3.13: On Unix, Free threading Python installations are\nidentified by the âtâ suffix in the version-specific directory name, such as\nlib/python3.13t/\n.\nIf a file named âpyvenv.cfgâ exists one directory above sys.executable, sys.prefix and sys.exec_prefix are set to that directory and it is also checked for site-packages (sys.base_prefix and sys.base_exec_prefix will always be the ârealâ prefixes of the Python installation). If âpyvenv.cfgâ (a bootstrap configuration file) contains the key âinclude-system-site-packagesâ set to anything other than âtrueâ (case-insensit"}
{"url": "https://docs.python.org/3/library/ipc.html", "title": "", "text": "Networking and Interprocess CommunicationÂ¶\nThe modules described in this chapter provide mechanisms for networking and inter-processes communication.\nSome modules only work for two processes that are on the same machine, e.g.\nsignal\nand mmap\n. Other modules support networking protocols\nthat two or more processes can use to communicate across machines.\nThe list of modules described in this chapter is:"}
{"url": "https://docs.python.org/3/library/sys.html", "title": "", "text": "sys\nâ System-specific parameters and functionsÂ¶\nThis module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available. Unless explicitly noted otherwise, all variables are read-only.\n- sys.abiflagsÂ¶\nOn POSIX systems where Python was built with the standard\nconfigure\nscript, this contains the ABI flags as specified by PEP 3149.Added in version 3.2.\nChanged in version 3.8: Default flags became an empty string (\nm\nflag for pymalloc has been removed).Availability: Unix.\n- sys.addaudithook(hook)Â¶\nAppend the callable hook to the list of active auditing hooks for the current (sub)interpreter.\nWhen an auditing event is raised through the\nsys.audit()\nfunction, each hook will be called in the order it was added with the event name and the tuple of arguments. Native hooks added byPySys_AddAuditHook()\nare called first, followed by hooks added in the current (sub)interpreter. Hooks can then log the event, raise an exception to abort the operation, or terminate the process entirely.Note that audit hooks are primarily for collecting information about internal or otherwise unobservable actions, whether by Python or libraries written in Python. They are not suitable for implementing a âsandboxâ. In particular, malicious code can trivially disable or bypass hooks added using this function. At a minimum, any security-sensitive hooks must be added using the C API\nPySys_AddAuditHook()\nbefore initialising the runtime, and any modules allowing arbitrary memory modification (such asctypes\n) should be completely removed or closely monitored.Calling\nsys.addaudithook()\nwill itself raise an auditing event namedsys.addaudithook\nwith no arguments. If any existing hooks raise an exception derived fromRuntimeError\n, the new hook will not be added and the exception suppressed. As a result, callers cannot assume that their hook has been added unless they control all existing hooks.See the audit even"}
{"url": "https://docs.python.org/3/library/unix.html", "title": "", "text": "Unix-specific servicesÂ¶\nThe modules described in this chapter provide interfaces to features that are unique to the Unix operating system, or in some cases to some or many variants of it. Hereâs an overview:\nshlex\nâ Simple lexical analysisposix\nâ The most common POSIX system callspwd\nâ The password databasegrp\nâ The group databasetermios\nâ POSIX style tty controltty\nâ Terminal control functionspty\nâ Pseudo-terminal utilitiesfcntl\nâ Thefcntl\nandioctl\nsystem callsresource\nâ Resource usage informationsyslog\nâ Unix syslog library routines"}
{"url": "https://docs.python.org/3/library/difflib.html", "title": "", "text": "difflib\nâ Helpers for computing deltasÂ¶\nSource code: Lib/difflib.py\nThis module provides classes and functions for comparing sequences. It\ncan be used for example, for comparing files, and can produce information\nabout file differences in various formats, including HTML and context and unified\ndiffs. For comparing directories and files, see also, the filecmp\nmodule.\n- class difflib.SequenceMatcher\nThis is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable. The basic algorithm predates, and is a little fancier than, an algorithm published in the late 1980âs by Ratcliff and Obershelp under the hyperbolic name âgestalt pattern matching.â The idea is to find the longest contiguous matching subsequence that contains no âjunkâ elements; these âjunkâ elements are ones that are uninteresting in some sense, such as blank lines or whitespace. (Handling junk is an extension to the Ratcliff and Obershelp algorithm.) The same idea is then applied recursively to the pieces of the sequences to the left and to the right of the matching subsequence. This does not yield minimal edit sequences, but does tend to yield matches that âlook rightâ to people.\nTiming: The basic Ratcliff-Obershelp algorithm is cubic time in the worst case and quadratic time in the expected case.\nSequenceMatcher\nis quadratic time for the worst case and has expected-case behavior dependent in a complicated way on how many elements the sequences have in common; best case time is linear.Automatic junk heuristic:\nSequenceMatcher\nsupports a heuristic that automatically treats certain sequence items as junk. The heuristic counts how many times each individual item appears in the sequence. If an itemâs duplicates (after the first one) account for more than 1% of the sequence and the sequence is at least 200 items long, this item is marked as âpopularâ and is treated as junk for the purpose of sequence matching. This heuristic can be turned off by setting thea"}
{"url": "https://docs.python.org/3/library/modulefinder.html", "title": "", "text": "modulefinder\nâ Find modules used by a scriptÂ¶\nSource code: Lib/modulefinder.py\nThis module provides a ModuleFinder\nclass that can be used to determine\nthe set of modules imported by a script. modulefinder.py\ncan also be run as\na script, giving the filename of a Python script as its argument, after which a\nreport of the imported modules will be printed.\n- modulefinder.AddPackagePath(pkg_name, path)Â¶\nRecord that the package named pkg_name can be found in the specified path.\n- modulefinder.ReplacePackage(oldname, newname)Â¶\nAllows specifying that the module named oldname is in fact the package named newname.\n- class modulefinder.ModuleFinder(path=None, debug=0, excludes=[], replace_paths=[])Â¶\nThis class provides\nrun_script()\nandreport()\nmethods to determine the set of modules imported by a script. path can be a list of directories to search for modules; if not specified,sys.path\nis used. debug sets the debugging level; higher values make the class print debugging messages about what itâs doing. excludes is a list of module names to exclude from the analysis. replace_paths is a list of(oldpath, newpath)\ntuples that will be replaced in module paths.- report()Â¶\nPrint a report to standard output that lists the modules imported by the script and their paths, as well as modules that are missing or seem to be missing.\n- run_script(pathname)Â¶\nAnalyze the contents of the pathname file, which must contain Python code.\n- modulesÂ¶\nA dictionary mapping module names to modules. See Example usage of ModuleFinder.\nExample usage of ModuleFinder\nÂ¶\nThe script that is going to get analyzed later on (bacon.py):\nimport re, itertools\ntry:\nimport baconhameggs\nexcept ImportError:\npass\ntry:\nimport guido.python.ham\nexcept ImportError:\npass\nThe script that will output the report of bacon.py:\nfrom modulefinder import ModuleFinder\nfinder = ModuleFinder()\nfinder.run_script('bacon.py')\nprint('Loaded modules:')\nfor name, mod in finder.modules.items():\nprint('%s: ' % name, end='')\nprint(','.join"}
{"url": "https://docs.python.org/3/library/resource.html", "title": "", "text": "resource\nâ Resource usage informationÂ¶\nThis module provides basic mechanisms for measuring and controlling system resources utilized by a program.\nAvailability: Unix, not WASI.\nSymbolic constants are used to specify particular system resources and to request usage information about either the current process or its children.\nAn OSError\nis raised on syscall failure.\nResource LimitsÂ¶\nResources usage can be limited using the setrlimit()\nfunction described\nbelow. Each resource is controlled by a pair of limits: a soft limit and a hard\nlimit. The soft limit is the current limit, and may be lowered or raised by a\nprocess over time. The soft limit can never exceed the hard limit. The hard\nlimit can be lowered to any value greater than the soft limit, but not raised.\n(Only processes with the effective UID of the super-user can raise a hard\nlimit.)\nThe specific resources that can be limited are system dependent. They are described in the getrlimit(2) man page. The resources listed below are supported when the underlying operating system supports them; resources which cannot be checked or controlled by the operating system are not defined in this module for those platforms.\n- resource.RLIM_INFINITYÂ¶\nConstant used to represent the limit for an unlimited resource.\n- resource.getrlimit(resource)Â¶\nReturns a tuple\n(soft, hard)\nwith the current soft and hard limits of resource. RaisesValueError\nif an invalid resource is specified, orerror\nif the underlying system call fails unexpectedly.\n- resource.setrlimit(resource, limits)Â¶\nSets new limits of consumption of resource. The limits argument must be a tuple\n(soft, hard)\nof two integers describing the new limits. A value ofRLIM_INFINITY\ncan be used to request a limit that is unlimited.Raises\nValueError\nif an invalid resource is specified, if the new soft limit exceeds the hard limit, or if a process tries to raise its hard limit. Specifying a limit ofRLIM_INFINITY\nwhen the hard or system limit for that resource is not unlimited w"}
{"url": "https://docs.python.org/3/library/urllib.error.html", "title": "", "text": "urllib.error\nâ Exception classes raised by urllib.requestÂ¶\nSource code: Lib/urllib/error.py\nThe urllib.error\nmodule defines the exception classes for exceptions\nraised by urllib.request\n. The base exception class is URLError\n.\nThe following exceptions are raised by urllib.error\nas appropriate:\n- exception urllib.error.URLErrorÂ¶\nThe handlers raise this exception (or derived exceptions) when they run into a problem. It is a subclass of\nOSError\n.- reasonÂ¶\nThe reason for this error. It can be a message string or another exception instance.\n- exception urllib.error.HTTPError(url, code, msg, hdrs, fp)Â¶\nThough being an exception (a subclass of\nURLError\n), anHTTPError\ncan also function as a non-exceptional file-like return value (the same thing thaturlopen()\nreturns). This is useful when handling exotic HTTP errors, such as requests for authentication.- urlÂ¶\nContains the request URL. An alias for filename attribute.\n- codeÂ¶\nAn HTTP status code as defined in RFC 2616. This numeric value corresponds to a value found in the dictionary of codes as found in\nhttp.server.BaseHTTPRequestHandler.responses\n.\n- reasonÂ¶\nThis is usually a string explaining the reason for this error. An alias for msg attribute.\n- headersÂ¶\nThe HTTP response headers for the HTTP request that caused the\nHTTPError\n. An alias for hdrs attribute.Added in version 3.4.\n- fpÂ¶\nA file-like object where the HTTP error body can be read from.\n- exception urllib.error.ContentTooShortError(msg, content)Â¶\nThis exception is raised when the\nurlretrieve()\nfunction detects that the amount of the downloaded data is less than the expected amount (given by the Content-Length header).- contentÂ¶\nThe downloaded (and supposedly truncated) data."}
{"url": "https://docs.python.org/3/library/logging.config.html", "title": "", "text": "logging.config\nâ Logging configurationÂ¶\nSource code: Lib/logging/config.py\nThis section describes the API for configuring the logging module.\nConfiguration functionsÂ¶\nThe following functions configure the logging module. They are located in the\nlogging.config\nmodule. Their use is optional â you can configure the\nlogging module using these functions or by making calls to the main API (defined\nin logging\nitself) and defining handlers which are declared either in\nlogging\nor logging.handlers\n.\n- logging.config.dictConfig(config)Â¶\nTakes the logging configuration from a dictionary. The contents of this dictionary are described in Configuration dictionary schema below.\nIf an error is encountered during configuration, this function will raise a\nValueError\n,TypeError\n,AttributeError\norImportError\nwith a suitably descriptive message. The following is a (possibly incomplete) list of conditions which will raise an error:A\nlevel\nwhich is not a string or which is a string not corresponding to an actual logging level.A\npropagate\nvalue which is not a boolean.An id which does not have a corresponding destination.\nA non-existent handler id found during an incremental call.\nAn invalid logger name.\nInability to resolve to an internal or external object.\nParsing is performed by the\nDictConfigurator\nclass, whose constructor is passed the dictionary used for configuration, and has aconfigure()\nmethod. Thelogging.config\nmodule has a callable attributedictConfigClass\nwhich is initially set toDictConfigurator\n. You can replace the value ofdictConfigClass\nwith a suitable implementation of your own.dictConfig()\ncallsdictConfigClass\npassing the specified dictionary, and then calls theconfigure()\nmethod on the returned object to put the configuration into effect:def dictConfig(config): dictConfigClass(config).configure()\nFor example, a subclass of\nDictConfigurator\ncould callDictConfigurator.__init__()\nin its own__init__()\n, then set up custom prefixes which would be usable in the subsequentco"}
{"url": "https://docs.python.org/3/library/codeop.html", "title": "", "text": "codeop\nâ Compile Python codeÂ¶\nSource code: Lib/codeop.py\nThe codeop\nmodule provides utilities upon which the Python\nread-eval-print loop can be emulated, as is done in the code\nmodule. As\na result, you probably donât want to use the module directly; if you want to\ninclude such a loop in your program you probably want to use the code\nmodule instead.\nThere are two parts to this job:\nBeing able to tell if a line of input completes a Python statement: in short, telling whether to print â\n>>>\nâ or â...\nâ next.Remembering which future statements the user has entered, so subsequent input can be compiled with these in effect.\nThe codeop\nmodule provides a way of doing each of these things, and a way\nof doing them both.\nTo do just the former:\n- codeop.compile_command(source, filename='<input>', symbol='single')Â¶\nTries to compile source, which should be a string of Python code and return a code object if source is valid Python code. In that case, the filename attribute of the code object will be filename, which defaults to\n'<input>'\n. ReturnsNone\nif source is not valid Python code, but is a prefix of valid Python code.If there is a problem with source, an exception will be raised.\nSyntaxError\nis raised if there is invalid Python syntax, andOverflowError\norValueError\nif there is an invalid literal.The symbol argument determines whether source is compiled as a statement (\n'single'\n, the default), as a sequence of statement ('exec'\n) or as an expression ('eval'\n). Any other value will causeValueError\nto be raised.Note\nIt is possible (but not likely) that the parser stops parsing with a successful outcome before reaching the end of the source; in this case, trailing symbols may be ignored instead of causing an error. For example, a backslash followed by two newlines may be followed by arbitrary garbage. This will be fixed once the API for the parser is better.\n- class codeop.CompileÂ¶\nInstances of this class have\n__call__()\nmethods identical in signature to the built-in function"}
{"url": "https://docs.python.org/3/library/zlib.html", "title": "", "text": "zlib\nâ Compression compatible with gzipÂ¶\nFor applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at https://www.zlib.net. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a security vulnerability, so we recommend using 1.1.4 or later.\nzlibâs functions have many options and often need to be used in a particular order. This documentation doesnât attempt to cover all of the permutations; consult the zlib manual at http://www.zlib.net/manual.html for authoritative information.\nFor reading and writing .gz\nfiles see the gzip\nmodule.\nThe available exception and functions in this module are:\n- exception zlib.errorÂ¶\nException raised on compression and decompression errors.\n- zlib.adler32(data[, value])Â¶\nComputes an Adler-32 checksum of data. (An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.) The result is an unsigned 32-bit integer. If value is present, it is used as the starting value of the checksum; otherwise, a default value of 1 is used. Passing in value allows computing a running checksum over the concatenation of several inputs. The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.\nChanged in version 3.0: The result is always unsigned.\n- zlib.compress(data, /, level=-1, wbits=MAX_WBITS)Â¶\nCompresses the bytes in data, returning a bytes object containing compressed data. level is an integer from\n0\nto9\nor-1\ncontrolling the level of compression;1\n(Z_BEST_SPEED) is fastest and produces the least compression,9\n(Z_BEST_COMPRESSION) is slowest and produces the most.0\n(Z_NO_COMPRESSION) is no compression. The default value is-1\n(Z_DEFAULT_COMPRESSION). Z_DEFAULT_"}
{"url": "https://docs.python.org/3/library/xml.dom.pulldom.html", "title": "", "text": "xml.dom.pulldom\nâ Support for building partial DOM treesÂ¶\nSource code: Lib/xml/dom/pulldom.py\nThe xml.dom.pulldom\nmodule provides a âpull parserâ which can also be\nasked to produce DOM-accessible fragments of the document where necessary. The\nbasic concept involves pulling âeventsâ from a stream of incoming XML and\nprocessing them. In contrast to SAX which also employs an event-driven\nprocessing model together with callbacks, the user of a pull parser is\nresponsible for explicitly pulling events from the stream, looping over those\nevents until either processing is finished or an error condition occurs.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nChanged in version 3.7.1: The SAX parser no longer processes general external entities by default to increase security by default. To enable processing of external entities, pass a custom parser instance in:\nfrom xml.dom.pulldom import parse\nfrom xml.sax import make_parser\nfrom xml.sax.handler import feature_external_ges\nparser = make_parser()\nparser.setFeature(feature_external_ges, True)\nparse(filename, parser=parser)\nExample:\nfrom xml.dom import pulldom\ndoc = pulldom.parse('sales_items.xml')\nfor event, node in doc:\nif event == pulldom.START_ELEMENT and node.tagName == 'item':\nif int(node.getAttribute('price')) > 50:\ndoc.expandNode(node)\nprint(node.toxml())\nevent\nis a constant and can be one of:\nSTART_ELEMENT\nEND_ELEMENT\nCOMMENT\nSTART_DOCUMENT\nEND_DOCUMENT\nCHARACTERS\nPROCESSING_INSTRUCTION\nIGNORABLE_WHITESPACE\nnode\nis an object of type xml.dom.minidom.Document\n,\nxml.dom.minidom.Element\nor xml.dom.minidom.Text\n.\nSince the document is treated as a âflatâ stream of events, the document âtreeâ\nis implicitly traversed and the desired elements are found regardless of their\ndepth in the tree. In other words, one does not need to consider hierarchical\nissues such as recursive searching of the document nodes, although if the\ncontext of elements were important, one would either need to maintain som"}
{"url": "https://docs.python.org/3/library/http.cookies.html", "title": "", "text": "http.cookies\nâ HTTP state managementÂ¶\nSource code: Lib/http/cookies.py\nThe http.cookies\nmodule defines classes for abstracting the concept of\ncookies, an HTTP state management mechanism. It supports both simple string-only\ncookies, and provides an abstraction for having any serializable data-type as\ncookie value.\nThe module formerly strictly applied the parsing rules described in the RFC 2109 and RFC 2068 specifications. It has since been discovered that MSIE 3.0x didnât follow the character rules outlined in those specs; many current-day browsers and servers have also relaxed parsing rules when it comes to cookie handling. As a result, this module now uses parsing rules that are a bit less strict than they once were.\nThe character set, string.ascii_letters\n, string.digits\nand\n!#$%&'*+-.^_`|~:\ndenote the set of valid characters allowed by this module\nin a cookie name (as key\n).\nChanged in version 3.3: Allowed â:â as a valid cookie name character.\nNote\nOn encountering an invalid cookie, CookieError\nis raised, so if your\ncookie data comes from a browser you should always prepare for invalid data\nand catch CookieError\non parsing.\n- exception http.cookies.CookieErrorÂ¶\nException failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc.\n- class http.cookies.BaseCookie([input])Â¶\nThis class is a dictionary-like object whose keys are strings and whose values are\nMorsel\ninstances. Note that upon setting a key to a value, the value is first converted to aMorsel\ncontaining the key and the value.If input is given, it is passed to the\nload()\nmethod.\n- class http.cookies.SimpleCookie([input])Â¶\nThis class derives from\nBaseCookie\nand overridesvalue_decode()\nandvalue_encode()\n.SimpleCookie\nsupports strings as cookie values. When setting the value,SimpleCookie\ncalls the builtinstr()\nto convert the value to a string. Values received from HTTP are kept as strings.\nSee also\n- Module\nhttp.cookiejar\nHTTP cookie handling for web clients. The\nhttp.co"}
{"url": "https://docs.python.org/3/library/tabnanny.html", "title": "", "text": "tabnanny\nâ Detection of ambiguous indentationÂ¶\nSource code: Lib/tabnanny.py\nFor the time being this module is intended to be called as a script. However it\nis possible to import it into an IDE and use the function check()\ndescribed below.\nNote\nThe API provided by this module is likely to change in future releases; such changes may not be backward compatible.\n- tabnanny.check(file_or_dir)Â¶\nIf file_or_dir is a directory and not a symbolic link, then recursively descend the directory tree named by file_or_dir, checking all\n.py\nfiles along the way. If file_or_dir is an ordinary Python source file, it is checked for whitespace related problems. The diagnostic messages are written to standard output using theprint()\nfunction.\n- tabnanny.verboseÂ¶\nFlag indicating whether to print verbose messages. This is incremented by the\n-v\noption if called as a script.\n- tabnanny.filename_onlyÂ¶\nFlag indicating whether to print only the filenames of files containing whitespace related problems. This is set to true by the\n-q\noption if called as a script.\n- exception tabnanny.NannyNagÂ¶\nRaised by\nprocess_tokens()\nif detecting an ambiguous indent. Captured and handled incheck()\n.\n- tabnanny.process_tokens(tokens)Â¶\nThis function is used by\ncheck()\nto process tokens generated by thetokenize\nmodule.\nSee also\n- Module\ntokenize\nLexical scanner for Python source code."}
{"url": "https://docs.python.org/3/library/rlcompleter.html", "title": "", "text": "rlcompleter\nâ Completion function for GNU readlineÂ¶\nSource code: Lib/rlcompleter.py\nThe rlcompleter\nmodule defines a completion function suitable to be\npassed to set_completer()\nin the readline\nmodule.\nWhen this module is imported on a Unix platform with the readline\nmodule\navailable, an instance of the Completer\nclass is automatically created\nand its complete()\nmethod is set as the\nreadline completer. The method provides\ncompletion of valid Python identifiers and keywords.\nExample:\n>>> import rlcompleter\n>>> import readline\n>>> readline.parse_and_bind(\"tab: complete\")\n>>> readline. <TAB PRESSED>\nreadline.__doc__ readline.get_line_buffer( readline.read_init_file(\nreadline.__file__ readline.insert_text( readline.set_completer(\nreadline.__name__ readline.parse_and_bind(\n>>> readline.\nThe rlcompleter\nmodule is designed for use with Pythonâs\ninteractive mode. Unless Python is run with the\n-S\noption, the module is automatically imported and configured\n(see Readline configuration).\nOn platforms without readline\n, the Completer\nclass defined by\nthis module can still be used for custom purposes.\n- class rlcompleter.CompleterÂ¶\nCompleter objects have the following method:\n- complete(text, state)Â¶\nReturn the next possible completion for text.\nWhen called by the\nreadline\nmodule, this method is called successively withstate == 0, 1, 2, ...\nuntil the method returnsNone\n.If called for text that doesnât include a period character (\n'.'\n), it will complete from names currently defined in__main__\n,builtins\nand keywords (as defined by thekeyword\nmodule).If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to\n__getattr__()\n) up to the last part, and find matches for the rest via thedir()\nfunction. Any exception raised during the evaluation of the expression is caught, silenced andNone\nis returned."}
{"url": "https://docs.python.org/3/library/zoneinfo.html", "title": "", "text": "zoneinfo\nâ IANA time zone supportÂ¶\nAdded in version 3.9.\nSource code: Lib/zoneinfo\nThe zoneinfo\nmodule provides a concrete time zone implementation to\nsupport the IANA time zone database as originally specified in PEP 615. By\ndefault, zoneinfo\nuses the systemâs time zone data if available; if no\nsystem time zone data is available, the library will fall back to using the\nfirst-party tzdata package available on PyPI.\nSee also\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nUsing ZoneInfo\nÂ¶\nZoneInfo\nis a concrete implementation of the datetime.tzinfo\nabstract base class, and is intended to be attached to tzinfo\n, either via\nthe constructor, the datetime.replace\nmethod or datetime.astimezone\n:\n>>> from zoneinfo import ZoneInfo\n>>> from datetime import datetime, timedelta\n>>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n>>> print(dt)\n2020-10-31 12:00:00-07:00\n>>> dt.tzname()\n'PDT'\nDatetimes constructed in this way are compatible with datetime arithmetic and handle daylight saving time transitions with no further intervention:\n>>> dt_add = dt + timedelta(days=1)\n>>> print(dt_add)\n2020-11-01 12:00:00-08:00\n>>> dt_add.tzname()\n'PST'\nThese time zones also support the fold\nattribute\nintroduced in PEP 495. During offset transitions which induce ambiguous\ntimes (such as a daylight saving time to standard time transition), the offset\nfrom before the transition is used when fold=0\n, and the offset after\nthe transition is used when fold=1\n, for example:\n>>> dt = datetime(2020, 11, 1, 1, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n>>> print(dt)\n2020-11-01 01:00:00-07:00\n>>> print(dt.replace(fold=1))\n2020-11-01 01:00:00-08:00\nWhen converting from another time zone, the fold will be set to the correct value:\n>>> from datetime import timezone\n>>> LOS_ANGELES = ZoneInfo(\"America/Los_Angeles\")\n>>> dt_utc = datetime(2020, 11, 1, 8, tzinfo=timezone.utc)\n>>> # Before the PDT -> PS"}
{"url": "https://docs.python.org/3/library/colorsys.html", "title": "", "text": "colorsys\nâ Conversions between color systemsÂ¶\nSource code: Lib/colorsys.py\nThe colorsys\nmodule defines bidirectional conversions of color values\nbetween colors expressed in the RGB (Red Green Blue) color space used in\ncomputer monitors and three other coordinate systems: YIQ, HLS (Hue Lightness\nSaturation) and HSV (Hue Saturation Value). Coordinates in all of these color\nspaces are floating-point values. In the YIQ space, the Y coordinate is between\n0 and 1, but the I and Q coordinates can be positive or negative. In all other\nspaces, the coordinates are all between 0 and 1.\nSee also\nMore information about color spaces can be found at https://poynton.ca/ColorFAQ.html and https://www.cambridgeincolour.com/tutorials/color-spaces.htm.\nThe colorsys\nmodule defines the following functions:\n- colorsys.rgb_to_yiq(r, g, b)Â¶\nConvert the color from RGB coordinates to YIQ coordinates.\n- colorsys.yiq_to_rgb(y, i, q)Â¶\nConvert the color from YIQ coordinates to RGB coordinates.\n- colorsys.rgb_to_hls(r, g, b)Â¶\nConvert the color from RGB coordinates to HLS coordinates.\n- colorsys.hls_to_rgb(h, l, s)Â¶\nConvert the color from HLS coordinates to RGB coordinates.\n- colorsys.rgb_to_hsv(r, g, b)Â¶\nConvert the color from RGB coordinates to HSV coordinates.\n- colorsys.hsv_to_rgb(h, s, v)Â¶\nConvert the color from HSV coordinates to RGB coordinates.\nExample:\n>>> import colorsys\n>>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)\n(0.5, 0.5, 0.4)\n>>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)\n(0.2, 0.4, 0.4)"}
{"url": "https://docs.python.org/3/library/glob.html", "title": "", "text": "glob\nâ Unix style pathname pattern expansionÂ¶\nSource code: Lib/glob.py\nThe glob\nmodule finds all the pathnames matching a specified pattern\naccording to the rules used by the Unix shell, although results are returned in\narbitrary order. No tilde expansion is done, but *\n, ?\n, and character\nranges expressed with []\nwill be correctly matched. This is done by using\nthe os.scandir()\nand fnmatch.fnmatch()\nfunctions in concert, and\nnot by actually invoking a subshell.\nNote that files beginning with a dot (.\n) can only be matched by\npatterns that also start with a dot,\nunlike fnmatch.fnmatch()\nor pathlib.Path.glob()\n.\n(For tilde and shell variable expansion, use os.path.expanduser()\nand\nos.path.expandvars()\n.)\nFor a literal match, wrap the meta-characters in brackets.\nFor example, '[?]'\nmatches the character '?'\n.\nThe glob\nmodule defines the following functions:\n- glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)Â¶\nReturn a possibly empty list of path names that match pathname, which must be a string containing a path specification. pathname can be either absolute (like\n/usr/src/Python-1.5/Makefile\n) or relative (like../../Tools/*/*.gif\n), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell). Whether or not the results are sorted depends on the file system. If a file that satisfies conditions is removed or added during the call of this function, whether a path name for that file will be included is unspecified.If root_dir is not\nNone\n, it should be a path-like object specifying the root directory for searching. It has the same effect onglob()\nas changing the current directory before calling it. If pathname is relative, the result will contain paths relative to root_dir.This function can support paths relative to directory descriptors with the dir_fd parameter.\nIf recursive is true, the pattern â\n**\nâ will match any files and zero or more directories, subdirectories and symbolic links t"}
{"url": "https://docs.python.org/3/library/zipfile.html", "title": "", "text": "zipfile\nâ Work with ZIP archivesÂ¶\nSource code: Lib/zipfile/\nThe ZIP file format is a common archive and compression standard. This module provides tools to create, read, write, append, and list a ZIP file. Any advanced use of this module will require an understanding of the format, as defined in PKZIP Application Note.\nThis module does not currently handle multi-disk ZIP files. It can handle ZIP files that use the ZIP64 extensions (that is ZIP files that are more than 4 GiB in size). It supports decryption of encrypted files in ZIP archives, but it currently cannot create an encrypted file. Decryption is extremely slow as it is implemented in native Python rather than C.\nThe module defines the following items:\n- exception zipfile.BadZipFileÂ¶\nThe error raised for bad ZIP files.\nAdded in version 3.2.\n- exception zipfile.BadZipfileÂ¶\nAlias of\nBadZipFile\n, for compatibility with older Python versions.Deprecated since version 3.2.\n- exception zipfile.LargeZipFileÂ¶\nThe error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.\n- class zipfile.ZipFile\nThe class for reading and writing ZIP files. See section ZipFile Objects for constructor details.\n- class zipfile.Path\nClass that implements a subset of the interface provided by\npathlib.Path\n, including the fullimportlib.resources.abc.Traversable\ninterface.Added in version 3.8.\n- class zipfile.PyZipFile\nClass for creating ZIP archives containing Python libraries.\n- class zipfile.ZipInfo(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))Â¶\nClass used to represent information about a member of an archive. Instances of this class are returned by the\ngetinfo()\nandinfolist()\nmethods ofZipFile\nobjects. Most users of thezipfile\nmodule will not need to create these, but only use those created by this module. filename should be the full name of the archive member, and date_time should be a tuple containing six fields which describe the time of the last modification to the file; the fields are de"}
{"url": "https://docs.python.org/3/library/http.cookiejar.html", "title": "", "text": "http.cookiejar\nâ Cookie handling for HTTP clientsÂ¶\nSource code: Lib/http/cookiejar.py\nThe http.cookiejar\nmodule defines classes for automatic handling of HTTP\ncookies. It is useful for accessing web sites that require small pieces of data\nâ cookies â to be set on the client machine by an HTTP response from a\nweb server, and then returned to the server in later HTTP requests.\nBoth the regular Netscape cookie protocol and the protocol defined by\nRFC 2965 are handled. RFC 2965 handling is switched off by default.\nRFC 2109 cookies are parsed as Netscape cookies and subsequently treated\neither as Netscape or RFC 2965 cookies according to the âpolicyâ in effect.\nNote that the great majority of cookies on the internet are Netscape cookies.\nhttp.cookiejar\nattempts to follow the de-facto Netscape cookie protocol (which\ndiffers substantially from that set out in the original Netscape specification),\nincluding taking note of the max-age\nand port\ncookie-attributes\nintroduced with RFC 2965.\nNote\nThe various named parameters found in Set-Cookie and\nSet-Cookie2 headers (eg. domain\nand expires\n) are\nconventionally referred to as attributes. To distinguish them from\nPython attributes, the documentation for this module uses the term\ncookie-attribute instead.\nThe module defines the following exception:\n- exception http.cookiejar.LoadErrorÂ¶\nInstances of\nFileCookieJar\nraise this exception on failure to load cookies from a file.LoadError\nis a subclass ofOSError\n.\nThe following classes are provided:\n- class http.cookiejar.CookieJar(policy=None)Â¶\npolicy is an object implementing the\nCookiePolicy\ninterface.The\nCookieJar\nclass stores HTTP cookies. It extracts cookies from HTTP requests, and returns them in HTTP responses.CookieJar\ninstances automatically expire contained cookies when necessary. Subclasses are also responsible for storing and retrieving cookies from a file or database.\n- class http.cookiejar.FileCookieJar(filename=None, delayload=None, policy=None)Â¶\npolicy is an object im"}
{"url": "https://docs.python.org/3/library/xml.sax.reader.html", "title": "", "text": "xml.sax.xmlreader\nâ Interface for XML parsersÂ¶\nSource code: Lib/xml/sax/xmlreader.py\nSAX parsers implement the XMLReader\ninterface. They are implemented in\na Python module, which must provide a function create_parser()\n. This\nfunction is invoked by xml.sax.make_parser()\nwith no arguments to create\na new parser object.\n- class xml.sax.xmlreader.XMLReaderÂ¶\nBase class which can be inherited by SAX parsers.\n- class xml.sax.xmlreader.IncrementalParserÂ¶\nIn some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still\nparse()\nwonât return until the entire document is processed. So these interfaces should be used if the blocking behaviour ofparse()\nis not desirable.When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method.\nNote that these methods must not be called during parsing, that is, after parse has been called and before it returns.\nBy default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.\n- class xml.sax.xmlreader.LocatorÂ¶\nInterface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return\nNone\n.\n- class xml.sax.xmlreader.InputSource(system_id=None)Â¶\nEncapsulation of the information needed by the\nXMLReader\nto read entities.This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/o"}
{"url": "https://docs.python.org/3/library/text.html", "title": "", "text": "Text Processing ServicesÂ¶\nThe modules described in this chapter provide a wide range of string manipulation operations and other text processing services.\nThe codecs\nmodule described under Binary Data Services is also\nhighly relevant to text processing. In addition, see the documentation for\nPythonâs built-in string type in Text Sequence Type â str.\nstring\nâ Common string operationsre\nâ Regular expression operationsdifflib\nâ Helpers for computing deltastextwrap\nâ Text wrapping and fillingunicodedata\nâ Unicode Databasestringprep\nâ Internet String Preparationreadline\nâ GNU readline interfacerlcompleter\nâ Completion function for GNU readline"}
{"url": "https://docs.python.org/3/library/statistics.html", "title": "", "text": "statistics\nâ Mathematical statistics functionsÂ¶\nAdded in version 3.4.\nSource code: Lib/statistics.py\nThis module provides functions for calculating mathematical statistics of\nnumeric (Real\n-valued) data.\nThe module is not intended to be a competitor to third-party libraries such as NumPy, SciPy, or proprietary full-featured statistics packages aimed at professional statisticians such as Minitab, SAS and Matlab. It is aimed at the level of graphing and scientific calculators.\nUnless explicitly noted, these functions support int\n,\nfloat\n, Decimal\nand Fraction\n.\nBehaviour with other types (whether in the numeric tower or not) is\ncurrently unsupported. Collections with a mix of types are also undefined\nand implementation-dependent. If your input data consists of mixed types,\nyou may be able to use map()\nto ensure a consistent result, for\nexample: map(float, input_data)\n.\nSome datasets use NaN\n(not a number) values to represent missing data.\nSince NaNs have unusual comparison semantics, they cause surprising or\nundefined behaviors in the statistics functions that sort data or that count\noccurrences. The functions affected are median()\n, median_low()\n,\nmedian_high()\n, median_grouped()\n, mode()\n, multimode()\n, and\nquantiles()\n. The NaN\nvalues should be stripped before calling these\nfunctions:\n>>> from statistics import median\n>>> from math import isnan\n>>> from itertools import filterfalse\n>>> data = [20.7, float('NaN'),19.2, 18.3, float('NaN'), 14.4]\n>>> sorted(data) # This has surprising behavior\n[20.7, nan, 14.4, 18.3, 19.2, nan]\n>>> median(data) # This result is unexpected\n16.35\n>>> sum(map(isnan, data)) # Number of missing values\n2\n>>> clean = list(filterfalse(isnan, data)) # Strip NaN values\n>>> clean\n[20.7, 19.2, 18.3, 14.4]\n>>> sorted(clean) # Sorting now works as expected\n[14.4, 18.3, 19.2, 20.7]\n>>> median(clean) # This result is now well defined\n18.75\nAverages and measures of central locationÂ¶\nThese functions calculate an average or typical value from a popula"}
{"url": "https://docs.python.org/3/library/multiprocessing.html", "title": "", "text": "multiprocessing\nâ Process-based parallelismÂ¶\nSource code: Lib/multiprocessing/\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nIntroductionÂ¶\nmultiprocessing\nis a package that supports spawning processes using an\nAPI similar to the threading\nmodule. The multiprocessing\npackage\noffers both local and remote concurrency, effectively side-stepping the\nGlobal Interpreter Lock by using\nsubprocesses instead of threads. Due\nto this, the multiprocessing\nmodule allows the programmer to fully\nleverage multiple processors on a given machine. It runs on both POSIX and\nWindows.\nThe multiprocessing\nmodule also introduces APIs which do not have\nanalogs in the threading\nmodule. A prime example of this is the\nPool\nobject which offers a convenient means of\nparallelizing the execution of a function across multiple input values,\ndistributing the input data across processes (data parallelism). The following\nexample demonstrates the common practice of defining such functions in a module\nso that child processes can successfully import that module. This basic example\nof data parallelism using Pool\n,\nfrom multiprocessing import Pool\ndef f(x):\nreturn x*x\nif __name__ == '__main__':\nwith Pool(5) as p:\nprint(p.map(f, [1, 2, 3]))\nwill print to standard output\n[1, 4, 9]\nSee also\nconcurrent.futures.ProcessPoolExecutor\noffers a higher level interface\nto push tasks to a background process without blocking execution of the\ncalling process. Compared to using the Pool\ninterface directly, the concurrent.futures\nAPI more readily allows\nthe submission of work to the underlying process pool to be separated from\nwaiting for the results.\nThe Process\nclassÂ¶\nIn multiprocessing\n, processes are spawned by creating a Process\nobject and then calling its start()\nmethod. Process\nfollows the API of threading.Thread\n. A trivial example of a\nmultiprocess program is\nfrom multiprocessing import Process\ndef f(name):\nprint('hello', name)\nif __name__ "}
{"url": "https://docs.python.org/3/library/abc.html", "title": "", "text": "abc\nâ Abstract Base ClassesÂ¶\nSource code: Lib/abc.py\nThis module provides the infrastructure for defining abstract base\nclasses (ABCs) in Python, as outlined in PEP 3119;\nsee the PEP for why this was added to Python. (See also PEP 3141 and the\nnumbers\nmodule regarding a type hierarchy for numbers based on ABCs.)\nThe collections\nmodule has some concrete classes that derive from\nABCs; these can, of course, be further derived. In addition, the\ncollections.abc\nsubmodule has some ABCs that can be used to test whether\na class or instance provides a particular interface, for example, if it is\nhashable or if it is a mapping.\nThis module provides the metaclass ABCMeta\nfor defining ABCs and\na helper class ABC\nto alternatively define ABCs through inheritance:\n- class abc.ABCÂ¶\nA helper class that has\nABCMeta\nas its metaclass. With this class, an abstract base class can be created by simply deriving fromABC\navoiding sometimes confusing metaclass usage, for example:from abc import ABC class MyABC(ABC): pass\nNote that the type of\nABC\nis stillABCMeta\n, therefore inheriting fromABC\nrequires the usual precautions regarding metaclass usage, as multiple inheritance may lead to metaclass conflicts. One may also define an abstract base class by passing the metaclass keyword and usingABCMeta\ndirectly, for example:from abc import ABCMeta class MyABC(metaclass=ABCMeta): pass\nAdded in version 3.4.\n- class abc.ABCMetaÂ¶\nMetaclass for defining Abstract Base Classes (ABCs).\nUse this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as âvirtual subclassesâ â these and their descendants will be considered subclasses of the registering ABC by the built-in\nissubclass()\nfunction, but the registering ABC wonât show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even viasuper()\n). [1]Classe"}
{"url": "https://docs.python.org/3/library/xmlrpc.html", "title": "", "text": "xmlrpc\nâ XMLRPC server and client modulesÂ¶\nXML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.\nxmlrpc\nis a package that collects server and client modules implementing\nXML-RPC. The modules are:"}
{"url": "https://docs.python.org/3/library/xmlrpc.client.html", "title": "", "text": "xmlrpc.client\nâ XML-RPC client accessÂ¶\nSource code: Lib/xmlrpc/client.py\nXML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data. This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire.\nWarning\nThe xmlrpc.client\nmodule is not secure against maliciously\nconstructed data. If you need to parse untrusted or unauthenticated data,\nsee XML security.\nChanged in version 3.5: For HTTPS URIs, xmlrpc.client\nnow performs all the necessary\ncertificate and hostname checks by default.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\n- class xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=(), context=None)Â¶\nA\nServerProxy\ninstance is an object that manages communication with a remote XML-RPC server. The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server. The optional second argument is a transport factory instance; by default it is an internalSafeTransport\ninstance for https: URLs and an internal HTTPTransport\ninstance otherwise. The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag.The following parameters govern the use of the returned proxy instance. If allow_none is true, the Python constant\nNone\nwill be translated into XML; the default behaviour is forNone\nto raise aTypeError\n. This is a commonly used extension to the XML-RPC specification, but isnât supported by all clients and servers; see http://ontosys.com/xml-rpc/extensions.php for a description. The use_builtin_types flag can be used to cause date/time values to be presented"}
{"url": "https://docs.python.org/3/library/shlex.html", "title": "", "text": "shlex\nâ Simple lexical analysisÂ¶\nSource code: Lib/shlex.py\nThe shlex\nclass makes it easy to write lexical analyzers for\nsimple syntaxes resembling that of the Unix shell. This will often be useful\nfor writing minilanguages, (for example, in run control files for Python\napplications) or for parsing quoted strings.\nThe shlex\nmodule defines the following functions:\n- shlex.split(s, comments=False, posix=True)Â¶\nSplit the string s using shell-like syntax. If comments is\nFalse\n(the default), the parsing of comments in the given string will be disabled (setting thecommenters\nattribute of theshlex\ninstance to the empty string). This function operates in POSIX mode by default, but uses non-POSIX mode if the posix argument is false.Changed in version 3.12: Passing\nNone\nfor s argument now raises an exception, rather than readingsys.stdin\n.\n- shlex.join(split_command)Â¶\nConcatenate the tokens of the list split_command and return a string. This function is the inverse of\nsplit()\n.>>> from shlex import join >>> print(join(['echo', '-n', 'Multiple words'])) echo -n 'Multiple words'\nThe returned value is shell-escaped to protect against injection vulnerabilities (see\nquote()\n).Added in version 3.8.\n- shlex.quote(s)Â¶\nReturn a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line, for cases where you cannot use a list.\nWarning\nThe\nshlex\nmodule is only designed for Unix shells.The\nquote()\nfunction is not guaranteed to be correct on non-POSIX compliant shells or shells from other operating systems such as Windows. Executing commands quoted by this module on such shells can open up the possibility of a command injection vulnerability.Consider using functions that pass command arguments with lists such as\nsubprocess.run()\nwithshell=False\n.This idiom would be unsafe:\n>>> filename = 'somefile; rm -rf ~' >>> command = 'ls -l {}'.format(filename) >>> print(command) # executed by a shell: boom! ls -l somefile; rm "}
{"url": "https://docs.python.org/3/library/tkinter.colorchooser.html", "title": "", "text": "tkinter.colorchooser\nâ Color choosing dialogÂ¶\nSource code: Lib/tkinter/colorchooser.py\nThe tkinter.colorchooser\nmodule provides the Chooser\nclass\nas an interface to the native color picker dialog. Chooser\nimplements\na modal color choosing dialog window. The Chooser\nclass inherits from\nthe Dialog\nclass.\n- class tkinter.colorchooser.Chooser(master=None, **options)Â¶\n- tkinter.colorchooser.askcolor(color=None, **options)Â¶\nCreate a color choosing dialog. A call to this method will show the window, wait for the user to make a selection, and return the selected color (or\nNone\n) to the caller.\nSee also\n- Module\ntkinter.commondialog\nTkinter standard dialog module"}
{"url": "https://docs.python.org/3/library/functools.html", "title": "", "text": "functools\nâ Higher-order functions and operations on callable objectsÂ¶\nSource code: Lib/functools.py\nThe functools\nmodule is for higher-order functions: functions that act on\nor return other functions. In general, any callable object can be treated as a\nfunction for the purposes of this module.\nThe functools\nmodule defines the following functions:\n- @functools.cache(user_function)Â¶\nSimple lightweight unbounded function cache. Sometimes called âmemoizeâ.\nReturns the same as\nlru_cache(maxsize=None)\n, creating a thin wrapper around a dictionary lookup for the function arguments. Because it never needs to evict old values, this is smaller and faster thanlru_cache()\nwith a size limit.For example:\n@cache def factorial(n): return n * factorial(n-1) if n else 1 >>> factorial(10) # no previously cached result, makes 11 recursive calls 3628800 >>> factorial(5) # just looks up cached value result 120 >>> factorial(12) # makes two new recursive calls, the other 10 are cached 479001600\nThe cache is threadsafe so that the wrapped function can be used in multiple threads. This means that the underlying data structure will remain coherent during concurrent updates.\nIt is possible for the wrapped function to be called more than once if another thread makes an additional call before the initial call has been completed and cached.\nAdded in version 3.9.\n- @functools.cached_property(func)Â¶\nTransform a method of a class into a property whose value is computed once and then cached as a normal attribute for the life of the instance. Similar to\nproperty()\n, with the addition of caching. Useful for expensive computed properties of instances that are otherwise effectively immutable.Example:\nclass DataSet: def __init__(self, sequence_of_numbers): self._data = tuple(sequence_of_numbers) @cached_property def stdev(self): return statistics.stdev(self._data)\nThe mechanics of\ncached_property()\nare somewhat different fromproperty()\n. A regular property blocks attribute writes unless a setter is d"}
{"url": "https://docs.python.org/3/library/threading.html", "title": "", "text": "threading\nâ Thread-based parallelismÂ¶\nSource code: Lib/threading.py\nThis module constructs higher-level threading interfaces on top of the lower\nlevel _thread\nmodule.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nIntroductionÂ¶\nThe threading\nmodule provides a way to run multiple threads (smaller\nunits of a process) concurrently within a single process. It allows for the\ncreation and management of threads, making it possible to execute tasks in\nparallel, sharing memory space. Threads are particularly useful when tasks are\nI/O bound, such as file operations or making network requests,\nwhere much of the time is spent waiting for external resources.\nA typical use case for threading\nincludes managing a pool of worker\nthreads that can process multiple tasks concurrently. Hereâs a basic example of\ncreating and starting threads using Thread\n:\nimport threading\nimport time\ndef crawl(link, delay=3):\nprint(f\"crawl started for {link}\")\ntime.sleep(delay) # Blocking I/O (simulating a network request)\nprint(f\"crawl ended for {link}\")\nlinks = [\n\"https://python.org\",\n\"https://docs.python.org\",\n\"https://peps.python.org\",\n]\n# Start threads for each link\nthreads = []\nfor link in links:\n# Using `args` to pass positional arguments and `kwargs` for keyword arguments\nt = threading.Thread(target=crawl, args=(link,), kwargs={\"delay\": 2})\nthreads.append(t)\n# Start each thread\nfor t in threads:\nt.start()\n# Wait for all threads to finish\nfor t in threads:\nt.join()\nChanged in version 3.7: This module used to be optional, it is now always available.\nSee also\nconcurrent.futures.ThreadPoolExecutor\noffers a higher level interface\nto push tasks to a background thread without blocking execution of the\ncalling thread, while still being able to retrieve their results when needed.\nqueue\nprovides a thread-safe interface for exchanging data between\nrunning threads.\nasyncio\noffers an alternative approach to achieving tas"}
{"url": "https://docs.python.org/3/library/cmdline.html", "title": "", "text": "Modules command-line interface (CLI)Â¶\nThe following modules have a command-line interface.\nencodings.rot_13\nidlelib\nthis\nSee also the Python command-line interface.\nThe following modules have a command-line interface.\nencodings.rot_13\nidlelib\nthis\nSee also the Python command-line interface."}
{"url": "https://docs.python.org/3/library/linecache.html", "title": "", "text": "linecache\nâ Random access to text linesÂ¶\nSource code: Lib/linecache.py\nThe linecache\nmodule allows one to get any line from a Python source file, while\nattempting to optimize internally, using a cache, the common case where many\nlines are read from a single file. This is used by the traceback\nmodule\nto retrieve source lines for inclusion in the formatted traceback.\nThe tokenize.open()\nfunction is used to open files. This\nfunction uses tokenize.detect_encoding()\nto get the encoding of the\nfile; in the absence of an encoding token, the file encoding defaults to UTF-8.\nThe linecache\nmodule defines the following functions:\n- linecache.getline(filename, lineno, module_globals=None)Â¶\nGet line lineno from file named filename. This function will never raise an exception â it will return\n''\non errors (the terminating newline character will be included for lines that are found).If a file named filename is not found, the function first checks for a PEP 302\n__loader__\nin module_globals. If there is such a loader and it defines aget_source\nmethod, then that determines the source lines (ifget_source()\nreturnsNone\n, then''\nis returned). Finally, if filename is a relative filename, it is looked up relative to the entries in the module search path,sys.path\n.\n- linecache.clearcache()Â¶\nClear the cache. Use this function if you no longer need lines from files previously read using\ngetline()\n.\n- linecache.checkcache(filename=None)Â¶\nCheck the cache for validity. Use this function if files in the cache may have changed on disk, and you require the updated version. If filename is omitted, it will check all the entries in the cache.\n- linecache.lazycache(filename, module_globals)Â¶\nCapture enough detail about a non-file-based module to permit getting its lines later via\ngetline()\neven if module_globals isNone\nin the later call. This avoids doing I/O until a line is actually needed, without having to carry the module globals around indefinitely.Added in version 3.5.\nExample:\n>>> import l"}
{"url": "https://docs.python.org/3/library/signal.html", "title": "", "text": "signal\nâ Set handlers for asynchronous eventsÂ¶\nSource code: Lib/signal.py\nThis module provides mechanisms to use signal handlers in Python.\nGeneral rulesÂ¶\nThe signal.signal()\nfunction allows defining custom handlers to be\nexecuted when a signal is received. A small number of default handlers are\ninstalled: SIGPIPE\nis ignored (so write errors on pipes and sockets\ncan be reported as ordinary Python exceptions) and SIGINT\nis\ntranslated into a KeyboardInterrupt\nexception if the parent process\nhas not changed it.\nA handler for a particular signal, once set, remains installed until it is\nexplicitly reset (Python emulates the BSD style interface regardless of the\nunderlying implementation), with the exception of the handler for\nSIGCHLD\n, which follows the underlying implementation.\nOn WebAssembly platforms, signals are emulated and therefore behave differently. Several functions and signals are not available on these platforms.\nExecution of Python signal handlersÂ¶\nA Python signal handler does not get executed inside the low-level (C) signal handler. Instead, the low-level signal handler sets a flag which tells the virtual machine to execute the corresponding Python signal handler at a later point(for example at the next bytecode instruction). This has consequences:\nIt makes little sense to catch synchronous errors like\nSIGFPE\norSIGSEGV\nthat are caused by an invalid operation in C code. Python will return from the signal handler to the C code, which is likely to raise the same signal again, causing Python to apparently hang. From Python 3.3 onwards, you can use thefaulthandler\nmodule to report on synchronous errors.A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes.\nIf the handler raises an exception, it will be raised âout of thin airâ in the main t"}
{"url": "https://docs.python.org/3/library/trace.html", "title": "", "text": "trace\nâ Trace or track Python statement executionÂ¶\nSource code: Lib/trace.py\nThe trace\nmodule allows you to trace program execution, generate\nannotated statement coverage listings, print caller/callee relationships and\nlist functions executed during a program run. It can be used in another program\nor from the command line.\nSee also\n- Coverage.py\nA popular third-party coverage tool that provides HTML output along with advanced features such as branch coverage.\nCommand-Line UsageÂ¶\nThe trace\nmodule can be invoked from the command line. It can be as\nsimple as\npython -m trace --count -C . somefile.py ...\nThe above will execute somefile.py\nand generate annotated listings of\nall Python modules imported during the execution into the current directory.\n- --helpÂ¶\nDisplay usage and exit.\n- --versionÂ¶\nDisplay the version of the module and exit.\nAdded in version 3.8: Added --module\noption that allows to run an executable module.\nMain optionsÂ¶\nAt least one of the following options must be specified when invoking\ntrace\n. The --listfuncs\noption is mutually exclusive with\nthe --trace\nand --count\noptions. When\n--listfuncs\nis provided, neither --count\nnor\n--trace\nare accepted, and vice versa.\n- -c, --countÂ¶\nProduce a set of annotated listing files upon program completion that shows how many times each statement was executed. See also\n--coverdir\n,--file\nand--no-report\nbelow.\n- -t, --traceÂ¶\nDisplay lines as they are executed.\n- -l, --listfuncsÂ¶\nDisplay the functions executed by running the program.\n- -r, --reportÂ¶\nProduce an annotated list from an earlier program run that used the\n--count\nand--file\noption. This does not execute any code.\n- -T, --trackcallsÂ¶\nDisplay the calling relationships exposed by running the program.\nModifiersÂ¶\n- -f, --file=<file>Â¶\nName of a file to accumulate counts over several tracing runs. Should be used with the\n--count\noption.\n- -C, --coverdir=<dir>Â¶\nDirectory where the report files go. The coverage report for\npackage.module\nis written to filedir"}
{"url": "https://docs.python.org/3/library/hashlib.html", "title": "", "text": "hashlib\nâ Secure hashes and message digestsÂ¶\nSource code: Lib/hashlib.py\nThis module implements a common interface to many different hash algorithms. Included are the FIPS secure hash algorithms SHA224, SHA256, SHA384, SHA512, (defined in the FIPS 180-4 standard), the SHA-3 series (defined in the FIPS 202 standard) as well as the legacy algorithms SHA1 (formerly part of FIPS) and the MD5 algorithm (defined in internet RFC 1321).\nNote\nIf you want the adler32 or crc32 hash functions, they are available in\nthe zlib\nmodule.\nHash algorithmsÂ¶\nThere is one constructor method named for each type of hash. All return\na hash object with the same simple interface. For example: use sha256()\nto create a SHA-256 hash object. You can now feed this object with\nbytes-like objects (normally bytes\n) using\nthe update\nmethod. At any point you can ask it for the\ndigest of the concatenation of the data fed to it so far using the\ndigest()\nor hexdigest()\nmethods.\nTo allow multithreading, the Python GIL is released while computing a\nhash supplied more than 2047 bytes of data at once in its constructor or\n.update\nmethod.\nConstructors for hash algorithms that are always present in this module are\nsha1()\n, sha224()\n, sha256()\n, sha384()\n, sha512()\n,\nsha3_224()\n, sha3_256()\n, sha3_384()\n, sha3_512()\n,\nshake_128()\n, shake_256()\n, blake2b()\n, and blake2s()\n.\nmd5()\nis normally available as well, though it may be missing or blocked\nif you are using a rare âFIPS compliantâ build of Python.\nThese correspond to algorithms_guaranteed\n.\nAdditional algorithms may also be available if your Python distributionâs\nhashlib\nwas linked against a build of OpenSSL that provides others.\nOthers are not guaranteed available on all installations and will only be\naccessible by name via new()\n. See algorithms_available\n.\nWarning\nSome algorithms have known hash collision weaknesses (including MD5 and SHA1). Refer to Attacks on cryptographic hash algorithms and the hashlib-seealso section at the end of this document.\nAdd"}
{"url": "https://docs.python.org/3/library/shelve.html", "title": "", "text": "shelve\nâ Python object persistenceÂ¶\nSource code: Lib/shelve.py\nA âshelfâ is a persistent, dictionary-like object. The difference with âdbmâ\ndatabases is that the values (not the keys!) in a shelf can be essentially\narbitrary Python objects â anything that the pickle\nmodule can handle.\nThis includes most class instances, recursive data types, and objects containing\nlots of shared sub-objects. The keys are ordinary strings.\n- shelve.open(filename, flag='c', protocol=None, writeback=False)Â¶\nOpen a persistent dictionary. The filename specified is the base filename for the underlying database. As a side-effect, an extension may be added to the filename and more than one file may be created. By default, the underlying database file is opened for reading and writing. The optional flag parameter has the same interpretation as the flag parameter of\ndbm.open()\n.By default, pickles created with\npickle.DEFAULT_PROTOCOL\nare used to serialize values. The version of the pickle protocol can be specified with the protocol parameter.Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written only when assigned to the shelf (see Example). If the optional writeback parameter is set to\nTrue\n, all entries accessed are also cached in memory, and written back onsync()\nandclose()\n; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).Changed in version 3.10:\npickle.DEFAULT_PROTOCOL\nis now used as the default pickle protocol.Changed in version 3.11: Accepts path-like object for filename.\nNote\nDo not rely on the shelf being closed automatically; always call\nclose()\nexplicitly when you donât need it any "}
{"url": "https://docs.python.org/3/library/math.html", "title": "", "text": "math\nâ Mathematical functionsÂ¶\nThis module provides access to common mathematical functions and constants, including those defined by the C standard.\nThese functions cannot be used with complex numbers; use the functions of the\nsame name from the cmath\nmodule if you require support for complex\nnumbers. The distinction between functions which support complex numbers and\nthose which donât is made since most users do not want to learn quite as much\nmathematics as required to understand complex numbers. Receiving an exception\ninstead of a complex result allows earlier detection of the unexpected complex\nnumber used as a parameter, so that the programmer can determine how and why it\nwas generated in the first place.\nThe following functions are provided by this module. Except when explicitly noted otherwise, all return values are floats.\nNumber-theoretic functions |\n|\nNumber of ways to choose k items from n items without repetition and without order |\n|\nn factorial |\n|\nGreatest common divisor of the integer arguments |\n|\nInteger square root of a nonnegative integer n |\n|\nLeast common multiple of the integer arguments |\n|\nNumber of ways to choose k items from n items without repetition and with order |\n|\nFloating point arithmetic |\n|\nCeiling of x, the smallest integer greater than or equal to x |\n|\nAbsolute value of x |\n|\nFloor of x, the largest integer less than or equal to x |\n|\nFused multiply-add operation: |\n|\nRemainder of division |\n|\nFractional and integer parts of x |\n|\nRemainder of x with respect to y |\n|\nInteger part of x |\n|\nFloating point manipulation functions |\n|\nMagnitude (absolute value) of x with the sign of y |\n|\nMantissa and exponent of x |\n|\nCheck if the values a and b are close to each other |\n|\nCheck if x is neither an infinity nor a NaN |\n|\nCheck if x is a positive or negative infinity |\n|\nCheck if x is a NaN (not a number) |\n|\n|\n|\nFloating-point value steps steps after x towards y |\n|\nValue of the least significant bit of x |\n|\nPower, exponential an"}
{"url": "https://docs.python.org/3/library/turtle.html", "title": "", "text": "turtle\nâ Turtle graphicsÂ¶\nSource code: Lib/turtle.py\nIntroductionÂ¶\nTurtle graphics is an implementation of the popular geometric drawing tools introduced in Logo, developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967.\nGet startedÂ¶\nImagine a robotic turtle starting at (0, 0) in the x-y plane. After an import turtle\n, give it the\ncommand turtle.forward(15)\n, and it moves (on-screen!) 15 pixels in the\ndirection it is facing, drawing a line as it moves. Give it the command\nturtle.right(25)\n, and it rotates in-place 25 degrees clockwise.\nIn Python, turtle graphics provides a representation of a physical âturtleâ (a little robot with a pen) that draws on a sheet of paper on the floor.\nItâs an effective and well-proven way for learners to encounter programming concepts and interaction with software, as it provides instant, visible feedback. It also provides convenient access to graphical output in general.\nTurtle drawing was originally created as an educational tool, to be used by teachers in the classroom. For the programmer who needs to produce some graphical output it can be a way to do that without the overhead of introducing more complex or external libraries into their work.\nTutorialÂ¶\nNew users should start here. In this tutorial weâll explore some of the basics of turtle drawing.\nStarting a turtle environmentÂ¶\nIn a Python shell, import all the objects of the turtle\nmodule:\nfrom turtle import *\nIf you run into a No module named '_tkinter'\nerror, youâll have to\ninstall the Tk interface package\non your system.\nBasic drawingÂ¶\nSend the turtle forward 100 steps:\nforward(100)\nYou should see (most likely, in a new window on your display) a line drawn by the turtle, heading East. Change the direction of the turtle, so that it turns 120 degrees left (anti-clockwise):\nleft(120)\nLetâs continue by drawing a triangle:\nforward(100)\nleft(120)\nforward(100)\nNotice how the turtle, represented by an arrow, points in different directions as you steer it.\nExperime"}
{"url": "https://docs.python.org/3/library/custominterp.html", "title": "", "text": "Custom Python InterpretersÂ¶\nThe modules described in this chapter allow writing interfaces similar to\nPythonâs interactive interpreter. If you want a Python interpreter that\nsupports some special feature in addition to the Python language, you should\nlook at the code\nmodule. (The codeop\nmodule is lower-level, used\nto support compiling a possibly incomplete chunk of Python code.)\nThe full list of modules described in this chapter is:"}
{"url": "https://docs.python.org/3/library/pwd.html", "title": "", "text": "pwd\nâ The password databaseÂ¶\nThis module provides access to the Unix user account and password database. It is available on all Unix versions.\nAvailability: Unix, not WASI, not iOS.\nPassword database entries are reported as a tuple-like object, whose attributes\ncorrespond to the members of the passwd\nstructure (Attribute field below,\nsee <pwd.h>\n):\nIndex |\nAttribute |\nMeaning |\n|---|---|---|\n0 |\n|\nLogin name |\n1 |\n|\nOptional encrypted password |\n2 |\n|\nNumerical user ID |\n3 |\n|\nNumerical group ID |\n4 |\n|\nUser name or comment field |\n5 |\n|\nUser home directory |\n6 |\n|\nUser command interpreter |\nThe uid and gid items are integers, all others are strings. KeyError\nis\nraised if the entry asked for cannot be found.\nNote\nIn traditional Unix the field pw_passwd\nusually contains a password\nencrypted with a DES derived algorithm. However most\nmodern unices use a so-called shadow password system. On those unices the\npw_passwd field only contains an asterisk ('*'\n) or the letter 'x'\nwhere the encrypted password is stored in a file /etc/shadow\nwhich is\nnot world readable. Whether the pw_passwd field contains anything useful is\nsystem-dependent.\nIt defines the following items:\n- pwd.getpwuid(uid)Â¶\nReturn the password database entry for the given numeric user ID.\n- pwd.getpwnam(name)Â¶\nReturn the password database entry for the given user name.\n- pwd.getpwall()Â¶\nReturn a list of all available password database entries, in arbitrary order.\nSee also\n- Module\ngrp\nAn interface to the group database, similar to this."}
{"url": "https://docs.python.org/3/library/termios.html", "title": "", "text": "termios\nâ POSIX style tty controlÂ¶\nThis module provides an interface to the POSIX calls for tty I/O control. For a complete description of these calls, see termios(3) Unix manual page. It is only available for those Unix versions that support POSIX termios style tty I/O control configured during installation.\nAvailability: Unix.\nAll functions in this module take a file descriptor fd as their first\nargument. This can be an integer file descriptor, such as returned by\nsys.stdin.fileno()\n, or a file object, such as sys.stdin\nitself.\nThis module also defines all the constants needed to work with the functions provided here; these have the same name as their counterparts in C. Please refer to your system documentation for more information on using these terminal control interfaces.\nThe module defines the following functions:\n- termios.tcgetattr(fd)Â¶\nReturn a list containing the tty attributes for file descriptor fd, as follows:\n[iflag, oflag, cflag, lflag, ispeed, ospeed, cc]\nwhere cc is a list of the tty special characters (each a string of length 1, except the items with indicesVMIN\nandVTIME\n, which are integers when these fields are defined). The interpretation of the flags and the speeds as well as the indexing in the cc array must be done using the symbolic constants defined in thetermios\nmodule.\n- termios.tcsetattr(fd, when, attributes)Â¶\nSet the tty attributes for file descriptor fd from the attributes, which is a list like the one returned by\ntcgetattr()\n. The when argument determines when the attributes are changed:- termios.TCSANOWÂ¶\nChange attributes immediately.\n- termios.TCSADRAINÂ¶\nChange attributes after transmitting all queued output.\n- termios.TCSAFLUSHÂ¶\nChange attributes after transmitting all queued output and discarding all queued input.\n- termios.tcsendbreak(fd, duration)Â¶\nSend a break on file descriptor fd. A zero duration sends a break for 0.25â0.5 seconds; a nonzero duration has a system dependent meaning.\n- termios.tcdrain(fd)Â¶\nWait until al"}
{"url": "https://docs.python.org/3/library/html.html", "title": "", "text": "html\nâ HyperText Markup Language supportÂ¶\nSource code: Lib/html/__init__.py\nThis module defines utilities to manipulate HTML.\n- html.escape(s, quote=True)Â¶\nConvert the characters\n&\n,<\nand>\nin string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag quote is true (the default), the characters (\"\n) and ('\n) are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in<a href=\"...\">\n. If quote is set to false, the characters (\"\n) and ('\n) are not translated.Added in version 3.2.\n- html.unescape(s)Â¶\nConvert all named and numeric character references (e.g.\n>\n,>\n,>\n) in the string s to the corresponding Unicode characters. This function uses the rules defined by the HTML 5 standard for both valid and invalid character references, and thelist of HTML 5 named character references\n.Added in version 3.4.\nSubmodules in the html\npackage are:\nhtml.parser\nâ HTML/XHTML parser with lenient parsing modehtml.entities\nâ HTML entity definitions"}
{"url": "https://docs.python.org/3/library/weakref.html", "title": "", "text": "weakref\nâ Weak referencesÂ¶\nSource code: Lib/weakref.py\nThe weakref\nmodule allows the Python programmer to create weak\nreferences to objects.\nIn the following, the term referent means the object which is referred to by a weak reference.\nA weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.\nA primary use for weak references is to implement caches or mappings holding large objects, where itâs desired that a large object not be kept alive solely because it appears in a cache or mapping.\nFor example, if you have a number of large binary image objects, you may wish to\nassociate a name with each. If you used a Python dictionary to map names to\nimages, or images to names, the image objects would remain alive just because\nthey appeared as values or keys in the dictionaries. The\nWeakKeyDictionary\nand WeakValueDictionary\nclasses supplied by\nthe weakref\nmodule are an alternative, using weak references to construct\nmappings that donât keep objects alive solely because they appear in the mapping\nobjects. If, for example, an image object is a value in a\nWeakValueDictionary\n, then when the last remaining references to that\nimage object are the weak references held by weak mappings, garbage collection\ncan reclaim the object, and its corresponding entries in weak mappings are\nsimply deleted.\nWeakKeyDictionary\nand WeakValueDictionary\nuse weak references\nin their implementation, setting up callback functions on the weak references\nthat notify the weak dictionaries when a key or value has been reclaimed by\ngarbage collection. WeakSet\nimplements the set\ninterface,\nbut keeps weak references to its elements, just like a\nWeakKeyDictionary\ndoes.\nfinalize\nprovides a straight forward w"}
{"url": "https://docs.python.org/3/library/_thread.html", "title": "", "text": "_thread\nâ Low-level threading APIÂ¶\nThis module provides low-level primitives for working with multiple threads\n(also called light-weight processes or tasks) â multiple threads of\ncontrol sharing their global data space. For synchronization, simple locks\n(also called mutexes or binary semaphores) are provided.\nThe threading\nmodule provides an easier to use and higher-level\nthreading API built on top of this module.\nChanged in version 3.7: This module used to be optional, it is now always available.\nThis module defines the following constants and functions:\n- exception _thread.errorÂ¶\nRaised on thread-specific errors.\nChanged in version 3.3: This is now a synonym of the built-in\nRuntimeError\n.\n- _thread.LockTypeÂ¶\nThis is the type of lock objects.\n- _thread.start_new_thread(function, args[, kwargs])Â¶\nStart a new thread and return its identifier. The thread executes the function function with the argument list args (which must be a tuple). The optional kwargs argument specifies a dictionary of keyword arguments.\nWhen the function returns, the thread silently exits.\nWhen the function terminates with an unhandled exception,\nsys.unraisablehook()\nis called to handle the exception. The object attribute of the hook argument is function. By default, a stack trace is printed and then the thread exits (but other threads continue to run).When the function raises a\nSystemExit\nexception, it is silently ignored.Raises an auditing event\n_thread.start_new_thread\nwith argumentsfunction\n,args\n,kwargs\n.Changed in version 3.8:\nsys.unraisablehook()\nis now used to handle unhandled exceptions.\n- _thread.interrupt_main(signum=signal.SIGINT, /)Â¶\nSimulate the effect of a signal arriving in the main thread. A thread can use this function to interrupt the main thread, though there is no guarantee that the interruption will happen immediately.\nIf given, signum is the number of the signal to simulate. If signum is not given,\nsignal.SIGINT\nis simulated.If the given signal isnât handled by Python"}
{"url": "https://docs.python.org/3/library/tokenize.html", "title": "", "text": "tokenize\nâ Tokenizer for Python sourceÂ¶\nSource code: Lib/tokenize.py\nThe tokenize\nmodule provides a lexical scanner for Python source code,\nimplemented in Python. The scanner in this module returns comments as tokens\nas well, making it useful for implementing âpretty-printersâ, including\ncolorizers for on-screen displays.\nTo simplify token stream handling, all operator and\ndelimiter tokens and Ellipsis\nare returned using\nthe generic OP\ntoken type. The exact\ntype can be determined by checking the exact_type\nproperty on the\nnamed tuple returned from tokenize.tokenize()\n.\nWarning\nNote that the functions in this module are only designed to parse\nsyntactically valid Python code (code that does not raise when parsed\nusing ast.parse()\n). The behavior of the functions in this module is\nundefined when providing invalid Python code and it can change at any\npoint.\nTokenizing InputÂ¶\nThe primary entry point is a generator:\n- tokenize.tokenize(readline)Â¶\nThe\ntokenize()\ngenerator requires one argument, readline, which must be a callable object which provides the same interface as theio.IOBase.readline()\nmethod of file objects. Each call to the function should return one line of input as bytes.The generator produces 5-tuples with these members: the token type; the token string; a 2-tuple\n(srow, scol)\nof ints specifying the row and column where the token begins in the source; a 2-tuple(erow, ecol)\nof ints specifying the row and column where the token ends in the source; and the line on which the token was found. The line passed (the last tuple item) is the physical line. The 5 tuple is returned as a named tuple with the field names:type string start end line\n.The returned named tuple has an additional property named\nexact_type\nthat contains the exact operator type forOP\ntokens. For all other token typesexact_type\nequals the named tupletype\nfield.Changed in version 3.1: Added support for named tuples.\nChanged in version 3.3: Added support for\nexact_type\n.tokenize()\ndetermines the "}
{"url": "https://docs.python.org/3/library/compileall.html", "title": "", "text": "compileall\nâ Byte-compile Python librariesÂ¶\nSource code: Lib/compileall.py\nThis module provides some utility functions to support installing Python libraries. These functions compile Python source files in a directory tree. This module can be used to create the cached byte-code files at library installation time, which makes them available for use even by users who donât have write permission to the library directories.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nCommand-line useÂ¶\nThis module can work as a script (using python -m compileall) to compile Python sources.\n- directory ...Â¶\n- file ...Â¶\nPositional arguments are files to compile or directories that contain source files, traversed recursively. If no argument is given, behave as if the command line was\n-l <directories from sys.path>\n.\n- -lÂ¶\nDo not recurse into subdirectories, only compile source code files directly contained in the named or implied directories.\n- -fÂ¶\nForce rebuild even if timestamps are up-to-date.\n- -qÂ¶\nDo not print the list of files compiled. If passed once, error messages will still be printed. If passed twice (\n-qq\n), all output is suppressed.\n- -d destdirÂ¶\nDirectory prepended to the path to each file being compiled. This will appear in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.\n- -s strip_prefixÂ¶\nRemove the given prefix from paths recorded in the\n.pyc\nfiles. Paths are made relative to the prefix.This option can be used with\n-p\nbut not with-d\n.\n- -p prepend_prefixÂ¶\nPrepend the given prefix to paths recorded in the\n.pyc\nfiles. Use-p /\nto make the paths absolute.This option can be used with\n-s\nbut not with-d\n.\n- -x regexÂ¶\nregex is used to search the full path to each file considered for compilation, and if the regex "}
{"url": "https://docs.python.org/3/library/keyword.html", "title": "", "text": "keyword\nâ Testing for Python keywordsÂ¶\nSource code: Lib/keyword.py\nThis module allows a Python program to determine if a string is a keyword or soft keyword.\n- keyword.kwlistÂ¶\nSequence containing all the keywords defined for the interpreter. If any keywords are defined to only be active when particular\n__future__\nstatements are in effect, these will be included as well.\n- keyword.issoftkeyword(s)Â¶\nReturn\nTrue\nif s is a Python soft keyword.Added in version 3.9.\n- keyword.softkwlistÂ¶\nSequence containing all the soft keywords defined for the interpreter. If any soft keywords are defined to only be active when particular\n__future__\nstatements are in effect, these will be included as well.Added in version 3.9."}
{"url": "https://docs.python.org/3/library/netdata.html", "title": "", "text": "Internet Data HandlingÂ¶\nThis chapter describes modules which support handling data formats commonly used on the internet.\nemail\nâ An email and MIME handling packageemail.message\n: Representing an email messageemail.parser\n: Parsing email messagesemail.generator\n: Generating MIME documentsemail.policy\n: Policy Objectsemail.errors\n: Exception and Defect classesemail.headerregistry\n: Custom Header Objectsemail.contentmanager\n: Managing MIME Contentemail\n: Examplesemail.message.Message\n: Representing an email message using thecompat32\nAPIemail.mime\n: Creating email and MIME objects from scratchemail.header\n: Internationalized headersemail.charset\n: Representing character setsemail.encoders\n: Encodersemail.utils\n: Miscellaneous utilitiesemail.iterators\n: Iterators\njson\nâ JSON encoder and decodermailbox\nâ Manipulate mailboxes in various formatsmimetypes\nâ Map filenames to MIME typesbase64\nâ Base16, Base32, Base64, Base85 Data Encodingsbinascii\nâ Convert between binary and ASCIIquopri\nâ Encode and decode MIME quoted-printable data"}
{"url": "https://docs.python.org/3/library/runpy.html", "title": "", "text": "runpy\nâ Locating and executing Python modulesÂ¶\nSource code: Lib/runpy.py\nThe runpy\nmodule is used to locate and run Python modules without\nimporting them first. Its main use is to implement the -m\ncommand\nline switch that allows scripts to be located using the Python module\nnamespace rather than the filesystem.\nNote that this is not a sandbox module - all code is executed in the current process, and any side effects (such as cached imports of other modules) will remain in place after the functions have returned.\nFurthermore, any functions and classes defined by the executed code are not\nguaranteed to work correctly after a runpy\nfunction has returned.\nIf that limitation is not acceptable for a given use case, importlib\nis likely to be a more suitable choice than this module.\nThe runpy\nmodule provides two functions:\n- runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)Â¶\nExecute the code of the specified module and return the resulting moduleâs globals dictionary. The moduleâs code is first located using the standard import mechanism (refer to PEP 302 for details) and then executed in a fresh module namespace.\nThe mod_name argument should be an absolute module name. If the module name refers to a package rather than a normal module, then that package is imported and the\n__main__\nsubmodule within that package is then executed and the resulting module globals dictionary returned.The optional dictionary argument init_globals may be used to pre-populate the moduleâs globals dictionary before the code is executed. init_globals will not be modified. If any of the special global variables below are defined in init_globals, those definitions are overridden by\nrun_module()\n.The special global variables\n__name__\n,__spec__\n,__file__\n,__cached__\n,__loader__\nand__package__\nare set in the globals dictionary before the module code is executed. (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implement"}
{"url": "https://docs.python.org/3/library/html.parser.html", "title": "", "text": "html.parser\nâ Simple HTML and XHTML parserÂ¶\nSource code: Lib/html/parser.py\nThis module defines a class HTMLParser\nwhich serves as the basis for\nparsing text files formatted in HTML (HyperText Mark-up Language) and XHTML.\n- class html.parser.HTMLParser(*, convert_charrefs=True)Â¶\nCreate a parser instance able to parse invalid markup.\nIf convert_charrefs is\nTrue\n(the default), all character references (except the ones inscript\n/style\nelements) are automatically converted to the corresponding Unicode characters.An\nHTMLParser\ninstance is fed HTML data and calls handler methods when start tags, end tags, text, comments, and other markup elements are encountered. The user should subclassHTMLParser\nand override its methods to implement the desired behavior.This parser does not check that end tags match start tags or call the end-tag handler for elements which are closed implicitly by closing an outer element.\nChanged in version 3.4: convert_charrefs keyword argument added.\nChanged in version 3.5: The default value for argument convert_charrefs is now\nTrue\n.\nExample HTML Parser ApplicationÂ¶\nAs a basic example, below is a simple HTML parser that uses the\nHTMLParser\nclass to print out start tags, end tags, and data\nas they are encountered:\nfrom html.parser import HTMLParser\nclass MyHTMLParser(HTMLParser):\ndef handle_starttag(self, tag, attrs):\nprint(\"Encountered a start tag:\", tag)\ndef handle_endtag(self, tag):\nprint(\"Encountered an end tag :\", tag)\ndef handle_data(self, data):\nprint(\"Encountered some data :\", data)\nparser = MyHTMLParser()\nparser.feed('<html><head><title>Test</title></head>'\n'<body><h1>Parse me!</h1></body></html>')\nThe output will then be:\nEncountered a start tag: html\nEncountered a start tag: head\nEncountered a start tag: title\nEncountered some data : Test\nEncountered an end tag : title\nEncountered an end tag : head\nEncountered a start tag: body\nEncountered a start tag: h1\nEncountered some data : Parse me!\nEncountered an end tag : h1\nEncountered an end t"}
{"url": "https://docs.python.org/3/library/curses.ascii.html", "title": "", "text": "curses.ascii\nâ Utilities for ASCII charactersÂ¶\nSource code: Lib/curses/ascii.py\nThe curses.ascii\nmodule supplies name constants for ASCII characters and\nfunctions to test membership in various ASCII character classes. The constants\nsupplied are names for control characters as follows:\nName |\nMeaning |\n|---|---|\n|\n|\n|\nStart of heading, console interrupt |\n|\nStart of text |\n|\nEnd of text |\n|\nEnd of transmission |\n|\nEnquiry, goes with |\n|\nAcknowledgement |\n|\nBell |\n|\nBackspace |\n|\nTab |\n|\nAlias for |\n|\nLine feed |\n|\nAlias for |\n|\nVertical tab |\n|\nForm feed |\n|\nCarriage return |\n|\nShift-out, begin alternate character set |\n|\nShift-in, resume default character set |\n|\nData-link escape |\n|\nXON, for flow control |\n|\nDevice control 2, block-mode flow control |\n|\nXOFF, for flow control |\n|\nDevice control 4 |\n|\nNegative acknowledgement |\n|\nSynchronous idle |\n|\nEnd transmission block |\n|\nCancel |\n|\nEnd of medium |\n|\nSubstitute |\n|\nEscape |\n|\nFile separator |\n|\nGroup separator |\n|\nRecord separator, block-mode terminator |\n|\nUnit separator |\n|\nSpace |\n|\nDelete |\nNote that many of these have little practical significance in modern usage. The mnemonics derive from teleprinter conventions that predate digital computers.\nThe module supplies the following functions, patterned on those in the standard C library:\n- curses.ascii.isalnum(c)Â¶\nChecks for an ASCII alphanumeric character; it is equivalent to\nisalpha(c) or isdigit(c)\n.\n- curses.ascii.isalpha(c)Â¶\nChecks for an ASCII alphabetic character; it is equivalent to\nisupper(c) or islower(c)\n.\n- curses.ascii.isascii(c)Â¶\nChecks for a character value that fits in the 7-bit ASCII set.\n- curses.ascii.isblank(c)Â¶\nChecks for an ASCII whitespace character; space or horizontal tab.\n- curses.ascii.iscntrl(c)Â¶\nChecks for an ASCII control character (in the range 0x00 to 0x1f or 0x7f).\n- curses.ascii.isdigit(c)Â¶\nChecks for an ASCII decimal digit,\n'0'\nthrough'9'\n. This is equivalent toc in string.digits\n.\n- curses.ascii.isgraph(c)Â¶\nChecks fo"}
{"url": "https://docs.python.org/3/library/intro.html", "title": "", "text": "IntroductionÂ¶\nThe âPython libraryâ contains several different kinds of components.\nIt contains data types that would normally be considered part of the âcoreâ of a language, such as numbers and lists. For these types, the Python language core defines the form of literals and places some constraints on their semantics, but does not fully define the semantics. (On the other hand, the language core does define syntactic properties like the spelling and priorities of operators.)\nThe library also contains built-in functions and exceptions â objects that can\nbe used by all Python code without the need of an import\nstatement.\nSome of these are defined by the core language, but many are not essential for\nthe core semantics and are only described here.\nThe bulk of the library, however, consists of a collection of modules. There are many ways to dissect this collection. Some modules are written in C and built in to the Python interpreter; others are written in Python and imported in source form. Some modules provide interfaces that are highly specific to Python, like printing a stack trace; some provide interfaces that are specific to particular operating systems, such as access to specific hardware; others provide interfaces that are specific to a particular application domain, like the World Wide Web. Some modules are available in all versions and ports of Python; others are only available when the underlying system supports or requires them; yet others are available only when a particular configuration option was chosen at the time when Python was compiled and installed.\nThis manual is organized âfrom the inside out:â it first describes the built-in functions, data types and exceptions, and finally the modules, grouped in chapters of related modules.\nThis means that if you start reading this manual from the start, and skip to the\nnext chapter when you get bored, you will get a reasonable overview of the\navailable modules and application areas that are supported by the Pyt"}
{"url": "https://docs.python.org/3/library/internet.html", "title": "", "text": "Internet Protocols and SupportÂ¶\nThe modules described in this chapter implement internet protocols and support\nfor related technology. They are all implemented in Python. Most of these\nmodules require the presence of the system-dependent module socket\n, which\nis currently supported on most popular platforms. Here is an overview:\nwebbrowser\nâ Convenient web-browser controllerwsgiref\nâ WSGI Utilities and Reference Implementationwsgiref.util\nâ WSGI environment utilitieswsgiref.headers\nâ WSGI response header toolswsgiref.simple_server\nâ a simple WSGI HTTP serverwsgiref.validate\nâ WSGI conformance checkerwsgiref.handlers\nâ server/gateway base classeswsgiref.types\nâ WSGI types for static type checking- Examples\nurllib\nâ URL handling modulesurllib.request\nâ Extensible library for opening URLs- Request Objects\n- OpenerDirector Objects\n- BaseHandler Objects\n- HTTPRedirectHandler Objects\n- HTTPCookieProcessor Objects\n- ProxyHandler Objects\n- HTTPPasswordMgr Objects\n- HTTPPasswordMgrWithPriorAuth Objects\n- AbstractBasicAuthHandler Objects\n- HTTPBasicAuthHandler Objects\n- ProxyBasicAuthHandler Objects\n- AbstractDigestAuthHandler Objects\n- HTTPDigestAuthHandler Objects\n- ProxyDigestAuthHandler Objects\n- HTTPHandler Objects\n- HTTPSHandler Objects\n- FileHandler Objects\n- DataHandler Objects\n- FTPHandler Objects\n- CacheFTPHandler Objects\n- UnknownHandler Objects\n- HTTPErrorProcessor Objects\n- Examples\n- Legacy interface\nurllib.request\nRestrictions\nurllib.response\nâ Response classes used by urlliburllib.parse\nâ Parse URLs into componentsurllib.error\nâ Exception classes raised by urllib.requesturllib.robotparser\nâ Parser for robots.txthttp\nâ HTTP moduleshttp.client\nâ HTTP protocol clientftplib\nâ FTP protocol clientpoplib\nâ POP3 protocol clientimaplib\nâ IMAP4 protocol clientsmtplib\nâ SMTP protocol clientuuid\nâ UUID objects according to RFC 4122socketserver\nâ A framework for network servershttp.server\nâ HTTP servershttp.cookies\nâ HTTP state managementhttp.cookiejar\nâ Cookie handling f"}
{"url": "https://docs.python.org/3/library/importlib.metadata.html", "title": "", "text": "importlib.metadata\nâ Accessing package metadataÂ¶\nAdded in version 3.8.\nChanged in version 3.10: importlib.metadata\nis no longer provisional.\nSource code: Lib/importlib/metadata/__init__.py\nimportlib.metadata\nis a library that provides access to\nthe metadata of an installed Distribution Package,\nsuch as its entry points\nor its top-level names (Import Packages, modules, if any).\nBuilt in part on Pythonâs import system, this library\nintends to replace similar functionality in the entry point\nAPI and metadata API of pkg_resources\n. Along with\nimportlib.resources\n,\nthis package can eliminate the need to use the older and less efficient\npkg_resources\npackage.\nimportlib.metadata\noperates on third-party distribution packages\ninstalled into Pythonâs site-packages\ndirectory via tools such as\npip.\nSpecifically, it works with distributions with discoverable\ndist-info\nor egg-info\ndirectories,\nand metadata defined by the Core metadata specifications.\nImportant\nThese are not necessarily equivalent to or correspond 1:1 with the top-level import package names that can be imported inside Python code. One distribution package can contain multiple import packages (and single modules), and one top-level import package may map to multiple distribution packages if it is a namespace package. You can use packages_distributions() to get a mapping between them.\nBy default, distribution metadata can live on the file system\nor in zip archives on\nsys.path\n. Through an extension mechanism, the metadata can live almost\nanywhere.\nSee also\n- https://importlib-metadata.readthedocs.io/\nThe documentation for\nimportlib_metadata\n, which supplies a backport ofimportlib.metadata\n. This includes an API reference for this moduleâs classes and functions, as well as a migration guide for existing users ofpkg_resources\n.\nOverviewÂ¶\nLetâs say you wanted to get the version string for a\nDistribution Package youâve installed\nusing pip\n. We start by creating a virtual environment and installing\nsomething into it:\n$"}
{"url": "https://docs.python.org/3/library/gc.html", "title": "", "text": "gc\nâ Garbage Collector interfaceÂ¶\nThis module provides an interface to the optional garbage collector. It\nprovides the ability to disable the collector, tune the collection frequency,\nand set debugging options. It also provides access to unreachable objects that\nthe collector found but cannot free. Since the collector supplements the\nreference counting already used in Python, you can disable the collector if you\nare sure your program does not create reference cycles. Automatic collection\ncan be disabled by calling gc.disable()\n. To debug a leaking program call\ngc.set_debug(gc.DEBUG_LEAK)\n. Notice that this includes\ngc.DEBUG_SAVEALL\n, causing garbage-collected objects to be saved in\ngc.garbage for inspection.\nThe gc\nmodule provides the following functions:\n- gc.enable()Â¶\nEnable automatic garbage collection.\n- gc.disable()Â¶\nDisable automatic garbage collection.\n- gc.isenabled()Â¶\nReturn\nTrue\nif automatic collection is enabled.\n- gc.collect(generation=2)Â¶\nWith no arguments, run a full collection. The optional argument generation may be an integer specifying which generation to collect (from 0 to 2). A\nValueError\nis raised if the generation number is invalid. The sum of collected objects and uncollectable objects is returned.The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run. Not all items in some free lists may be freed due to the particular implementation, in particular\nfloat\n.The effect of calling\ngc.collect()\nwhile the interpreter is already performing a collection is undefined.\n- gc.set_debug(flags)Â¶\nSet the garbage collection debugging flags. Debugging information will be written to\nsys.stderr\n. See below for a list of debugging flags which can be combined using bit operations to control debugging.\n- gc.get_debug()Â¶\nReturn the debugging flags currently set.\n- gc.get_objects(generation=None)Â¶\nReturns a list of all objects tracked by the collector, excluding the li"}
{"url": "https://docs.python.org/3/library/sched.html", "title": "", "text": "sched\nâ Event schedulerÂ¶\nSource code: Lib/sched.py\nThe sched\nmodule defines a class which implements a general purpose event\nscheduler:\n- class sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)Â¶\nThe\nscheduler\nclass defines a generic interface to scheduling events. It needs two functions to actually deal with the âoutside worldâ â timefunc should be callable without arguments, and return a number (the âtimeâ, in any units whatsoever). The delayfunc function should be callable with one argument, compatible with the output of timefunc, and should delay that many time units. delayfunc will also be called with the argument0\nafter each event is run to allow other threads an opportunity to run in multi-threaded applications.Changed in version 3.3: timefunc and delayfunc parameters are optional.\nChanged in version 3.3:\nscheduler\nclass can be safely used in multi-threaded environments.\nExample:\n>>> import sched, time\n>>> s = sched.scheduler(time.time, time.sleep)\n>>> def print_time(a='default'):\n... print(\"From print_time\", time.time(), a)\n...\n>>> def print_some_times():\n... print(time.time())\n... s.enter(10, 1, print_time)\n... s.enter(5, 2, print_time, argument=('positional',))\n... # despite having higher priority, 'keyword' runs after 'positional' as enter() is relative\n... s.enter(5, 1, print_time, kwargs={'a': 'keyword'})\n... s.enterabs(1_650_000_000, 10, print_time, argument=(\"first enterabs\",))\n... s.enterabs(1_650_000_000, 5, print_time, argument=(\"second enterabs\",))\n... s.run()\n... print(time.time())\n...\n>>> print_some_times()\n1652342830.3640375\nFrom print_time 1652342830.3642538 second enterabs\nFrom print_time 1652342830.3643398 first enterabs\nFrom print_time 1652342835.3694863 positional\nFrom print_time 1652342835.3696074 keyword\nFrom print_time 1652342840.369612 default\n1652342840.3697174\nScheduler ObjectsÂ¶\nscheduler\ninstances have the following methods and attributes:\n- scheduler.enterabs(time, priority, action, argument=(), kwargs={})Â¶\nSchedule"}
{"url": "https://docs.python.org/3/library/re.html", "title": "", "text": "re\nâ Regular expression operationsÂ¶\nSource code: Lib/re/\nThis module provides regular expression matching operations similar to those found in Perl.\nBoth patterns and strings to be searched can be Unicode strings (str\n)\nas well as 8-bit strings (bytes\n).\nHowever, Unicode strings and 8-bit strings cannot be mixed:\nthat is, you cannot match a Unicode string with a bytes pattern or\nvice-versa; similarly, when asking for a substitution, the replacement\nstring must be of the same type as both the pattern and the search string.\nRegular expressions use the backslash character ('\\'\n) to indicate\nspecial forms or to allow special characters to be used without invoking\ntheir special meaning. This collides with Pythonâs usage of the same\ncharacter for the same purpose in string literals; for example, to match\na literal backslash, one might have to write '\\\\\\\\'\nas the pattern\nstring, because the regular expression must be \\\\\n, and each\nbackslash must be expressed as \\\\\ninside a regular Python string\nliteral. Also, please note that any invalid escape sequences in Pythonâs\nusage of the backslash in string literals now generate a SyntaxWarning\nand in the future this will become a SyntaxError\n. This behaviour\nwill happen even if it is a valid escape sequence for a regular expression.\nThe solution is to use Pythonâs raw string notation for regular expression\npatterns; backslashes are not handled in any special way in a string literal\nprefixed with 'r'\n. So r\"\\n\"\nis a two-character string containing\n'\\'\nand 'n'\n, while \"\\n\"\nis a one-character string containing a\nnewline. Usually patterns will be expressed in Python code using this raw\nstring notation.\nIt is important to note that most regular expression operations are available as module-level functions and methods on compiled regular expressions. The functions are shortcuts that donât require you to compile a regex object first, but miss some fine-tuning parameters.\nSee also\nThe third-party regex module,\nwhich has an API compatible"}
{"url": "https://docs.python.org/3/library/ctypes.html", "title": "", "text": "ctypes\nâ A foreign function library for PythonÂ¶\nSource code: Lib/ctypes\nctypes\nis a foreign function library for Python. It provides C compatible\ndata types, and allows calling functions in DLLs or shared libraries. It can be\nused to wrap these libraries in pure Python.\nctypes tutorialÂ¶\nNote: The code samples in this tutorial use doctest\nto make sure that\nthey actually work. Since some code samples behave differently under Linux,\nWindows, or macOS, they contain doctest directives in comments.\nNote: Some code samples reference the ctypes c_int\ntype. On platforms\nwhere sizeof(long) == sizeof(int)\nit is an alias to c_long\n.\nSo, you should not be confused if c_long\nis printed if you would expect\nc_int\nâ they are actually the same type.\nLoading dynamic link librariesÂ¶\nctypes\nexports the cdll, and on Windows windll and oledll\nobjects, for loading dynamic link libraries.\nYou load libraries by accessing them as attributes of these objects. cdll\nloads libraries which export functions using the standard cdecl\ncalling\nconvention, while windll libraries call functions using the stdcall\ncalling convention. oledll also uses the stdcall\ncalling convention, and\nassumes the functions return a Windows HRESULT\nerror code. The error\ncode is used to automatically raise an OSError\nexception when the\nfunction call fails.\nChanged in version 3.3: Windows errors used to raise WindowsError\n, which is now an alias\nof OSError\n.\nHere are some examples for Windows. Note that msvcrt\nis the MS standard C\nlibrary containing most standard C functions, and uses the cdecl\ncalling\nconvention:\n>>> from ctypes import *\n>>> print(windll.kernel32)\n<WinDLL 'kernel32', handle ... at ...>\n>>> print(cdll.msvcrt)\n<CDLL 'msvcrt', handle ... at ...>\n>>> libc = cdll.msvcrt\n>>>\nWindows appends the usual .dll\nfile suffix automatically.\nNote\nAccessing the standard C library through cdll.msvcrt\nwill use an\noutdated version of the library that may be incompatible with the one\nbeing used by Python. Where possible, use"}
{"url": "https://docs.python.org/3/library/socketserver.html", "title": "", "text": "socketserver\nâ A framework for network serversÂ¶\nSource code: Lib/socketserver.py\nThe socketserver\nmodule simplifies the task of writing network servers.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThere are four basic concrete server classes:\n- class socketserver.TCPServer(server_address, RequestHandlerClass, bind_and_activate=True)Â¶\nThis uses the internet TCP protocol, which provides for continuous streams of data between the client and server. If bind_and_activate is true, the constructor automatically attempts to invoke\nserver_bind()\nandserver_activate()\n. The other parameters are passed to theBaseServer\nbase class.\n- class socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)Â¶\nThis uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit. The parameters are the same as for\nTCPServer\n.\n- class socketserver.UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=True)Â¶\n- class socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)Â¶\nThese more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; theyâre not available on non-Unix platforms. The parameters are the same as for\nTCPServer\n.\nThese four classes process requests synchronously; each request must be\ncompleted before the next request can be started. This isnât suitable if each\nrequest takes a long time to complete, because it requires a lot of computation,\nor because it returns a lot of data which the client is slow to process. The\nsolution is to create a separate process or thread to handle each request; the\nForkingMixIn\nand ThreadingMixIn\nmix-in classes can be used to\nsupport asynchronous behaviour.\nCreating a server requires several steps. First, you must create a request\nhandler class by subclassing the BaseRequestHandler\nclass and"}
{"url": "https://docs.python.org/3/library/unittest.mock-examples.html", "title": "", "text": "unittest.mock\nâ getting startedÂ¶\nAdded in version 3.3.\nUsing MockÂ¶\nMock Patching MethodsÂ¶\nCommon uses for Mock\nobjects include:\nPatching methods\nRecording method calls on objects\nYou might want to replace a method on an object to check that it is called with the correct arguments by another part of the system:\n>>> real = SomeClass()\n>>> real.method = MagicMock(name='method')\n>>> real.method(3, 4, 5, key='value')\n<MagicMock name='method()' id='...'>\nOnce our mock has been used (real.method\nin this example) it has methods\nand attributes that allow you to make assertions about how it has been used.\nNote\nIn most of these examples the Mock\nand MagicMock\nclasses\nare interchangeable. As the MagicMock\nis the more capable class it makes\na sensible one to use by default.\nOnce the mock has been called its called\nattribute is set to\nTrue\n. More importantly we can use the assert_called_with()\nor\nassert_called_once_with()\nmethod to check that it was called with\nthe correct arguments.\nThis example tests that calling ProductionClass().method\nresults in a call to\nthe something\nmethod:\n>>> class ProductionClass:\n... def method(self):\n... self.something(1, 2, 3)\n... def something(self, a, b, c):\n... pass\n...\n>>> real = ProductionClass()\n>>> real.something = MagicMock()\n>>> real.method()\n>>> real.something.assert_called_once_with(1, 2, 3)\nMock for Method Calls on an ObjectÂ¶\nIn the last example we patched a method directly on an object to check that it was called correctly. Another common use case is to pass an object into a method (or some part of the system under test) and then check that it is used in the correct way.\nThe simple ProductionClass\nbelow has a closer\nmethod. If it is called with\nan object then it calls close\non it.\n>>> class ProductionClass:\n... def closer(self, something):\n... something.close()\n...\nSo to test it we need to pass in an object with a close\nmethod and check\nthat it was called correctly.\n>>> real = ProductionClass()\n>>> mock = Mock()\n>>> real.closer(mock"}
{"url": "https://docs.python.org/3/library/pyclbr.html", "title": "", "text": "pyclbr\nâ Python module browser supportÂ¶\nSource code: Lib/pyclbr.py\nThe pyclbr\nmodule provides limited information about the\nfunctions, classes, and methods defined in a Python-coded module. The\ninformation is sufficient to implement a module browser. The\ninformation is extracted from the Python source code rather than by\nimporting the module, so this module is safe to use with untrusted code.\nThis restriction makes it impossible to use this module with modules not\nimplemented in Python, including all standard and optional extension\nmodules.\n- pyclbr.readmodule(module, path=None)Â¶\nReturn a dictionary mapping module-level class names to class descriptors. If possible, descriptors for imported base classes are included. Parameter module is a string with the name of the module to read; it may be the name of a module within a package. If given, path is a sequence of directory paths prepended to\nsys.path\n, which is used to locate the module source code.This function is the original interface and is only kept for back compatibility. It returns a filtered version of the following.\n- pyclbr.readmodule_ex(module, path=None)Â¶\nReturn a dictionary-based tree containing a function or class descriptors for each function and class defined in the module with a\ndef\norclass\nstatement. The returned dictionary maps module-level function and class names to their descriptors. Nested objects are entered into the children dictionary of their parent. As with readmodule, module names the module to be read and path is prepended to sys.path. If the module being read is a package, the returned dictionary has a key'__path__'\nwhose value is a list containing the package search path.\nAdded in version 3.7: Descriptors for nested definitions. They are accessed through the new children attribute. Each has a new parent attribute.\nThe descriptors returned by these functions are instances of Function and Class classes. Users are not expected to create instances of these classes.\nFunction ObjectsÂ¶\n- c"}
{"url": "https://docs.python.org/3/library/tkinter.dnd.html", "title": "", "text": "tkinter.dnd\nâ Drag and drop supportÂ¶\nSource code: Lib/tkinter/dnd.py\nNote\nThis is experimental and due to be deprecated when it is replaced with the Tk DND.\nThe tkinter.dnd\nmodule provides drag-and-drop support for objects within\na single application, within the same window or between windows. To enable an\nobject to be dragged, you must create an event binding for it that starts the\ndrag-and-drop process. Typically, you bind a ButtonPress event to a callback\nfunction that you write (see Bindings and Events). The function should\ncall dnd_start()\n, where âsourceâ is the object to be dragged, and âeventâ\nis the event that invoked the call (the argument to your callback function).\nSelection of a target object occurs as follows:\nTop-down search of area under mouse for target widget\nTarget widget should have a callable dnd_accept attribute\nIf dnd_accept is not present or returns\nNone\n, search moves to parent widgetIf no target widget is found, then the target object is\nNone\nCall to <old_target>.dnd_leave(source, event)\nCall to <new_target>.dnd_enter(source, event)\nCall to <target>.dnd_commit(source, event) to notify of drop\nCall to <source>.dnd_end(target, event) to signal end of drag-and-drop\n- class tkinter.dnd.DndHandler(source, event)Â¶\nThe DndHandler class handles drag-and-drop events tracking Motion and ButtonRelease events on the root of the event widget.\n- cancel(event=None)Â¶\nCancel the drag-and-drop process.\n- finish(event, commit=0)Â¶\nExecute end of drag-and-drop functions.\n- on_motion(event)Â¶\nInspect area below mouse for target objects while drag is performed.\n- on_release(event)Â¶\nSignal end of drag when the release pattern is triggered.\n- tkinter.dnd.dnd_start(source, event)Â¶\nFactory function for drag-and-drop process.\nSee also"}
{"url": "https://docs.python.org/3/library/importlib.resources.abc.html", "title": "", "text": "importlib.resources.abc\nâ Abstract base classes for resourcesÂ¶\nSource code: Lib/importlib/resources/abc.py\nAdded in version 3.11.\n- class importlib.resources.abc.ResourceReaderÂ¶\nSuperseded by TraversableResources\nAn abstract base class to provide the ability to read resources.\nFrom the perspective of this ABC, a resource is a binary artifact that is shipped within a package. Typically this is something like a data file that lives next to the\n__init__.py\nfile of the package. The purpose of this class is to help abstract out the accessing of such data files so that it does not matter if the package and its data file(s) are stored e.g. in a zip file versus on the file system.For any of methods of this class, a resource argument is expected to be a path-like object which represents conceptually just a file name. This means that no subdirectory paths should be included in the resource argument. This is because the location of the package the reader is for, acts as the âdirectoryâ. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).\nLoaders that wish to support resource reading are expected to provide a method called\nget_resource_reader(fullname)\nwhich returns an object implementing this ABCâs interface. If the module specified by fullname is not a package, this method should returnNone\n. An object compatible with this ABC should only be returned when the specified module is a package.Deprecated since version 3.12: Use\nimportlib.resources.abc.TraversableResources\ninstead.- abstractmethod open_resource(resource)Â¶\nReturns an opened, file-like object for binary reading of the resource.\nIf the resource cannot be found,\nFileNotFoundError\nis raised.\n- abstractmethod resource_path(resource)Â¶\nReturns the file system path to the resource.\nIf the resource does not concretely "}
{"url": "https://docs.python.org/3/library/types.html", "title": "", "text": "types\nâ Dynamic type creation and names for built-in typesÂ¶\nSource code: Lib/types.py\nThis module defines utility functions to assist in dynamic creation of new types.\nIt also defines names for some object types that are used by the standard\nPython interpreter, but not exposed as builtins like int\nor\nstr\nare.\nFinally, it provides some additional type-related utility classes and functions that are not fundamental enough to be builtins.\nDynamic Type CreationÂ¶\n- types.new_class(name, bases=(), kwds=None, exec_body=None)Â¶\nCreates a class object dynamically using the appropriate metaclass.\nThe first three arguments are the components that make up a class definition header: the class name, the base classes (in order), the keyword arguments (such as\nmetaclass\n).The exec_body argument is a callback that is used to populate the freshly created class namespace. It should accept the class namespace as its sole argument and update the namespace directly with the class contents. If no callback is provided, it has the same effect as passing in\nlambda ns: None\n.Added in version 3.3.\n- types.prepare_class(name, bases=(), kwds=None)Â¶\nCalculates the appropriate metaclass and creates the class namespace.\nThe arguments are the components that make up a class definition header: the class name, the base classes (in order) and the keyword arguments (such as\nmetaclass\n).The return value is a 3-tuple:\nmetaclass, namespace, kwds\nmetaclass is the appropriate metaclass, namespace is the prepared class namespace and kwds is an updated copy of the passed in kwds argument with any\n'metaclass'\nentry removed. If no kwds argument is passed in, this will be an empty dict.Added in version 3.3.\nChanged in version 3.6: The default value for the\nnamespace\nelement of the returned tuple has changed. Now an insertion-order-preserving mapping is used when the metaclass does not have a__prepare__\nmethod.\nSee also\n- Metaclasses\nFull details of the class creation process supported by these functions\n- PEP 3"}
{"url": "https://docs.python.org/3/library/security_warnings.html", "title": "", "text": "Security ConsiderationsÂ¶\nThe following modules have specific security considerations:\nhashlib\n: all constructors take a âusedforsecurityâ keyword-only argument disabling known insecure and blocked algorithmshttp.server\nis not suitable for production use, only implementing basic security checks. See the security considerations.random\nshouldnât be used for security purposes, usesecrets\ninsteadshelve\n: shelve is based on pickle and thus unsuitable for dealing with untrusted sourcestempfile\n: mktemp is deprecated due to vulnerability to race conditionszipfile\n: maliciously prepared .zip files can cause disk volume exhaustion\nThe -I\ncommand line option can be used to run Python in isolated\nmode. When it cannot be used, the -P\noption or the\nPYTHONSAFEPATH\nenvironment variable can be used to not prepend a\npotentially unsafe path to sys.path\nsuch as the current directory, the\nscriptâs directory or an empty string."}
{"url": "https://docs.python.org/3/library/urllib.parse.html", "title": "", "text": "urllib.parse\nâ Parse URLs into componentsÂ¶\nSource code: Lib/urllib/parse.py\nThis module defines a standard interface to break Uniform Resource Locator (URL) strings up in components (addressing scheme, network location, path etc.), to combine the components back into a URL string, and to convert a ârelative URLâ to an absolute URL given a âbase URL.â\nThe module has been designed to match the internet RFC on Relative Uniform\nResource Locators. It supports the following URL schemes: file\n, ftp\n,\ngopher\n, hdl\n, http\n, https\n, imap\n, itms-services\n, mailto\n, mms\n,\nnews\n, nntp\n, prospero\n, rsync\n, rtsp\n, rtsps\n, rtspu\n,\nsftp\n, shttp\n, sip\n, sips\n, snews\n, svn\n, svn+ssh\n,\ntelnet\n, wais\n, ws\n, wss\n.\nCPython implementation detail: The inclusion of the itms-services\nURL scheme can prevent an app from\npassing Appleâs App Store review process for the macOS and iOS App Stores.\nHandling for the itms-services\nscheme is always removed on iOS; on\nmacOS, it may be removed if CPython has been built with the\n--with-app-store-compliance\noption.\nThe urllib.parse\nmodule defines functions that fall into two broad\ncategories: URL parsing and URL quoting. These are covered in detail in\nthe following sections.\nThis moduleâs functions use the deprecated term netloc\n(or net_loc\n),\nwhich was introduced in RFC 1808. However, this term has been obsoleted by\nRFC 3986, which introduced the term authority\nas its replacement.\nThe use of netloc\nis continued for backward compatibility.\nURL ParsingÂ¶\nThe URL parsing functions focus on splitting a URL string into its components, or on combining URL components into a URL string.\n- urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)Â¶\nParse a URL into six components, returning a 6-item named tuple. This corresponds to the general structure of a URL:\nscheme://netloc/path;parameters?query#fragment\n. Each tuple item is a string, possibly empty. The components are not broken up into smaller parts (for example, the network location is a single st"}
{"url": "https://docs.python.org/3/library/selectors.html", "title": "", "text": "selectors\nâ High-level I/O multiplexingÂ¶\nAdded in version 3.4.\nSource code: Lib/selectors.py\nIntroductionÂ¶\nThis module allows high-level and efficient I/O multiplexing, built upon the\nselect\nmodule primitives. Users are encouraged to use this module\ninstead, unless they want precise control over the OS-level primitives used.\nIt defines a BaseSelector\nabstract base class, along with several\nconcrete implementations (KqueueSelector\n, EpollSelector\nâ¦),\nthat can be used to wait for I/O readiness notification on multiple file\nobjects. In the following, âfile objectâ refers to any object with a\nfileno()\nmethod, or a raw file descriptor. See file object.\nDefaultSelector\nis an alias to the most efficient implementation\navailable on the current platform: this should be the default choice for most\nusers.\nNote\nThe type of file objects supported depends on the platform: on Windows, sockets are supported, but not pipes, whereas on Unix, both are supported (some other types may be supported as well, such as fifos or special file devices).\nSee also\nselect\nLow-level I/O multiplexing module.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nClassesÂ¶\nClasses hierarchy:\nBaseSelector\n+-- SelectSelector\n+-- PollSelector\n+-- EpollSelector\n+-- DevpollSelector\n+-- KqueueSelector\nIn the following, events is a bitwise mask indicating which I/O events should be waited for on a given file object. It can be a combination of the modules constants below:\n- class selectors.SelectorKeyÂ¶\nA\nSelectorKey\nis anamedtuple\nused to associate a file object to its underlying file descriptor, selected event mask and attached data. It is returned by severalBaseSelector\nmethods.- fileobjÂ¶\nFile object registered.\n- fdÂ¶\nUnderlying file descriptor.\n- eventsÂ¶\nEvents that must be waited for on this file object.\n- dataÂ¶\nOptional opaque data associated to this file object: for example, this could be used to store a per-client s"}
{"url": "https://docs.python.org/3/library/struct.html", "title": "", "text": "struct\nâ Interpret bytes as packed binary dataÂ¶\nSource code: Lib/struct.py\nThis module converts between Python values and C structs represented\nas Python bytes\nobjects. Compact format strings\ndescribe the intended conversions to/from Python values.\nThe moduleâs functions and objects can be used for two largely\ndistinct applications, data exchange with external sources (files or\nnetwork connections), or data transfer between the Python application\nand the C layer.\nNote\nWhen no prefix character is given, native mode is the default. It packs or unpacks data based on the platform and compiler on which the Python interpreter was built. The result of packing a given C struct includes pad bytes which maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. In contrast, when communicating data between external sources, the programmer is responsible for defining byte ordering and padding between elements. See Byte Order, Size, and Alignment for details.\nSeveral struct\nfunctions (and methods of Struct\n) take a buffer\nargument. This refers to objects that implement the Buffer Protocol and\nprovide either a readable or read-writable buffer. The most common types used\nfor that purpose are bytes\nand bytearray\n, but many other types\nthat can be viewed as an array of bytes implement the buffer protocol, so that\nthey can be read/filled without additional copying from a bytes\nobject.\nFunctions and ExceptionsÂ¶\nThe module defines the following exception and functions:\n- exception struct.errorÂ¶\nException raised on various occasions; argument is a string describing what is wrong.\n- struct.pack(format, v1, v2, ...)Â¶\nReturn a bytes object containing the values v1, v2, â¦ packed according to the format string format. The arguments must match the values required by the format exactly.\n- struct.pack_into(format, buffer, offset, v1, v2, ...)Â¶\nPack the values v1, v2, â¦ according to the format string format and write the packed bytes int"}
{"url": "https://docs.python.org/3/library/cmdlinelibs.html", "title": "", "text": "Command-line interface librariesÂ¶\nThe modules described in this chapter assist with implementing command line and terminal interfaces for applications.\nHereâs an overview:\nargparse\nâ Parser for command-line options, arguments and subcommandsoptparse\nâ Parser for command line optionsgetpass\nâ Portable password inputfileinput\nâ Iterate over lines from multiple input streamscurses\nâ Terminal handling for character-cell displayscurses.textpad\nâ Text input widget for curses programscurses.ascii\nâ Utilities for ASCII characterscurses.panel\nâ A panel stack extension for cursescmd\nâ Support for line-oriented command interpreters"}
{"url": "https://docs.python.org/3/library/crypto.html", "title": "", "text": "Cryptographic ServicesÂ¶\nThe modules described in this chapter implement various algorithms of a cryptographic nature. They are available at the discretion of the installation. Hereâs an overview:\nThe modules described in this chapter implement various algorithms of a cryptographic nature. They are available at the discretion of the installation. Hereâs an overview:"}
{"url": "https://docs.python.org/3/library/fcntl.html", "title": "", "text": "fcntl\nâ The fcntl\nand ioctl\nsystem callsÂ¶\nThis module performs file and I/O control on file descriptors. It is an\ninterface to the fcntl()\nand ioctl()\nUnix routines.\nSee the fcntl(2) and ioctl(2) Unix manual pages\nfor full details.\nAvailability: Unix, not WASI.\nAll functions in this module take a file descriptor fd as their first\nargument. This can be an integer file descriptor, such as returned by\nsys.stdin.fileno()\n, or an io.IOBase\nobject, such as sys.stdin\nitself, which provides a fileno()\nthat returns a genuine file\ndescriptor.\nChanged in version 3.3: Operations in this module used to raise an IOError\nwhere they now\nraise an OSError\n.\nChanged in version 3.8: The fcntl\nmodule now contains F_ADD_SEALS\n, F_GET_SEALS\n, and\nF_SEAL_*\nconstants for sealing of os.memfd_create()\nfile\ndescriptors.\nChanged in version 3.9: On macOS, the fcntl\nmodule exposes the F_GETPATH\nconstant,\nwhich obtains the path of a file from a file descriptor.\nOn Linux(>=3.15), the fcntl\nmodule exposes the F_OFD_GETLK\n,\nF_OFD_SETLK\nand F_OFD_SETLKW\nconstants, which are used when working\nwith open file description locks.\nChanged in version 3.10: On Linux >= 2.6.11, the fcntl\nmodule exposes the F_GETPIPE_SZ\nand\nF_SETPIPE_SZ\nconstants, which allow to check and modify a pipeâs size\nrespectively.\nChanged in version 3.11: On FreeBSD, the fcntl\nmodule exposes the F_DUP2FD\nand\nF_DUP2FD_CLOEXEC\nconstants, which allow to duplicate a file descriptor,\nthe latter setting FD_CLOEXEC\nflag in addition.\nChanged in version 3.12: On Linux >= 4.5, the fcntl\nmodule exposes the FICLONE\nand\nFICLONERANGE\nconstants, which allow to share some data of one file with\nanother file by reflinking on some filesystems (e.g., btrfs, OCFS2, and\nXFS). This behavior is commonly referred to as âcopy-on-writeâ.\nChanged in version 3.13: On Linux >= 2.6.32, the fcntl\nmodule exposes the\nF_GETOWN_EX\n, F_SETOWN_EX\n, F_OWNER_TID\n, F_OWNER_PID\n, F_OWNER_PGRP\nconstants, which allow to direct I/O availability signals\nto a specific thread, proc"}
{"url": "https://docs.python.org/3/library/mailbox.html", "title": "", "text": "mailbox\nâ Manipulate mailboxes in various formatsÂ¶\nSource code: Lib/mailbox.py\nThis module defines two classes, Mailbox\nand Message\n, for\naccessing and manipulating on-disk mailboxes and the messages they contain.\nMailbox\noffers a dictionary-like mapping from keys to messages.\nMessage\nextends the email.message\nmoduleâs\nMessage\nclass with format-specific state and behavior.\nSupported mailbox formats are Maildir, mbox, MH, Babyl, and MMDF.\nSee also\n- Module\nemail\nRepresent and manipulate messages.\nMailbox\nobjectsÂ¶\n- class mailbox.MailboxÂ¶\nA mailbox, which may be inspected and modified.\nThe\nMailbox\nclass defines an interface and is not intended to be instantiated. Instead, format-specific subclasses should inherit fromMailbox\nand your code should instantiate a particular subclass.The\nMailbox\ninterface is dictionary-like, with small keys corresponding to messages. Keys are issued by theMailbox\ninstance with which they will be used and are only meaningful to thatMailbox\ninstance. A key continues to identify a message even if the corresponding message is modified, such as by replacing it with another message.Messages may be added to a\nMailbox\ninstance using the set-like methodadd()\nand removed using adel\nstatement or the set-like methodsremove()\nanddiscard()\n.Mailbox\ninterface semantics differ from dictionary semantics in some noteworthy ways. Each time a message is requested, a new representation (typically aMessage\ninstance) is generated based upon the current state of the mailbox. Similarly, when a message is added to aMailbox\ninstance, the provided message representationâs contents are copied. In neither case is a reference to the message representation kept by theMailbox\ninstance.The default\nMailbox\niterator iterates over message representations, not keys as the defaultdictionary\niterator does. Moreover, modification of a mailbox during iteration is safe and well-defined. Messages added to the mailbox after an iterator is created will not be seen by the iterator. "}
{"url": "https://docs.python.org/3/library/codecs.html", "title": "", "text": "codecs\nâ Codec registry and base classesÂ¶\nSource code: Lib/codecs.py\nThis module defines base classes for standard Python codecs (encoders and\ndecoders) and provides access to the internal Python codec registry, which\nmanages the codec and error handling lookup process. Most standard codecs\nare text encodings, which encode text to bytes (and\ndecode bytes to text), but there are also codecs provided that encode text to\ntext, and bytes to bytes. Custom codecs may encode and decode between arbitrary\ntypes, but some module features are restricted to be used specifically with\ntext encodings or with codecs that encode to\nbytes\n.\nThe module defines the following functions for encoding and decoding with any codec:\n- codecs.encode(obj, encoding='utf-8', errors='strict')Â¶\nEncodes obj using the codec registered for encoding.\nErrors may be given to set the desired error handling scheme. The default error handler is\n'strict'\nmeaning that encoding errors raiseValueError\n(or a more codec specific subclass, such asUnicodeEncodeError\n). Refer to Codec Base Classes for more information on codec error handling.\n- codecs.decode(obj, encoding='utf-8', errors='strict')Â¶\nDecodes obj using the codec registered for encoding.\nErrors may be given to set the desired error handling scheme. The default error handler is\n'strict'\nmeaning that decoding errors raiseValueError\n(or a more codec specific subclass, such asUnicodeDecodeError\n). Refer to Codec Base Classes for more information on codec error handling.\n- codecs.charmap_build(string)Â¶\nReturn a mapping suitable for encoding with a custom single-byte encoding. Given a\nstr\nstring of up to 256 characters representing a decoding table, returns either a compact internal mapping objectEncodingMap\nor adictionary\nmapping character ordinals to byte values. Raises aTypeError\non invalid input.\nThe full details for each codec can also be looked up directly:\n- codecs.lookup(encoding)Â¶\nLooks up the codec info in the Python codec registry and returns "}
{"url": "https://docs.python.org/3/library/importlib.html", "title": "", "text": "importlib\nâ The implementation of import\nÂ¶\nAdded in version 3.1.\nSource code: Lib/importlib/__init__.py\nIntroductionÂ¶\nThe purpose of the importlib\npackage is three-fold.\nOne is to provide the\nimplementation of the import\nstatement (and thus, by extension, the\n__import__()\nfunction) in Python source code. This provides an\nimplementation of import\nwhich is portable to any Python\ninterpreter. This also provides an implementation which is easier to\ncomprehend than one implemented in a programming language other than Python.\nTwo, the components to implement import\nare exposed in this\npackage, making it easier for users to create their own custom objects (known\ngenerically as an importer) to participate in the import process.\nThree, the package contains modules exposing additional functionality for managing aspects of Python packages:\nimportlib.metadata\npresents access to metadata from third-party distributions.importlib.resources\nprovides routines for accessing non-code âresourcesâ from Python packages.\nSee also\n- The import statement\nThe language reference for the\nimport\nstatement.- Packages specification\nOriginal specification of packages. Some semantics have changed since the writing of this document (e.g. redirecting based on\nNone\ninsys.modules\n).- The\n__import__()\nfunction The\nimport\nstatement is syntactic sugar for this function.- The initialization of the sys.path module search path\nThe initialization of\nsys.path\n.- PEP 235\nImport on Case-Insensitive Platforms\n- PEP 263\nDefining Python Source Code Encodings\n- PEP 302\nNew Import Hooks\n- PEP 328\nImports: Multi-Line and Absolute/Relative\n- PEP 366\nMain module explicit relative imports\n- PEP 420\nImplicit namespace packages\n- PEP 451\nA ModuleSpec Type for the Import System\n- PEP 488\nElimination of PYO files\n- PEP 489\nMulti-phase extension module initialization\n- PEP 552\nDeterministic pycs\n- PEP 3120\nUsing UTF-8 as the Default Source Encoding\n- PEP 3147\nPYC Repository Directories\nFunctionsÂ¶\n- importlib.__import__(nam"}
{"url": "https://docs.python.org/3/library/contextvars.html", "title": "", "text": "contextvars\nâ Context VariablesÂ¶\nThis module provides APIs to manage, store, and access context-local\nstate. The ContextVar\nclass is used to declare\nand work with Context Variables. The copy_context()\nfunction and the Context\nclass should be used to\nmanage the current context in asynchronous frameworks.\nContext managers that have state should use Context Variables\ninstead of threading.local()\nto prevent their state from\nbleeding to other code unexpectedly, when used in concurrent code.\nSee also PEP 567 for additional details.\nAdded in version 3.7.\nContext VariablesÂ¶\n- class contextvars.ContextVar(name[, *, default])Â¶\nThis class is used to declare a new Context Variable, e.g.:\nvar: ContextVar[int] = ContextVar('var', default=42)\nThe required name parameter is used for introspection and debug purposes.\nThe optional keyword-only default parameter is returned by\nContextVar.get()\nwhen no value for the variable is found in the current context.Important: Context Variables should be created at the top module level and never in closures.\nContext\nobjects hold strong references to context variables which prevents context variables from being properly garbage collected.- nameÂ¶\nThe name of the variable. This is a read-only property.\nAdded in version 3.7.1.\n- get([default])Â¶\nReturn a value for the context variable for the current context.\nIf there is no value for the variable in the current context, the method will:\nreturn the value of the default argument of the method, if provided; or\nreturn the default value for the context variable, if it was created with one; or\nraise a\nLookupError\n.\n- set(value)Â¶\nCall to set a new value for the context variable in the current context.\nThe required value argument is the new value for the context variable.\nReturns a\nToken\nobject that can be used to restore the variable to its previous value via theContextVar.reset()\nmethod.\n- reset(token)Â¶\nReset the context variable to the value it had before the\nContextVar.set()\nthat created the token"}
{"url": "https://docs.python.org/3/reference/simple_stmts.html", "title": "", "text": "7. Simple statementsÂ¶\nA simple statement is comprised within a single logical line. Several simple statements may occur on a single line separated by semicolons. The syntax for simple statements is:\nsimple_stmt ::=expression_stmt\n|assert_stmt\n|assignment_stmt\n|augmented_assignment_stmt\n|annotated_assignment_stmt\n|pass_stmt\n|del_stmt\n|return_stmt\n|yield_stmt\n|raise_stmt\n|break_stmt\n|continue_stmt\n|import_stmt\n|future_stmt\n|global_stmt\n|nonlocal_stmt\n|type_stmt\n7.1. Expression statementsÂ¶\nExpression statements are used (mostly interactively) to compute and write a\nvalue, or (usually) to call a procedure (a function that returns no meaningful\nresult; in Python, procedures return the value None\n). Other uses of\nexpression statements are allowed and occasionally useful. The syntax for an\nexpression statement is:\nexpression_stmt ::= starred_expression\nAn expression statement evaluates the expression list (which may be a single expression).\nIn interactive mode, if the value is not None\n, it is converted to a string\nusing the built-in repr()\nfunction and the resulting string is written to\nstandard output on a line by itself (except if the result is None\n, so that\nprocedure calls do not cause any output.)\n7.2. Assignment statementsÂ¶\nAssignment statements are used to (re)bind names to values and to modify attributes or items of mutable objects:\nassignment_stmt ::= (target_list\n\"=\")+ (starred_expression\n|yield_expression\n) target_list ::=target\n(\",\"target\n)* [\",\"] target ::=identifier\n| \"(\" [target_list\n] \")\" | \"[\" [target_list\n] \"]\" |attributeref\n|subscription\n|slicing\n| \"*\"target\n(See section Primaries for the syntax definitions for attributeref, subscription, and slicing.)\nAn assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.\nAssignment is defined recursively depending on the form o"}
{"url": "https://docs.python.org/3/using/cmdline.html", "title": "", "text": "1. Command line and environmentÂ¶\nThe CPython interpreter scans the command line and the environment for various settings.\nCPython implementation detail: Other implementationsâ command line schemes may differ. See Alternate Implementations for further resources.\n1.1. Command lineÂ¶\nWhen invoking Python, you may specify any of these options:\npython [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] [args]\nThe most common use case is, of course, a simple invocation of a script:\npython myscript.py\n1.1.1. Interface optionsÂ¶\nThe interpreter interface resembles that of the UNIX shell, but provides some additional methods of invocation:\nWhen called with standard input connected to a tty device, it prompts for commands and executes them until an EOF (an end-of-file character, you can produce that with Ctrl-D on UNIX or Ctrl-Z, Enter on Windows) is read. For more on interactive mode, see Interactive Mode.\nWhen called with a file name argument or with a file as standard input, it reads and executes a script from that file.\nWhen called with a directory name argument, it reads and executes an appropriately named script from that directory.\nWhen called with\n-c command\n, it executes the Python statement(s) given as command. Here command may contain multiple statements separated by newlines. Leading whitespace is significant in Python statements!When called with\n-m module-name\n, the given module is located on the Python module path and executed as a script.\nIn non-interactive mode, the entire input is parsed before it is executed.\nAn interface option terminates the list of options consumed by the interpreter,\nall consecutive arguments will end up in sys.argv\nâ note that the first\nelement, subscript zero (sys.argv[0]\n), is a string reflecting the programâs\nsource.\n- -c <command>Â¶\nExecute the Python code in command. command can be one or more statements separated by newlines, with significant leading whitespace as in normal module code.\nIf this option is given, the"}
{"url": "https://docs.python.org/3/contents.html", "title": "", "text": "Python Documentation contentsÂ¶\n- Whatâs New in Python\n- Whatâs New In Python 3.13\n- Summary â Release Highlights\n- New Features\n- Other Language Changes\n- New Modules\n- Improved Modules\n- argparse\n- array\n- ast\n- asyncio\n- base64\n- compileall\n- concurrent.futures\n- configparser\n- copy\n- ctypes\n- dbm\n- dis\n- doctest\n- enum\n- fractions\n- glob\n- importlib\n- io\n- ipaddress\n- itertools\n- marshal\n- math\n- mimetypes\n- mmap\n- multiprocessing\n- os\n- os.path\n- pathlib\n- pdb\n- queue\n- random\n- re\n- shutil\n- site\n- sqlite3\n- ssl\n- statistics\n- subprocess\n- sys\n- tempfile\n- time\n- tkinter\n- traceback\n- types\n- typing\n- unicodedata\n- venv\n- warnings\n- xml\n- zipimport\n- Optimizations\n- Removed Modules And APIs\n- New Deprecations\n- CPython Bytecode Changes\n- C API Changes\n- Build Changes\n- Porting to Python 3.13\n- Regression Test Changes\n- Notable changes in 3.13.1\n- Notable changes in 3.13.4\n- Whatâs New In Python 3.12\n- Whatâs New In Python 3.11\n- Summary â Release highlights\n- New Features\n- New Features Related to Type Hints\n- Other Language Changes\n- Other CPython Implementation Changes\n- New Modules\n- Improved Modules\n- Optimizations\n- Faster CPython\n- CPython bytecode changes\n- Deprecated\n- Pending Removal in Python 3.12\n- Removed\n- Porting to Python 3.11\n- Build Changes\n- C API Changes\n- Notable changes in 3.11.4\n- Notable changes in 3.11.5\n- Whatâs New In Python 3.10\n- Summary â Release highlights\n- New Features\n- New Features Related to Type Hints\n- Other Language Changes\n- New Modules\n- Improved Modules\n- asyncio\n- argparse\n- array\n- asynchat, asyncore, smtpd\n- base64\n- bdb\n- bisect\n- codecs\n- collections.abc\n- contextlib\n- curses\n- dataclasses\n- distutils\n- doctest\n- encodings\n- enum\n- fileinput\n- faulthandler\n- gc\n- glob\n- hashlib\n- hmac\n- IDLE and idlelib\n- importlib.metadata\n- inspect\n- itertools\n- linecache\n- os\n- os.path\n- pathlib\n- platform\n- pprint\n- py_compile\n- pyclbr\n- shelve\n- statistics\n- site\n- socket\n- ssl\n- sqlite3\n- sys\n- _thread\n- threading\n- traceback"}
{"url": "https://docs.python.org/3/faq/design.html", "title": "", "text": "Design and History FAQÂ¶\nWhy does Python use indentation for grouping of statements?Â¶\nGuido van Rossum believes that using indentation for grouping is extremely elegant and contributes a lot to the clarity of the average Python program. Most people learn to love this feature after a while.\nSince there are no begin/end brackets there cannot be a disagreement between grouping perceived by the parser and the human reader. Occasionally C programmers will encounter a fragment of code like this:\nif (x <= y)\nx++;\ny--;\nz++;\nOnly the x++\nstatement is executed if the condition is true, but the\nindentation leads many to believe otherwise. Even experienced C programmers will\nsometimes stare at it a long time wondering as to why y\nis being decremented even\nfor x > y\n.\nBecause there are no begin/end brackets, Python is much less prone to coding-style conflicts. In C there are many different ways to place the braces. After becoming used to reading and writing code using a particular style, it is normal to feel somewhat uneasy when reading (or being required to write) in a different one.\nMany coding styles place begin/end brackets on a line by themselves. This makes programs considerably longer and wastes valuable screen space, making it harder to get a good overview of a program. Ideally, a function should fit on one screen (say, 20â30 lines). 20 lines of Python can do a lot more work than 20 lines of C. This is not solely due to the lack of begin/end brackets â the lack of declarations and the high-level data types are also responsible â but the indentation-based syntax certainly helps.\nWhy am I getting strange results with simple arithmetic operations?Â¶\nSee the next question.\nWhy are floating-point calculations so inaccurate?Â¶\nUsers are often surprised by results like this:\n>>> 1.2 - 1.0\n0.19999999999999996\nand think it is a bug in Python. Itâs not. This has little to do with Python, and much more to do with how the underlying platform handles floating-point numbers.\nThe floa"}
{"url": "https://docs.python.org/3/howto/unicode.html", "title": "", "text": "Unicode HOWTOÂ¶\n- Release:\n1.12\nThis HOWTO discusses Pythonâs support for the Unicode specification for representing textual data, and explains various problems that people commonly encounter when trying to work with Unicode.\nIntroduction to UnicodeÂ¶\nDefinitionsÂ¶\nTodayâs programs need to be able to handle a wide variety of characters. Applications are often internationalized to display messages and output in a variety of user-selectable languages; the same program might need to output an error message in English, French, Japanese, Hebrew, or Russian. Web content can be written in any of these languages and can also include a variety of emoji symbols. Pythonâs string type uses the Unicode Standard for representing characters, which lets Python programs work with all these different possible characters.\nUnicode (https://www.unicode.org/) is a specification that aims to list every character used by human languages and give each character its own unique code. The Unicode specifications are continually revised and updated to add new languages and symbols.\nA character is the smallest possible component of a text. âAâ, âBâ, âCâ, etc., are all different characters. So are âÃâ and âÃâ. Characters vary depending on the language or context youâre talking about. For example, thereâs a character for âRoman Numeral Oneâ, ââ â, thatâs separate from the uppercase letter âIâ. Theyâll usually look the same, but these are two different characters that have different meanings.\nThe Unicode standard describes how characters are represented by\ncode points. A code point value is an integer in the range 0 to\n0x10FFFF (about 1.1 million values, the\nactual number assigned\nis less than that). In the standard and in this document, a code point is written\nusing the notation U+265E\nto mean the character with value\n0x265e\n(9,822 in decimal).\nThe Unicode standard contains a lot of tables listing characters and their corresponding code points:\n0061 'a'; LATIN SMALL LETTER A\n0062 'b'; LATIN SMALL L"}
{"url": "https://docs.python.org/3/faq/index.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nPrevious topic\nC API Extension Support for Free Threading\nNext topic\nGeneral Python FAQ\nThis page\nReport a bug\nShow source\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.7 Documentation\n»\nPython Frequently Asked Questions\n|\nTheme\nAuto\nLight\nDark\n|\nPython Frequently Asked Questions\nÂ¶\nGeneral Python FAQ\nProgramming FAQ\nDesign and History FAQ\nLibrary and Extension FAQ\nExtending/Embedding FAQ\nPython on Windows FAQ\nGraphic User Interface FAQ\nâWhy is Python Installed on my Computer?â FAQ\nPrevious topic\nC API Extension Support for Free Threading\nNext topic\nGeneral Python FAQ\nThis page\nReport a bug\nShow source\nÂ«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.7 Documentation\n»\nPython Frequently Asked Questions\n|\nTheme\nAuto\nLight\nDark\n|"}
{"url": "https://docs.python.org/3/reference/lexical_analysis.html", "title": "", "text": "2. Lexical analysisÂ¶\nA Python program is read by a parser. Input to the parser is a stream of tokens, generated by the lexical analyzer (also known as the tokenizer). This chapter describes how the lexical analyzer breaks a file into tokens.\nPython reads program text as Unicode code points; the encoding of a source file\ncan be given by an encoding declaration and defaults to UTF-8, see PEP 3120\nfor details. If the source file cannot be decoded, a SyntaxError\nis\nraised.\n2.1. Line structureÂ¶\nA Python program is divided into a number of logical lines.\n2.1.1. Logical linesÂ¶\nThe end of a logical line is represented by the token NEWLINE. Statements cannot cross logical line boundaries except where NEWLINE is allowed by the syntax (e.g., between statements in compound statements). A logical line is constructed from one or more physical lines by following the explicit or implicit line joining rules.\n2.1.2. Physical linesÂ¶\nA physical line is a sequence of characters terminated by an end-of-line sequence. In source files and strings, any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of platform. The end of input also serves as an implicit terminator for the final physical line.\nWhen embedding Python, source code strings should be passed to Python APIs using\nthe standard C conventions for newline characters (the \\n\ncharacter,\nrepresenting ASCII LF, is the line terminator).\n2.1.3. CommentsÂ¶\nA comment starts with a hash character (#\n) that is not part of a string\nliteral, and ends at the end of the physical line. A comment signifies the end\nof the logical line unless the implicit line joining rules are invoked. Comments\nare ignored by the syntax.\n2.1.4. Encoding declarationsÂ¶\nIf a comment in the first or second line of th"}
{"url": "https://docs.python.org/3/reference/expressions.html", "title": "", "text": "6. ExpressionsÂ¶\nThis chapter explains the meaning of the elements of expressions in Python.\nSyntax Notes: In this and the following chapters, extended BNF notation will be used to describe syntax, not lexical analysis. When (one alternative of) a syntax rule has the form\nname ::= othername\nand no semantics are given, the semantics of this form of name\nare the same\nas for othername\n.\n6.1. Arithmetic conversionsÂ¶\nWhen a description of an arithmetic operator below uses the phrase âthe numeric arguments are converted to a common typeâ, this means that the operator implementation for built-in types works as follows:\nIf either argument is a complex number, the other is converted to complex;\notherwise, if either argument is a floating-point number, the other is converted to floating point;\notherwise, both must be integers and no conversion is necessary.\nSome additional rules apply for certain operators (e.g., a string as a left argument to the â%â operator). Extensions must define their own conversion behavior.\n6.2. AtomsÂ¶\nAtoms are the most basic elements of expressions. The simplest atoms are identifiers or literals. Forms enclosed in parentheses, brackets or braces are also categorized syntactically as atoms. The syntax for atoms is:\natom ::=identifier\n|literal\n|enclosure\nenclosure ::=parenth_form\n|list_display\n|dict_display\n|set_display\n|generator_expression\n|yield_atom\n6.2.1. Identifiers (Names)Â¶\nAn identifier occurring as an atom is a name. See section Identifiers and keywords for lexical definition and section Naming and binding for documentation of naming and binding.\nWhen the name is bound to an object, evaluation of the atom yields that object.\nWhen a name is not bound, an attempt to evaluate it raises a NameError\nexception.\n6.2.1.1. Private name manglingÂ¶\nWhen an identifier that textually occurs in a class definition begins with two or more underscore characters and does not end in two or more underscores, it is considered a private name of that class.\nSee "}
{"url": "https://docs.python.org/3/reference/compound_stmts.html", "title": "", "text": "8. Compound statementsÂ¶\nCompound statements contain (groups of) other statements; they affect or control the execution of those other statements in some way. In general, compound statements span multiple lines, although in simple incarnations a whole compound statement may be contained in one line.\nThe if\n, while\nand for\nstatements implement\ntraditional control flow constructs. try\nspecifies exception\nhandlers and/or cleanup code for a group of statements, while the\nwith\nstatement allows the execution of initialization and\nfinalization code around a block of code. Function and class definitions are\nalso syntactically compound statements.\nA compound statement consists of one or more âclauses.â A clause consists of a\nheader and a âsuite.â The clause headers of a particular compound statement are\nall at the same indentation level. Each clause header begins with a uniquely\nidentifying keyword and ends with a colon. A suite is a group of statements\ncontrolled by a clause. A suite can be one or more semicolon-separated simple\nstatements on the same line as the header, following the headerâs colon, or it\ncan be one or more indented statements on subsequent lines. Only the latter\nform of a suite can contain nested compound statements; the following is illegal,\nmostly because it wouldnât be clear to which if\nclause a following\nelse\nclause would belong:\nif test1: if test2: print(x)\nAlso note that the semicolon binds tighter than the colon in this context, so\nthat in the following example, either all or none of the print()\ncalls are\nexecuted:\nif x < y < z: print(x); print(y); print(z)\nSummarizing:\ncompound_stmt ::=if_stmt\n|while_stmt\n|for_stmt\n|try_stmt\n|with_stmt\n|match_stmt\n|funcdef\n|classdef\n|async_with_stmt\n|async_for_stmt\n|async_funcdef\nsuite ::=stmt_list\nNEWLINE | NEWLINE INDENTstatement\n+ DEDENT statement ::=stmt_list\nNEWLINE |compound_stmt\nstmt_list ::=simple_stmt\n(\";\"simple_stmt\n)* [\";\"]\nNote that statements always end in a NEWLINE\npossibly followed by a\nDEDENT\n. Als"}
{"url": "https://docs.python.org/3/faq/general.html", "title": "", "text": "General Python FAQÂ¶\nGeneral InformationÂ¶\nWhat is Python?Â¶\nPython is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. It supports multiple programming paradigms beyond object-oriented programming, such as procedural and functional programming. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants including Linux and macOS, and on Windows.\nTo find out more, start with The Python Tutorial. The Beginnerâs Guide to Python links to other introductory tutorials and resources for learning Python.\nWhat is the Python Software Foundation?Â¶\nThe Python Software Foundation is an independent non-profit organization that holds the copyright on Python versions 2.1 and newer. The PSFâs mission is to advance open source technology related to the Python programming language and to publicize the use of Python. The PSFâs home page is at https://www.python.org/psf/.\nDonations to the PSF are tax-exempt in the US. If you use Python and find it helpful, please contribute via the PSF donation page.\nAre there copyright restrictions on the use of Python?Â¶\nYou can do anything you want with the source, as long as you leave the copyrights in and display those copyrights in any documentation about Python that you produce. If you honor the copyright rules, itâs OK to use Python for commercial use, to sell copies of Python in source or binary form (modified or unmodified), or to sell products that incorporate Python in some form. We would still like to know about all commercial use of Python, of course.\nSee the license page to find further explanations and the full text of the PSF License.\nThe Python l"}
{"url": "https://docs.python.org/3/howto/sorting.html", "title": "", "text": "Sorting TechniquesÂ¶\n- Author:\nAndrew Dalke and Raymond Hettinger\nPython lists have a built-in list.sort()\nmethod that modifies the list\nin-place. There is also a sorted()\nbuilt-in function that builds a new\nsorted list from an iterable.\nIn this document, we explore the various techniques for sorting data using Python.\nSorting BasicsÂ¶\nA simple ascending sort is very easy: just call the sorted()\nfunction. It\nreturns a new sorted list:\n>>> sorted([5, 2, 3, 1, 4])\n[1, 2, 3, 4, 5]\nYou can also use the list.sort()\nmethod. It modifies the list\nin-place (and returns None\nto avoid confusion). Usually itâs less convenient\nthan sorted()\n- but if you donât need the original list, itâs slightly\nmore efficient.\n>>> a = [5, 2, 3, 1, 4]\n>>> a.sort()\n>>> a\n[1, 2, 3, 4, 5]\nAnother difference is that the list.sort()\nmethod is only defined for\nlists. In contrast, the sorted()\nfunction accepts any iterable.\n>>> sorted({1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'})\n[1, 2, 3, 4, 5]\nKey FunctionsÂ¶\nBoth list.sort()\nand sorted()\nhave a key parameter to specify a\nfunction (or other callable) to be called on each list element prior to making\ncomparisons.\nFor example, hereâs a case-insensitive string comparison:\n>>> sorted(\"This is a test string from Andrew\".split(), key=str.casefold)\n['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']\nThe value of the key parameter should be a function (or other callable) that takes a single argument and returns a key to use for sorting purposes. This technique is fast because the key function is called exactly once for each input record.\nA common pattern is to sort complex objects using some of the objectâs indices as keys. For example:\n>>> student_tuples = [\n... ('john', 'A', 15),\n... ('jane', 'B', 12),\n... ('dave', 'B', 10),\n... ]\n>>> sorted(student_tuples, key=lambda student: student[2]) # sort by age\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nThe same technique works for objects with named attributes. For example:\n>>> class Student:\n... d"}
{"url": "https://docs.python.org/3/reference/datamodel.html", "title": "", "text": "3. Data modelÂ¶\n3.1. Objects, values and typesÂ¶\nObjects are Pythonâs abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von Neumannâs model of a âstored program computerâ, code is also represented by objects.)\nEvery object has an identity, a type and a value. An objectâs identity never\nchanges once it has been created; you may think of it as the objectâs address in\nmemory. The is\noperator compares the identity of two objects; the\nid()\nfunction returns an integer representing its identity.\nCPython implementation detail: For CPython, id(x)\nis the memory address where x\nis stored.\nAn objectâs type determines the operations that the object supports (e.g., âdoes\nit have a length?â) and also defines the possible values for objects of that\ntype. The type()\nfunction returns an objectâs type (which is an object\nitself). Like its identity, an objectâs type is also unchangeable.\n[1]\nThe value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. (The value of an immutable container object that contains a reference to a mutable object can change when the latterâs value is changed; however the container is still considered immutable, because the collection of objects it contains cannot be changed. So, immutability is not strictly the same as having an unchangeable value, it is more subtle.) An objectâs mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.\nObjects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether â it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.\nCPython imple"}
{"url": "https://docs.python.org/3/library/asyncio-task.html", "title": "", "text": "Coroutines and TasksÂ¶\nThis section outlines high-level asyncio APIs to work with coroutines and Tasks.\nCoroutinesÂ¶\nSource code: Lib/asyncio/coroutines.py\nCoroutines declared with the async/await syntax is the preferred way of writing asyncio applications. For example, the following snippet of code prints âhelloâ, waits 1 second, and then prints âworldâ:\n>>> import asyncio\n>>> async def main():\n... print('hello')\n... await asyncio.sleep(1)\n... print('world')\n>>> asyncio.run(main())\nhello\nworld\nNote that simply calling a coroutine will not schedule it to be executed:\n>>> main()\n<coroutine object main at 0x1053bb7c8>\nTo actually run a coroutine, asyncio provides the following mechanisms:\nThe\nasyncio.run()\nfunction to run the top-level entry point âmain()â function (see the above example.)Awaiting on a coroutine. The following snippet of code will print âhelloâ after waiting for 1 second, and then print âworldâ after waiting for another 2 seconds:\nimport asyncio import time async def say_after(delay, what): await asyncio.sleep(delay) print(what) async def main(): print(f\"started at {time.strftime('%X')}\") await say_after(1, 'hello') await say_after(2, 'world') print(f\"finished at {time.strftime('%X')}\") asyncio.run(main())\nExpected output:\nstarted at 17:13:52 hello world finished at 17:13:55\nThe\nasyncio.create_task()\nfunction to run coroutines concurrently as asyncioTasks\n.Letâs modify the above example and run two\nsay_after\ncoroutines concurrently:async def main(): task1 = asyncio.create_task( say_after(1, 'hello')) task2 = asyncio.create_task( say_after(2, 'world')) print(f\"started at {time.strftime('%X')}\") # Wait until both tasks are completed (should take # around 2 seconds.) await task1 await task2 print(f\"finished at {time.strftime('%X')}\")\nNote that expected output now shows that the snippet runs 1 second faster than before:\nstarted at 17:14:32 hello world finished at 17:14:34\nThe\nasyncio.TaskGroup\nclass provides a more modern alternative tocreate_task()\n. Usi"}
{"url": "https://docs.python.org/3/howto/logging-cookbook.html", "title": "", "text": "Logging CookbookÂ¶\n- Author:\nVinay Sajip <vinay_sajip at red-dove dot com>\nThis page contains a number of recipes related to logging, which have been found useful in the past. For links to tutorial and reference information, please see Other resources.\nUsing logging in multiple modulesÂ¶\nMultiple calls to logging.getLogger('someLogger')\nreturn a reference to the\nsame logger object. This is true not only within the same module, but also\nacross modules as long as it is in the same Python interpreter process. It is\ntrue for references to the same object; additionally, application code can\ndefine and configure a parent logger in one module and create (but not\nconfigure) a child logger in a separate module, and all logger calls to the\nchild will pass up to the parent. Here is a main module:\nimport logging\nimport auxiliary_module\n# create logger with 'spam_application'\nlogger = logging.getLogger('spam_application')\nlogger.setLevel(logging.DEBUG)\n# create file handler which logs even debug messages\nfh = logging.FileHandler('spam.log')\nfh.setLevel(logging.DEBUG)\n# create console handler with a higher log level\nch = logging.StreamHandler()\nch.setLevel(logging.ERROR)\n# create formatter and add it to the handlers\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfh.setFormatter(formatter)\nch.setFormatter(formatter)\n# add the handlers to the logger\nlogger.addHandler(fh)\nlogger.addHandler(ch)\nlogger.info('creating an instance of auxiliary_module.Auxiliary')\na = auxiliary_module.Auxiliary()\nlogger.info('created an instance of auxiliary_module.Auxiliary')\nlogger.info('calling auxiliary_module.Auxiliary.do_something')\na.do_something()\nlogger.info('finished auxiliary_module.Auxiliary.do_something')\nlogger.info('calling auxiliary_module.some_function()')\nauxiliary_module.some_function()\nlogger.info('done with auxiliary_module.some_function()')\nHere is the auxiliary module:\nimport logging\n# create logger\nmodule_logger = logging.getLogger('spam_appli"}
{"url": "https://docs.python.org/3/howto/index.html", "title": "", "text": "Python HOWTOsÂ¶\nPython HOWTOs are documents that cover a specific topic in-depth. Modeled on the Linux Documentation Projectâs HOWTO collection, this collection is an effort to foster documentation thatâs more detailed than the Python Library Reference.\nGeneral:\nAdvanced development:\nDebugging and profiling:"}
{"url": "https://docs.python.org/3/howto/functional.html", "title": "", "text": "Functional Programming HOWTOÂ¶\n- Author:\nA. M. Kuchling\n- Release:\n0.32\nIn this document, weâll take a tour of Pythonâs features suitable for\nimplementing programs in a functional style. After an introduction to the\nconcepts of functional programming, weâll look at language features such as\niterators and generators and relevant library modules such as\nitertools\nand functools\n.\nIntroductionÂ¶\nThis section explains the basic concept of functional programming; if youâre just interested in learning about Python language features, skip to the next section on Iterators.\nProgramming languages support decomposing problems in several different ways:\nMost programming languages are procedural: programs are lists of instructions that tell the computer what to do with the programâs input. C, Pascal, and even Unix shells are procedural languages.\nIn declarative languages, you write a specification that describes the problem to be solved, and the language implementation figures out how to perform the computation efficiently. SQL is the declarative language youâre most likely to be familiar with; a SQL query describes the data set you want to retrieve, and the SQL engine decides whether to scan tables or use indexes, which subclauses should be performed first, etc.\nObject-oriented programs manipulate collections of objects. Objects have internal state and support methods that query or modify this internal state in some way. Smalltalk and Java are object-oriented languages. C++ and Python are languages that support object-oriented programming, but donât force the use of object-oriented features.\nFunctional programming decomposes a problem into a set of functions. Ideally, functions only take inputs and produce outputs, and donât have any internal state that affects the output produced for a given input. Well-known functional languages include the ML family (Standard ML, OCaml, and other variants) and Haskell.\nThe designers of some computer languages choose to emphasize one particula"}
{"url": "https://docs.python.org/3/using/index.html", "title": "", "text": "Python Setup and UsageÂ¶\nThis part of the documentation is devoted to general information on the setup of the Python environment on different platforms, the invocation of the interpreter and things that make working with Python easier.\n- 1. Command line and environment\n- 2. Using Python on Unix platforms\n- 3. Configure Python\n- 4. Using Python on Windows\n- 4.1. The full installer\n- 4.2. The Microsoft Store package\n- 4.3. The nuget.org packages\n- 4.4. The embeddable package\n- 4.5. Alternative bundles\n- 4.6. Configuring Python\n- 4.7. UTF-8 mode\n- 4.8. Python Launcher for Windows\n- 4.9. Finding modules\n- 4.10. Additional modules\n- 4.11. Compiling Python on Windows\n- 4.12. Other Platforms\n- 5. Using Python on macOS\n- 6. Using Python on Android\n- 7. Using Python on iOS\n- 8. Editors and IDEs"}
{"url": "https://docs.python.org/3/whatsnew/index.html", "title": "", "text": "Whatâs New in PythonÂ¶\nThe âWhatâs New in Pythonâ series of essays takes tours through the most important changes between major Python versions. They are a âmust readâ for anyone wishing to stay up-to-date after a new release.\n- Whatâs New In Python 3.13\n- Summary â Release Highlights\n- New Features\n- Other Language Changes\n- New Modules\n- Improved Modules\n- Optimizations\n- Removed Modules And APIs\n- New Deprecations\n- CPython Bytecode Changes\n- C API Changes\n- Build Changes\n- Porting to Python 3.13\n- Regression Test Changes\n- Notable changes in 3.13.1\n- Notable changes in 3.13.4\n- Whatâs New In Python 3.12\n- Whatâs New In Python 3.11\n- Summary â Release highlights\n- New Features\n- New Features Related to Type Hints\n- Other Language Changes\n- Other CPython Implementation Changes\n- New Modules\n- Improved Modules\n- Optimizations\n- Faster CPython\n- CPython bytecode changes\n- Deprecated\n- Pending Removal in Python 3.12\n- Removed\n- Porting to Python 3.11\n- Build Changes\n- C API Changes\n- Notable changes in 3.11.4\n- Notable changes in 3.11.5\n- Whatâs New In Python 3.10\n- Summary â Release highlights\n- New Features\n- New Features Related to Type Hints\n- Other Language Changes\n- New Modules\n- Improved Modules\n- Optimizations\n- Deprecated\n- Removed\n- Porting to Python 3.10\n- CPython bytecode changes\n- Build Changes\n- C API Changes\n- Notable security feature in 3.10.7\n- Notable security feature in 3.10.8\n- Notable changes in 3.10.12\n- Whatâs New In Python 3.9\n- Summary â Release highlights\n- You should check for DeprecationWarning in your code\n- New Features\n- Other Language Changes\n- New Modules\n- Improved Modules\n- Optimizations\n- Deprecated\n- Removed\n- Porting to Python 3.9\n- Build Changes\n- C API Changes\n- Notable changes in Python 3.9.1\n- Notable changes in Python 3.9.2\n- Notable changes in Python 3.9.3\n- Notable changes in Python 3.9.5\n- Notable security feature in 3.9.14\n- Notable changes in 3.9.17\n- Whatâs New In Python 3.8\n- Summary â Release highlights\n- New Feature"}
{"url": "https://docs.python.org/3.10", "title": "", "text": "Python 3.10.18 documentation\nWelcome! This is the official documentation for Python 3.10.18.\nParts of the documentation:\n|\nWhat's new in Python 3.10?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.4", "title": "", "text": "Python 3.4.10 documentation\nWelcome! This is\nthe documentation for Python\n3.4.10, last updated Jun 16, 2019.\nParts of the documentation:\n|\nWhat's new in Python 3.4?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3/about.html", "title": "", "text": "About this documentationÂ¶\nPythonâs documentation is generated from reStructuredText sources using Sphinx, a documentation generator originally created for Python and now maintained as an independent project.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you want to contribute, please take a look at the Dealing with Bugs page for information on how to do so. New volunteers are always welcome!\nMany thanks go to:\nFred L. Drake, Jr., the creator of the original Python documentation toolset and author of much of the content;\nthe Docutils project for creating reStructuredText and the Docutils suite;\nFredrik Lundh for his Alternative Python Reference project from which Sphinx got many good ideas.\nContributors to the Python documentationÂ¶\nMany people have contributed to the Python language, the Python standard library, and the Python documentation. See Misc/ACKS in the Python source distribution for a partial list of contributors.\nIt is only with the input and contributions of the Python community that Python has such wonderful documentation â Thank You!"}
{"url": "https://docs.python.org/3/license.html", "title": "", "text": "History and LicenseÂ¶\nHistory of the softwareÂ¶\nPython was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Pythonâs principal author, although it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, see https://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF.\nAll Python releases are Open Source (see https://opensource.org for the Open Source Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases.\nRelease |\nDerived from |\nYear |\nOwner |\nGPL-compatible? (1) |\n|---|---|---|---|---|\n0.9.0 thru 1.2 |\nn/a |\n1991-1995 |\nCWI |\nyes |\n1.3 thru 1.5.2 |\n1.2 |\n1995-1999 |\nCNRI |\nyes |\n1.6 |\n1.5.2 |\n2000 |\nCNRI |\nno |\n2.0 |\n1.6 |\n2000 |\nBeOpen.com |\nno |\n1.6.1 |\n1.6 |\n2001 |\nCNRI |\nyes (2) |\n2.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nno |\n2.0.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nyes |\n2.1.1 |\n2.1+2.0.1 |\n2001 |\nPSF |\nyes |\n2.1.2 |\n2.1.1 |\n2002 |\nPSF |\nyes |\n2.1.3 |\n2.1.2 |\n2002 |\nPSF |\nyes |\n2.2 and above |\n2.1.1 |\n2001-now |\nPSF |\nyes |\nNote\nGPL-compatible doesnât mean that weâre distributing Python under the GPL. All Python licenses, unlike the GPL, let you distribute a modified version without making your changes open source. The GPL-compatible licenses make it possible to combine Python with ot"}
{"url": "https://docs.python.org/3.2", "title": "", "text": "Python v3.2.6 documentation\nWelcome! This is\nthe documentation for Python\n3.2.6, last updated Oct 12, 2014.\nParts of the documentation:\n|\nWhat's new in Python 3.2?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nInstalling Python Modules\ninformation for installers & sys-admins\nDistributing Python Modules\nsharing modules with others\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.9", "title": "", "text": "Python 3.9.23 documentation\nWelcome! This is the official documentation for Python 3.9.23.\nParts of the documentation:\n|\nWhat's new in Python 3.9?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.15", "title": "", "text": "Python 3.15.0a0 documentation\nWelcome! This is the official documentation for Python 3.15.0a0.\nDocumentation sections:\n|\nWhat's new in Python 3.15?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/2.6", "title": "", "text": "Python v2.6.9 documentation\nWelcome! This is\nthe documentation for Python\n2.6.9, last updated Oct 29, 2013.\nParts of the documentation:\n|\nWhat's new in Python 2.6?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nUsing Python\nhow to use Python on different platforms\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython HOWTOs\nin-depth documents on specific topics\n|\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nInstalling Python Modules\ninformation for installers & sys-admins\nDistributing Python Modules\nsharing modules with others\nDocumenting Python\nguide for documentation authors\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/2.7", "title": "", "text": "Python 2.7.18 documentation\nWelcome! This is the documentation for Python 2.7.18.\nParts of the documentation:\n|\nWhat's new in Python 2.7?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3/whatsnew/3.13.html", "title": "", "text": "Whatâs New In Python 3.13Â¶\n- Editors:\nAdam Turner and Thomas Wouters\nThis article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7, 2024. For full details, see the changelog.\nSee also\nPEP 719 â Python 3.13 Release Schedule\nSummary â Release HighlightsÂ¶\nPython 3.13 is the latest stable release of the Python programming language, with a mix of changes to the language, the implementation and the standard library. The biggest changes include a new interactive interpreter, experimental support for running in a free-threaded mode (PEP 703), and a Just-In-Time compiler (PEP 744).\nError messages continue to improve, with tracebacks now highlighted in color\nby default. The locals()\nbuiltin now has defined semantics for changing the returned mapping,\nand type parameters now support default values.\nThe library changes contain removal of deprecated APIs and modules, as well as the usual improvements in user-friendliness and correctness. Several legacy standard library modules have now been removed following their deprecation in Python 3.11 (PEP 594).\nThis article doesnât attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details refer to the documentation, such as the Library Reference and Language Reference. To understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented. See Porting to Python 3.13 for guidance on upgrading from earlier versions of Python.\nInterpreter improvements:\nA greatly improved interactive interpreter and improved error messages.\nPEP 667: The\nlocals()\nbuiltin now has defined semantics when mutating the returned mapping. Python debuggers and similar tools may now more reliably update local variables in optimized scopes even during concurrent code execution.PEP 703: CPython 3.13 has experiment"}
{"url": "https://docs.python.org/3.1", "title": "", "text": "Python v3.1.5 documentation\nWelcome! This is\nthe documentation for Python\n3.1.5, last updated Apr 09, 2012.\nParts of the documentation:\n|\nWhat's new in Python 3.1?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nInstalling Python Modules\ninformation for installers & sys-admins\nDistributing Python Modules\nsharing modules with others\nDocumenting Python\nguide for documentation authors\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3/installing/index.html", "title": "", "text": "Installing Python ModulesÂ¶\n- Email:\nAs a popular open source development project, Python has an active supporting community of contributors and users that also make their software available for other Python developers to use under open source license terms.\nThis allows Python users to share and collaborate effectively, benefiting from the solutions others have already created to common (and sometimes even rare!) problems, as well as potentially contributing their own solutions to the common pool.\nThis guide covers the installation part of the process. For a guide to creating and sharing your own Python projects, refer to the Python packaging user guide.\nNote\nFor corporate and other institutional users, be aware that many organisations have their own policies around using and contributing to open source software. Please take such policies into account when making use of the distribution and installation tools provided with Python.\nKey termsÂ¶\npip\nis the preferred installer program. Starting with Python 3.4, it is included by default with the Python binary installers.A virtual environment is a semi-isolated Python environment that allows packages to be installed for use by a particular application, rather than being installed system wide.\nvenv\nis the standard tool for creating virtual environments, and has been part of Python since Python 3.3. Starting with Python 3.4, it defaults to installingpip\ninto all created virtual environments.virtualenv\nis a third party alternative (and predecessor) tovenv\n. It allows virtual environments to be used on versions of Python prior to 3.4, which either donât providevenv\nat all, or arenât able to automatically installpip\ninto created environments.The Python Package Index is a public repository of open source licensed packages made available for use by other Python users.\nthe Python Packaging Authority is the group of developers and documentation authors responsible for the maintenance and evolution of the standard packaging tools "}
{"url": "https://docs.python.org/3/deprecations/index.html", "title": "", "text": "DeprecationsÂ¶\nPending Removal in Python 3.14Â¶\nargparse\n: The type, choices, and metavar parameters ofargparse.BooleanOptionalAction\nare deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)ast\n: The following features have been deprecated in documentation since Python 3.8, now cause aDeprecationWarning\nto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:ast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead. (Contributed by Serhiy Storchaka in gh-90953.)-\nThe child watcher classes\nMultiLoopChildWatcher\n,FastChildWatcher\n,AbstractChildWatcher\nandSafeChildWatcher\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)asyncio.set_child_watcher()\n,asyncio.get_child_watcher()\n,asyncio.AbstractEventLoopPolicy.set_child_watcher()\nandasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)The\nget_event_loop()\nmethod of the default event loop policy now emits aDeprecationWarning\nif there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in gh-100160.)\nemail\n: Deprecated the isdst parameter inemail.utils.localtime()\n. (Contributed by Alan Williams in gh-72346.)importlib.abc\ndeprecated classes:importlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)\nitertools\nhad undocumented, inefficient, historically buggy, and inconsistent support for copy, deepcopy, and pickle operations. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)multiprocessing\n: The default start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where'fork'\nis"}
{"url": "https://docs.python.org/3.5", "title": "", "text": "Python 3.5.10 documentation\nWelcome! This is the documentation for Python 3.5.10.\nParts of the documentation:\n|\nWhat's new in Python 3.5?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.13", "title": "", "text": "Python 3.13.7 documentation\nWelcome! This is the official documentation for Python 3.13.7.\nDocumentation sections:\n|\nWhat's new in Python 3.13?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3/distributing/index.html", "title": "", "text": "Distributing Python ModulesÂ¶\nNote\nInformation and guidance on distributing Python modules and packages has been moved to the Python Packaging User Guide, and the tutorial on packaging Python projects.\nNote\nInformation and guidance on distributing Python modules and packages has been moved to the Python Packaging User Guide, and the tutorial on packaging Python projects."}
{"url": "https://docs.python.org/3.3", "title": "", "text": "Python 3.3.7 documentation\nWelcome! This is\nthe documentation for Python\n3.3.7, last updated Sep 19, 2017.\nParts of the documentation:\n|\nWhat's new in Python 3.3?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nInstalling Python Modules\ninformation for installers & sys-admins\nDistributing Python Modules\nsharing modules with others\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.8", "title": "", "text": "Python 3.8.20 documentation\nWelcome! This is the documentation for Python 3.8.20.\nParts of the documentation:\n|\nWhat's new in Python 3.8?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.11", "title": "", "text": "Python 3.11.13 documentation\nWelcome! This is the official documentation for Python 3.11.13.\nDocumentation sections:\n|\nWhat's new in Python 3.11? Tutorial Library reference Language reference Python setup and usage Python HOWTOs |\nInstalling Python modules Distributing Python modules Extending and embedding Python's C API FAQs |\nIndices, glossary, and search:\n|\nGlobal module index General index Glossary |\nSearch page Complete table of contents |\nProject information:"}
{"url": "https://docs.python.org/3.0", "title": "", "text": "Python v3.0.1 documentation\nWelcome! This is\nthe documentation for Python\n3.0.1, last updated Feb 14, 2009.\nParts of the documentation:\n|\nWhat's new in Python 3.0?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nUsing Python\nhow to use Python on different platforms\nLanguage Reference\ndescribes syntax and language elements\nLibrary Reference\nkeep this under your pillow\nPython HOWTOs\nin-depth documents on specific topics\n|\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nInstalling Python Modules\ninformation for installers & sys-admins\nDistributing Python Modules\nsharing modules with others\nDocumenting Python\nguide for documentation authors\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3/download.html", "title": "", "text": "Download Python 3.13 documentation\nLast updated on: Oct 02, 2025 (12:46 UTC).\nTo download an archive containing all the documents for this version of Python in one of various formats, follow one of links in this table.\n| Format | Packed as .zip | Packed as .tar.bz2 |\n|---|---|---|\n| Download (ca. 17 MiB) | Download (ca. 17 MiB) | |\n| HTML | Download (ca. 13 MiB) | Download (ca. 8 MiB) |\n| Plain text | Download (ca. 4 MiB) | Download (ca. 3 MiB) |\n| Texinfo | Download (ca. 9 MiB) | Download (ca. 7 MiB) |\n| EPUB | Download (ca. 6 MiB) |\nThese archives contain all the content in the documentation.\nUnpacking\nUnix users should download the .tar.bz2 archives; these are bzipped tar archives and can be handled in the usual way using tar and the bzip2 program. The Info-ZIP unzip program can be used to handle the ZIP archives if desired. The .tar.bz2 archives provide the best compression and fastest download times.\nWindows users can use the ZIP archives since those are customary on that platform. These are created on Unix using the Info-ZIP zip program.\nProblems\nIf you have comments or suggestions for the Python documentation, please send email to docs@python.org."}
{"url": "https://docs.python.org/3.14", "title": "", "text": "Python 3.14.0rc3 documentation\nWelcome! This is the official documentation for Python 3.14.0rc3.\nDocumentation sections:\n|\nWhat's new in Python 3.14?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3.12", "title": "", "text": "Python 3.12.11 documentation\nWelcome! This is the official documentation for Python 3.12.11.\nDocumentation sections:\n|\nWhat's new in Python 3.12?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3.7", "title": "", "text": "Python 3.7.17 documentation\nWelcome! This is the documentation for Python 3.7.17.\nParts of the documentation:\n|\nWhat's new in Python 3.7?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3.6", "title": "", "text": "Python 3.6.15 documentation\nWelcome! This is the documentation for Python 3.6.15.\nParts of the documentation:\n|\nWhat's new in Python 3.6?\nor all \"What's new\" documents since 2.0\nTutorial\nstart here\nLibrary Reference\nkeep this under your pillow\nLanguage Reference\ndescribes syntax and language elements\nPython Setup and Usage\nhow to use Python on different platforms\nPython HOWTOs\nin-depth documents on specific topics\n|\nInstalling Python Modules\ninstalling from the Python Package Index & other sources\nDistributing Python Modules\npublishing modules for installation by others\nExtending and Embedding\ntutorial for C/C++ programmers\nPython/C API\nreference for C/C++ programmers\nFAQs\nfrequently asked questions (with answers!)\n|\nIndices and tables:\n|\nGlobal Module Index\nquick access to all modules\nGeneral Index\nall functions, classes, terms\nGlossary\nthe most important terms explained\n|\nSearch page\nsearch this documentation\nComplete Table of Contents\nlists all sections and subsections\n|\nMeta information:"}
{"url": "https://docs.python.org/3/search.html", "title": "", "text": "Please activate JavaScript to enable the search functionality.\nSearching for multiple words only shows matches that contain all words."}
{"url": "https://docs.python.org/3/reference/introduction.html", "title": "", "text": "1. IntroductionÂ¶\nThis reference manual describes the Python programming language. It is not intended as a tutorial.\nWhile I am trying to be as precise as possible, I chose to use English rather than formal specifications for everything except syntax and lexical analysis. This should make the document more understandable to the average reader, but will leave room for ambiguities. Consequently, if you were coming from Mars and tried to re-implement Python from this document alone, you might have to guess things and in fact you would probably end up implementing quite a different language. On the other hand, if you are using Python and wonder what the precise rules about a particular area of the language are, you should definitely be able to find them here. If you would like to see a more formal definition of the language, maybe you could volunteer your time â or invent a cloning machine :-).\nIt is dangerous to add too many implementation details to a language reference document â the implementation may change, and other implementations of the same language may work differently. On the other hand, CPython is the one Python implementation in widespread use (although alternate implementations continue to gain support), and its particular quirks are sometimes worth being mentioned, especially where the implementation imposes additional limitations. Therefore, youâll find short âimplementation notesâ sprinkled throughout the text.\nEvery Python implementation comes with a number of built-in and standard modules. These are documented in The Python Standard Library. A few built-in modules are mentioned when they interact in a significant way with the language definition.\n1.1. Alternate ImplementationsÂ¶\nThough there is one Python implementation which is by far the most popular, there are some alternate implementations which are of particular interest to different audiences.\nKnown implementations include:\n- CPython\nThis is the original and most-maintained implementation of Py"}
{"url": "https://docs.python.org/3/reference/toplevel_components.html", "title": "", "text": "9. Top-level componentsÂ¶\nThe Python interpreter can get its input from a number of sources: from a script passed to it as standard input or as program argument, typed in interactively, from a module source file, etc. This chapter gives the syntax used in these cases.\n9.1. Complete Python programsÂ¶\nWhile a language specification need not prescribe how the language interpreter\nis invoked, it is useful to have a notion of a complete Python program. A\ncomplete Python program is executed in a minimally initialized environment: all\nbuilt-in and standard modules are available, but none have been initialized,\nexcept for sys\n(various system services), builtins\n(built-in\nfunctions, exceptions and None\n) and __main__\n. The latter is used to\nprovide the local and global namespace for execution of the complete program.\nThe syntax for a complete Python program is that for file input, described in the next section.\nThe interpreter may also be invoked in interactive mode; in this case, it does\nnot read and execute a complete program but reads and executes one statement\n(possibly compound) at a time. The initial environment is identical to that of\na complete program; each statement is executed in the namespace of\n__main__\n.\nA complete program can be passed to the interpreter\nin three forms: with the -c\nstring command line option, as a file\npassed as the first command line argument, or as standard input. If the file\nor standard input is a tty device, the interpreter enters interactive mode;\notherwise, it executes the file as a complete program.\n9.2. File inputÂ¶\nAll input read from non-interactive files has the same form:\nfile_input ::= (NEWLINE | statement\n)*\nThis syntax is used in the following situations:\nwhen parsing a complete Python program (from a file or from a string);\nwhen parsing a module;\nwhen parsing a string passed to the\nexec()\nfunction;\n9.3. Interactive inputÂ¶\nInput in interactive mode is parsed using the following grammar:\ninteractive_input ::= [stmt_list\n] NEWLIN"}
{"url": "https://docs.python.org/3/using/editors.html", "title": "", "text": "8. Editors and IDEsÂ¶\nThere are a number of IDEs that support Python programming language. Many editors and IDEs provide syntax highlighting, debugging tools, and PEP 8 checks.\n8.1. IDLE â Python editor and shellÂ¶\nIDLE is Pythonâs Integrated Development and Learning Environment and is generally bundled with Python installs. If you are on Linux and do not have IDLE installed see Installing IDLE on Linux. For more information see the IDLE docs.\n8.2. Other Editors and IDEsÂ¶\nPythonâs community wiki has information submitted by the community on Editors and IDEs. Please go to Python Editors and Integrated Development Environments for a comprehensive list."}
{"url": "https://docs.python.org/3/reference/executionmodel.html", "title": "", "text": "4. Execution modelÂ¶\n4.1. Structure of a programÂ¶\nA Python program is constructed from code blocks.\nA block is a piece of Python program text that is executed as a unit.\nThe following are blocks: a module, a function body, and a class definition.\nEach command typed interactively is a block. A script file (a file given as\nstandard input to the interpreter or specified as a command line argument to the\ninterpreter) is a code block. A script command (a command specified on the\ninterpreter command line with the -c\noption) is a code block.\nA module run as a top level script (as module __main__\n) from the command\nline using a -m\nargument is also a code block. The string\nargument passed to the built-in functions eval()\nand exec()\nis a\ncode block.\nA code block is executed in an execution frame. A frame contains some administrative information (used for debugging) and determines where and how execution continues after the code blockâs execution has completed.\n4.2. Naming and bindingÂ¶\n4.2.1. Binding of namesÂ¶\nNames refer to objects. Names are introduced by name binding operations.\nThe following constructs bind names:\nformal parameters to functions,\nclass definitions,\nfunction definitions,\nassignment expressions,\ntargets that are identifiers if occurring in an assignment:\nimport\nstatements.type\nstatements.\nThe import\nstatement of the form from ... import *\nbinds all\nnames defined in the imported module, except those beginning with an underscore.\nThis form may only be used at the module level.\nA target occurring in a del\nstatement is also considered bound for\nthis purpose (though the actual semantics are to unbind the name).\nEach assignment or import statement occurs within a block defined by a class or function definition or at the module level (the top-level code block).\nIf a name is bound in a block, it is a local variable of that block, unless\ndeclared as nonlocal\nor global\n. If a name is bound at\nthe module level, it is a global variable. (The variables of the module co"}
{"url": "https://docs.python.org/3/reference/import.html", "title": "", "text": "5. The import systemÂ¶\nPython code in one module gains access to the code in another module\nby the process of importing it. The import\nstatement is\nthe most common way of invoking the import machinery, but it is not the only\nway. Functions such as importlib.import_module()\nand built-in\n__import__()\ncan also be used to invoke the import machinery.\nThe import\nstatement combines two operations; it searches for the\nnamed module, then it binds the results of that search to a name in the local\nscope. The search operation of the import\nstatement is defined as\na call to the __import__()\nfunction, with the appropriate arguments.\nThe return value of __import__()\nis used to perform the name\nbinding operation of the import\nstatement. See the\nimport\nstatement for the exact details of that name binding\noperation.\nA direct call to __import__()\nperforms only the module search and, if\nfound, the module creation operation. While certain side-effects may occur,\nsuch as the importing of parent packages, and the updating of various caches\n(including sys.modules\n), only the import\nstatement performs\na name binding operation.\nWhen an import\nstatement is executed, the standard builtin\n__import__()\nfunction is called. Other mechanisms for invoking the\nimport system (such as importlib.import_module()\n) may choose to bypass\n__import__()\nand use their own solutions to implement import semantics.\nWhen a module is first imported, Python searches for the module and if found,\nit creates a module object [1], initializing it. If the named module\ncannot be found, a ModuleNotFoundError\nis raised. Python implements various\nstrategies to search for the named module when the import machinery is\ninvoked. These strategies can be modified and extended by using various hooks\ndescribed in the sections below.\nChanged in version 3.3: The import system has been updated to fully implement the second phase\nof PEP 302. There is no longer any implicit import machinery - the full\nimport system is exposed through sys."}
{"url": "https://docs.python.org/3/genindex-T.html", "title": "", "text": "|\n-\ntimeit\n-\ntimeit command line option\n- timeit() (in module timeit)\n- timeout\n- Timeout (class in asyncio)\n- timeout (socketserver.BaseServer attribute)\n- timeout() (curses.window method)\n- timeout_at() (in module asyncio)\n- TIMEOUT_MAX (in module _thread)\n- TimeoutError, [1], [2], [3]\n- TimeoutExpired\n- Timer (class in threading)\n- timerfd_create() (in module os)\n- timerfd_gettime() (in module os)\n- timerfd_gettime_ns() (in module os)\n- timerfd_settime() (in module os)\n- timerfd_settime_ns() (in module os)\n- TimerHandle (class in asyncio)\n- times() (in module os)\n- TIMESTAMP (py_compile.PycInvalidationMode attribute)\n- timestamp() (datetime.datetime method)\n- timetuple() (datetime.date method)\n- timetz() (datetime.datetime method)\n- timezone (class in datetime)\n- title() (bytearray method)\n- Tk\n- tk (tkinter.Tk attribute)\n- Tk Option Data Types\n- Tkinter\n-\ntkinter\n-\ntkinter.colorchooser\n-\ntkinter.commondialog\n-\ntkinter.dnd\n-\ntkinter.filedialog\n-\ntkinter.font\n-\ntkinter.messagebox\n-\ntkinter.scrolledtext\n-\ntkinter.simpledialog\n-\ntkinter.ttk\n- TLS\n- TLSv1 (ssl.TLSVersion attribute)\n- TLSv1_1 (ssl.TLSVersion attribute)\n- TLSv1_2 (ssl.TLSVersion attribute)\n- TLSv1_3 (ssl.TLSVersion attribute)\n- TLSVersion (class in ssl)\n- tm_gmtoff (time.struct_time attribute)\n- tm_hour (time.struct_time attribute)\n- tm_isdst (time.struct_time attribute)\n- tm_mday (time.struct_time attribute)\n- tm_min (time.struct_time attribute)\n- tm_mon (time.struct_time attribute)\n- tm_sec (time.struct_time attribute)\n- tm_wday (time.struct_time attribute)\n- tm_yday (time.struct_time attribute)\n- tm_year (time.struct_time attribute)\n- tm_zone (time.struct_time attribute)\n- TMP\n- TMPDIR, [1], [2]\n- TO_BOOL (opcode)\n- to_bytes() (int method)\n- to_eng_string() (decimal.Context method)\n- to_integral() (decimal.Decimal method)\n- to_integral_exact() (decimal.Context method)\n- to_integral_value() (decimal.Decimal method)\n- to_sci_string() (decimal.Context method)\n- to_thread() (in module asyncio)\n- ToASCII"}
{"url": "https://docs.python.org/3/genindex-all.html", "title": "", "text": "- p (pdb command)\n- P_ALL (in module os)\n- P_DETACH (in module os)\n- P_NOWAIT (in module os)\n- P_NOWAITO (in module os)\n- P_OVERLAY (in module os)\n- P_PGID (in module os)\n- P_PID (in module os)\n- P_PIDFD (in module os)\n- P_WAIT (in module os)\n- pack() (in module struct)\n- pack_into() (in module struct)\n- package, [1], [2]\n-\npackage variable\n- PackageMetadata (class in importlib.metadata)\n- PackageNotFoundError\n- PackagePath (class in importlib.metadata)\n- packages_distributions() (in module importlib.metadata)\n- packed (ipaddress.IPv4Address attribute)\n-\npacking\n- packing (widgets)\n- PAGER\n- pair_content() (in module curses)\n- pair_number() (in module curses)\n- pairwise() (in module itertools)\n-\nPANEL_CFLAGS\n-\nPANEL_LIBS\n- parameter\n- Parameter (class in inspect)\n- ParameterizedMIMEHeader (class in email.headerregistry)\n- parameters (inspect.Signature attribute)\n- params (email.headerregistry.ParameterizedMIMEHeader attribute)\n- ParamSpec (class in ast)\n- ParamSpecArgs (in module typing)\n- ParamSpecKwargs (in module typing)\n- paramstyle (in module sqlite3)\n- pardir (in module os)\n- parent (importlib.machinery.ModuleSpec attribute)\n- parent() (tkinter.ttk.Treeview method)\n- parent_process() (in module multiprocessing)\n- parenthesized form\n- parentNode (xml.dom.Node attribute)\n- parents (collections.ChainMap attribute)\n- paretovariate() (in module random)\n- parse() (doctest.DocTestParser method)\n- Parse() (xml.parsers.expat.xmlparser method)\n- parse() (xml.sax.xmlreader.XMLReader method)\n- parse_and_bind() (in module readline)\n- parse_args() (argparse.ArgumentParser method)\n- PARSE_COLNAMES (in module sqlite3)\n- parse_config_h() (in module sysconfig)\n- PARSE_DECLTYPES (in module sqlite3)\n- parse_headers() (in module http.client)\n- parse_intermixed_args() (argparse.ArgumentParser method)\n- parse_known_args() (argparse.ArgumentParser method)\n- parse_known_intermixed_args() (argparse.ArgumentParser method)\n- parse_qs() (in module urllib.parse)\n- parse_qsl() (in module ur"}
{"url": "https://docs.python.org/3/genindex-N.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – N\nN_TOKENS (in module token)\nn_waiting (asyncio.Barrier attribute)\n(threading.Barrier attribute)\nNAK (in module curses.ascii)\nname\n,\n[1]\n,\n[2]\nbinding\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\n,\n[6]\nbinding, global\nclass\nfunction\n,\n[1]\nmangling\n,\n[1]\nrebinding\nunbinding\nname (AttributeError attribute)\n(bz2.BZ2File attribute)\nName (class in ast)\nname (codecs.CodecInfo attribute)\n(contextvars.ContextVar attribute)\n(doctest.DocTest attribute)\n(email.headerregistry.BaseHeader attribute)\n(enum.Enum attribute)\n(gzip.GzipFile attribute)\n(hashlib.hash attribute)\n(hmac.HMAC attribute)\n(http.cookiejar.Cookie attribute)\n(ImportError attribute)\n(importlib.abc.FileLoader attribute)\n(importlib.abc.Traversable attribute)\n(importlib.machinery.AppleFrameworkLoader attribute)\n(importlib.machinery.ExtensionFileLoader attribute)\n(importlib.machinery.ModuleSpec attribute)\n(importlib.machinery.SourceFileLoader attribute)\n(importlib.machinery.SourcelessFileLoader attribute)\n(importlib.resources.abc.Traversable attribute)\n(in module os)\nNAME (in module token)\nname (inspect.Parameter attribute)\n(io.FileIO attribute)\n(logging.Logger attribute)\n(lzma.LZMAFile attribute)\n(multiprocessing.Process attribute)\n(multiprocessing.shared_memory.SharedMemory attribute)\n(NameError attribute)\n(os.DirEntry attribute)\n(pathlib.PurePath attribute)\n(pyclbr.Class attribute)\n(pyclbr.Function attribute)\n(sys.thread_info attribute)\n(tarfile.TarInfo attribute)\n(tempfile.TemporaryDirectory attribute)\n(threading.Thread attribute)\n(traceback.FrameSummary attribute)\n(webbrowser.controller attribute)\n(xml.dom.Attr attribute)\n(xml.dom.DocumentType attribute)\n(zipfile.Path attribute)\nname() (in module unicodedata)\nname2codepoint (in module html.entities)\nnamed expression\nNamed Shared Memory\nnamed tuple\nNAMED_FLAGS (enum.EnumCheck attribute)\nNamedExpr (class in ast)\nNamedTemporaryFile() (in module tempfile)\nNamedT"}
{"url": "https://docs.python.org/3/genindex-O.html", "title": "", "text": "- O_APPEND (in module os)\n- O_ASYNC (in module os)\n- O_BINARY (in module os)\n- O_CLOEXEC (in module os)\n- O_CREAT (in module os)\n- O_DIRECT (in module os)\n- O_DIRECTORY (in module os)\n- O_DSYNC (in module os)\n- O_EVTONLY (in module os)\n- O_EXCL (in module os)\n- O_EXLOCK (in module os)\n- O_FSYNC (in module os)\n- O_NDELAY (in module os)\n- O_NOATIME (in module os)\n- O_NOCTTY (in module os)\n- O_NOFOLLOW (in module os)\n- O_NOFOLLOW_ANY (in module os)\n- O_NOINHERIT (in module os)\n- O_NONBLOCK (in module os)\n- O_PATH (in module os)\n- O_RANDOM (in module os)\n- O_RDONLY (in module os)\n- O_RDWR (in module os)\n- O_RSYNC (in module os)\n- O_SEQUENTIAL (in module os)\n- O_SHLOCK (in module os)\n- O_SHORT_LIVED (in module os)\n- O_SYMLINK (in module os)\n- O_SYNC (in module os)\n- O_TEMPORARY (in module os)\n- O_TEXT (in module os)\n- O_TMPFILE (in module os)\n- O_TRUNC (in module os)\n- O_WRONLY (in module os)\n- obj (AttributeError attribute)\n- object, [1]\n- asynchronous-generator\n- Boolean, [1]\n- built-in function, [1]\n- built-in method, [1]\n- bytearray, [1], [2], [3]\n- bytes, [1], [2]\n- callable, [1]\n- Capsule\n- class, [1], [2]\n- class instance, [1], [2]\n- code, [1], [2], [3]\n- complex\n- complex number, [1]\n- deallocation\n- dictionary, [1], [2], [3], [4], [5], [6], [7]\n- Ellipsis\n- file, [1]\n- finalization\n- floating-point, [1], [2]\n- frame\n- frozenset, [1]\n- function, [1], [2], [3], [4], [5]\n- generator, [1], [2]\n- GenericAlias\n- immutable, [1], [2]\n- immutable sequence\n- instance, [1], [2]\n- instancemethod\n- integer, [1], [2]\n- io.StringIO\n- list, [1], [2], [3], [4], [5], [6], [7], [8]\n- long integer\n- mapping, [1], [2], [3], [4], [5]\n- memoryview, [1]\n- method, [1], [2], [3], [4], [5]\n- module, [1], [2]\n- mutable, [1], [2]\n- mutable sequence\n- None, [1], [2]\n- NotImplemented\n- numeric, [1], [2], [3], [4]\n- range\n- sequence, [1], [2], [3], [4], [5], [6], [7], [8]\n- set, [1], [2], [3]\n- set type\n- slice\n- socket\n- string, [1], [2]\n- traceback, [1], [2], [3], [4]\n- tuple, [1], [2], [3],"}
{"url": "https://docs.python.org/3/genindex-A.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – A\nA (in module re)\na2b_base64() (in module binascii)\na2b_hex() (in module binascii)\na2b_qp() (in module binascii)\na2b_uu() (in module binascii)\na85decode() (in module base64)\na85encode() (in module base64)\nA_ALTCHARSET (in module curses)\nA_ATTRIBUTES (in module curses)\nA_BLINK (in module curses)\nA_BOLD (in module curses)\nA_CHARTEXT (in module curses)\nA_COLOR (in module curses)\nA_DIM (in module curses)\nA_HORIZONTAL (in module curses)\nA_INVIS (in module curses)\nA_ITALIC (in module curses)\nA_LEFT (in module curses)\nA_LOW (in module curses)\nA_NORMAL (in module curses)\nA_PROTECT (in module curses)\nA_REVERSE (in module curses)\nA_RIGHT (in module curses)\nA_STANDOUT (in module curses)\nA_TOP (in module curses)\nA_UNDERLINE (in module curses)\nA_VERTICAL (in module curses)\nabc\nmodule\nABC (class in abc)\nABCMeta (class in abc)\nABDAY_1 (in module locale)\nABDAY_2 (in module locale)\nABDAY_3 (in module locale)\nABDAY_4 (in module locale)\nABDAY_5 (in module locale)\nABDAY_6 (in module locale)\nABDAY_7 (in module locale)\nabiflags (in module sys)\nABMON_1 (in module locale)\nABMON_10 (in module locale)\nABMON_11 (in module locale)\nABMON_12 (in module locale)\nABMON_2 (in module locale)\nABMON_3 (in module locale)\nABMON_4 (in module locale)\nABMON_5 (in module locale)\nABMON_6 (in module locale)\nABMON_7 (in module locale)\nABMON_8 (in module locale)\nABMON_9 (in module locale)\nabort (C function)\nABORT (in module tkinter.messagebox)\nabort() (asyncio.Barrier method)\n(asyncio.DatagramTransport method)\n(asyncio.WriteTransport method)\n(ftplib.FTP method)\n(in module os)\n(threading.Barrier method)\nabort_clients() (asyncio.Server method)\nABORTRETRYIGNORE (in module tkinter.messagebox)\nabove() (curses.panel.Panel method)\nABOVE_NORMAL_PRIORITY_CLASS (in module subprocess)\nabs\nbuilt-in function\n,\n[1]\nabs()\nbuilt-in function\nabs() (decimal.Context method)\n(in module operator)\nabsolute() (path"}
{"url": "https://docs.python.org/3/genindex-Symbols.html", "title": "", "text": "-\n! (exclamation mark)\n-\n! (exclamation)\n- ! (pdb command)\n- ! f-string\n- ! formatted string literal\n- ! patterns\n-\n!=\n-\n\" (double quote)\n-\n\"\"\"\n-\n# (hash)\n-\n$ (dollar)\n-\n% (percent)\n-\n%=\n-\n& (ampersand)\n-\n&=\n-\n' (single quote)\n-\n'''\n-\n() (parentheses)\n-\n(?\n-\n(?!\n-\n(?#\n-\n(?(\n-\n(?:\n-\n(?<!\n-\n(?<=\n-\n(?=\n-\n(?P<\n-\n(?P=\n-\n* (asterisk)\n-\n**\n-\n**=\n-\n*+\n-\n*=\n-\n*?\n-\n+ (plus)\n-\n++\n-\n+=\n-\n+?\n- , (comma)\n-\n-\n-\n- (minus)\n-\n--altinstall\n-\n--annotate\n-\n--best\n-\n--bind\n-\n--buffer\n-\n--build\n-\n--catch\n-\n--cgi\n-\n--check-hash-based-pycs\n-\n--choice\n-\n--clear\n-\n--command\n-\n--compact\n-\n--compress\n-\n--copies\n-\n--count\n-\n--coverdir\n-\n--create\n-\n--css\n-\n--decompress\n-\n--default-pip\n-\n--details\n-\n--directory\n-\n--disable-gil\n-\n--disable-ipv6\n-\n--disable-test-modules\n-\n--durations\n-\n--enable-big-digits\n-\n--enable-bolt\n-\n--enable-experimental-jit\n-\n--enable-framework\n-\n--enable-loadable-sqlite-extensions\n-\n--enable-optimizations\n-\n--enable-profiling\n-\n--enable-pystats\n-\n--enable-shared\n-\n--enable-universalsdk\n-\n--enable-wasm-dynamic-linking\n-\n--enable-wasm-pthreads\n-\n--encoding\n-\n--exact\n-\n--exec-prefix\n-\n--extract\n-\n--fail-fast\n-\n--failfast\n-\n--fast\n-\n--file\n-\n--filter\n-\n--first-weekday\n-\n--float\n-\n--hardlink-dupes\n-\n--help\n-\n--help-all\n-\n--help-env\n-\n--help-xoptions\n-\n--host\n-\n--ignore-dir\n-\n--ignore-module\n-\n--include-attributes\n-\n--indent\n-\n--indentlevel\n-\n--info\n-\n--integer\n-\n--invalidation-mode\n-\n--json-lines\n-\n--lines\n-\n--list\n-\n--listfuncs\n-\n--locale\n-\n--locals\n-\n--main\n-\n--memo\n-\n--metadata-encoding\n-\n--missing\n-\n--mode\n-\n--months\n-\n--name\n-\n--namespace\n-\n--new-tab\n-\n--new-window\n-\n--no-ensure-ascii\n-\n--no-indent\n-\n--no-report\n-\n--no-type-comments\n-\n--nonaliased\n-\n--number\n-\n--option\n-\n--output\n-\n--pattern\n-\n--preamble\n-\n--prefix\n-\n--process\n-\n--prompt\n-\n--protocol\n-\n--python\n-\n--quiet\n-\n--repeat\n-\n--report\n-\n--root\n-\n--setup\n-\n--show-caches\n-\n--show-offsets\n-\n--sort-keys\n-\n--spacing\n-\n--start-directory\n-\n--summary\n-\n--symlinks\n-\n--system-site-packages\n-\n--tab\n-\n--terse\n-\n--test\n-\n--timin"}
{"url": "https://docs.python.org/3/genindex-K.html", "title": "", "text": "|\n- KEY_RESIZE (in module curses)\n- KEY_RESTART (in module curses)\n- KEY_RESUME (in module curses)\n- KEY_RIGHT (in module curses)\n- KEY_SAVE (in module curses)\n- KEY_SBEG (in module curses)\n- KEY_SCANCEL (in module curses)\n- KEY_SCOMMAND (in module curses)\n- KEY_SCOPY (in module curses)\n- KEY_SCREATE (in module curses)\n- KEY_SDC (in module curses)\n- KEY_SDL (in module curses)\n- KEY_SELECT (in module curses)\n- KEY_SEND (in module curses)\n- KEY_SEOL (in module curses)\n- KEY_SET_VALUE (in module winreg)\n- KEY_SEXIT (in module curses)\n- KEY_SF (in module curses)\n- KEY_SFIND (in module curses)\n- KEY_SHELP (in module curses)\n- KEY_SHOME (in module curses)\n- KEY_SIC (in module curses)\n- KEY_SLEFT (in module curses)\n- KEY_SMESSAGE (in module curses)\n- KEY_SMOVE (in module curses)\n- KEY_SNEXT (in module curses)\n- KEY_SOPTIONS (in module curses)\n- KEY_SPREVIOUS (in module curses)\n- KEY_SPRINT (in module curses)\n- KEY_SR (in module curses)\n- KEY_SREDO (in module curses)\n- KEY_SREPLACE (in module curses)\n- KEY_SRESET (in module curses)\n- KEY_SRIGHT (in module curses)\n- KEY_SRSUME (in module curses)\n- KEY_SSAVE (in module curses)\n- KEY_SSUSPEND (in module curses)\n- KEY_STAB (in module curses)\n- KEY_SUNDO (in module curses)\n- KEY_SUSPEND (in module curses)\n- KEY_UNDO (in module curses)\n- KEY_UP (in module curses)\n- KEY_WOW64_32KEY (in module winreg)\n- KEY_WOW64_64KEY (in module winreg)\n- KEY_WRITE (in module winreg)\n- KeyboardInterrupt\n- KeyError\n- keylog_filename (ssl.SSLContext attribute)\n- keyname() (in module curses)\n- keypad() (curses.window method)\n- keyrefs() (weakref.WeakKeyDictionary method)\n- keys() (contextvars.Context method)\n- KeysView (class in collections.abc)\n- keyword, [1]\n- as, [1], [2], [3]\n- async\n- await, [1]\n- case\n- elif\n- else, [1], [2], [3], [4], [5]\n- except\n- except_star\n- finally, [1], [2], [3], [4]\n- from, [1]\n- if\n- in\n- module\n- yield\n- keyword (class in ast)\n- keyword argument\n- keywords (functools.partial attribute)\n- kill() (asyncio.subprocess.Pr"}
{"url": "https://docs.python.org/3/genindex-Z.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – Z\nz\nin string formatting\nz85decode() (in module base64)\nz85encode() (in module base64)\nZen of Python\nZeroDivisionError\nexception\nzfill() (bytearray method)\n(bytes method)\n(str method)\nzip()\nbuilt-in function\nZIP_BZIP2 (in module zipfile)\nZIP_DEFLATED (in module zipfile)\nzip_longest() (in module itertools)\nZIP_LZMA (in module zipfile)\nZIP_STORED (in module zipfile)\nzipapp\nmodule\nzipapp command line option\n--compress\n--help\n--info\n--main\n--output\n--python\n-c\n-h\n-m\n-o\n-p\nzipfile\nmodule\nZipFile (class in zipfile)\nzipfile command line option\n--create\n--extract\n--list\n--metadata-encoding\n--test\n-c\n-e\n-l\n-t\nzipimport\nmodule\nzipimporter (class in zipimport)\nZipImportError\nZipInfo (class in zipfile)\nzlib\nmodule\nZLIB_CFLAGS\ncommand line option\nZLIB_LIBS\ncommand line option\nZLIB_RUNTIME_VERSION (in module zlib)\nZLIB_VERSION (in module zlib)\nzoneinfo\nmodule\nZoneInfo (class in zoneinfo)\nZoneInfoNotFoundError\nzscore() (statistics.NormalDist method)\nÂ«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|"}
{"url": "https://docs.python.org/3/genindex-S.html", "title": "", "text": "- S (in module re)\n- S_ENFMT (in module stat)\n- S_IEXEC (in module stat)\n- S_IFBLK (in module stat)\n- S_IFCHR (in module stat)\n- S_IFDIR (in module stat)\n- S_IFDOOR (in module stat)\n- S_IFIFO (in module stat)\n- S_IFLNK (in module stat)\n- S_IFMT() (in module stat)\n- S_IFPORT (in module stat)\n- S_IFREG (in module stat)\n- S_IFSOCK (in module stat)\n- S_IFWHT (in module stat)\n- S_IMODE() (in module stat)\n- S_IREAD (in module stat)\n- S_IRGRP (in module stat)\n- S_IROTH (in module stat)\n- S_IRUSR (in module stat)\n- S_IRWXG (in module stat)\n- S_IRWXO (in module stat)\n- S_IRWXU (in module stat)\n- S_ISBLK() (in module stat)\n- S_ISCHR() (in module stat)\n- S_ISDIR() (in module stat)\n- S_ISDOOR() (in module stat)\n- S_ISFIFO() (in module stat)\n- S_ISGID (in module stat)\n- S_ISLNK() (in module stat)\n- S_ISPORT() (in module stat)\n- S_ISREG() (in module stat)\n- S_ISSOCK() (in module stat)\n- S_ISUID (in module stat)\n- S_ISVTX (in module stat)\n- S_ISWHT() (in module stat)\n- S_IWGRP (in module stat)\n- S_IWOTH (in module stat)\n- S_IWRITE (in module stat)\n- S_IWUSR (in module stat)\n- S_IXGRP (in module stat)\n- S_IXOTH (in module stat)\n- S_IXUSR (in module stat)\n- safe (uuid.SafeUUID attribute)\n- safe_path (sys.flags attribute)\n- safe_substitute() (string.Template method)\n- SafeChildWatcher (class in asyncio)\n- saferepr() (in module pprint)\n- SafeUUID (class in uuid)\n- same_files (filecmp.dircmp attribute)\n- same_quantum() (decimal.Context method)\n- samefile() (in module os.path)\n- SameFileError\n- sameopenfile() (in module os.path)\n- samesite (http.cookies.Morsel attribute)\n- samestat() (in module os.path)\n- sample() (in module random)\n- samples() (statistics.NormalDist method)\n- SATURDAY (in module calendar)\n- save() (http.cookiejar.FileCookieJar method)\n- SaveAs (class in tkinter.filedialog)\n- SAVEDCWD (in module test.support.os_helper)\n- SaveFileDialog (class in tkinter.filedialog)\n- SaveKey() (in module winreg)\n- SaveSignals (class in test.support)\n- savetty() (in module curses)\n- SAX2"}
{"url": "https://docs.python.org/3/genindex-B.html", "title": "", "text": "|\n- body() (tkinter.simpledialog.Dialog method)\n- body_encode() (email.charset.Charset method)\n- body_encoding (email.charset.Charset attribute)\n- body_line_iterator() (in module email.iterators)\n- BOLD (in module tkinter.font)\n-\nBOLT_APPLY_FLAGS\n-\nBOLT_INSTRUMENT_FLAGS\n- BOM (in module codecs)\n- BOM_BE (in module codecs)\n- BOM_LE (in module codecs)\n- BOM_UTF16 (in module codecs)\n- BOM_UTF16_BE (in module codecs)\n- BOM_UTF16_LE (in module codecs)\n- BOM_UTF32 (in module codecs)\n- BOM_UTF32_BE (in module codecs)\n- BOM_UTF32_LE (in module codecs)\n- BOM_UTF8 (in module codecs)\n- bool (built-in class)\n-\nBoolean\n- BOOLEAN_STATES (configparser.ConfigParser attribute)\n- BooleanOptionalAction (class in argparse)\n- BoolOp (class in ast)\n- bootstrap() (in module ensurepip)\n- border() (curses.window method)\n- borrowed reference\n- bottom() (curses.panel.Panel method)\n- bottom_panel() (in module curses.panel)\n- BoundArguments (class in inspect)\n- BoundaryError\n- BoundedSemaphore (class in asyncio)\n- BoundedSemaphore() (multiprocessing.managers.SyncManager method)\n- box() (curses.window method)\n- bpbynumber (bdb.Breakpoint attribute)\n- bpformat() (bdb.Breakpoint method)\n- bplist (bdb.Breakpoint attribute)\n- bpprint() (bdb.Breakpoint method)\n- BRANCH (monitoring event)\n-\nbreak\n- Break (class in ast)\n- break (pdb command)\n- break_anywhere() (bdb.Bdb method)\n- break_here() (bdb.Bdb method)\n- break_long_words (textwrap.TextWrapper attribute)\n- break_on_hyphens (textwrap.TextWrapper attribute)\n- Breakpoint (class in bdb)\n-\nbreakpoint()\n- breakpointhook() (in module sys)\n- breakpoints\n- broadcast_address (ipaddress.IPv4Network attribute)\n- broken (asyncio.Barrier attribute)\n- BrokenBarrierError, [1]\n- BrokenExecutor\n- BrokenPipeError\n- BrokenProcessPool\n- BrokenThreadPool\n- BROWSER, [1], [2]\n- BS (in module curses.ascii)\n- BsdDbShelf (class in shelve)\n- buf (multiprocessing.shared_memory.SharedMemory attribute)\n- Buffer (class in collections.abc)\n- buffer (io.TextIOBase attribute)\n-\nbuf"}
{"url": "https://docs.python.org/3/genindex-C.html", "title": "", "text": "- C\n- C-contiguous, [1]\n- C14NWriterTarget (class in xml.etree.ElementTree)\n- c_bool (class in ctypes)\n- c_byte (class in ctypes)\n- c_char (class in ctypes)\n- c_char_p (class in ctypes)\n- C_CONTIGUOUS (inspect.BufferFlags attribute)\n- c_contiguous (memoryview attribute)\n- c_double (class in ctypes)\n- c_float (class in ctypes)\n- c_int (class in ctypes)\n- c_int16 (class in ctypes)\n- c_int32 (class in ctypes)\n- c_int64 (class in ctypes)\n- c_int8 (class in ctypes)\n- c_long (class in ctypes)\n- c_longdouble (class in ctypes)\n- c_longlong (class in ctypes)\n- C_RAISE (monitoring event)\n- C_RETURN (monitoring event)\n- c_short (class in ctypes)\n- c_size_t (class in ctypes)\n- c_ssize_t (class in ctypes)\n- c_time_t (class in ctypes)\n- c_ubyte (class in ctypes)\n- c_uint (class in ctypes)\n- c_uint16 (class in ctypes)\n- c_uint32 (class in ctypes)\n- c_uint64 (class in ctypes)\n- c_uint8 (class in ctypes)\n- c_ulong (class in ctypes)\n- c_ulonglong (class in ctypes)\n- c_ushort (class in ctypes)\n- c_void_p (class in ctypes)\n- c_wchar (class in ctypes)\n- c_wchar_p (class in ctypes)\n- CACHE (opcode)\n- cache() (in module functools)\n- cache_clear() (functools.lru_cache method)\n- cache_from_source() (in module importlib.util)\n- cache_info() (functools.lru_cache method)\n- cached (importlib.machinery.ModuleSpec attribute)\n- cached_property() (in module functools)\n- CacheFTPHandler (class in urllib.request)\n- calcobjsize() (in module test.support)\n- calcsize() (in module struct)\n- calcvobjsize() (in module test.support)\n-\ncalendar\n- Calendar (class in calendar)\n-\ncalendar command line option\n- calendar() (in module calendar)\n- call\n- Call (class in ast)\n- CALL (monitoring event)\n- call() (in module operator)\n- call_args (unittest.mock.Mock attribute)\n- call_args_list (unittest.mock.Mock attribute)\n- call_at() (asyncio.loop method)\n- call_count (unittest.mock.Mock attribute)\n- call_exception_handler() (asyncio.loop method)\n- CALL_FUNCTION_EX (opcode)\n- CALL_INTRINSIC_1 (opcode)\n- CALL_INTRINSIC_"}
{"url": "https://docs.python.org/3/genindex-J.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – J\nj\nin numeric literal\nJANUARY (in module calendar)\nJava\nlanguage\njava_ver() (in module platform)\njoin() (asyncio.Queue method)\n(bytearray method)\n(bytes method)\n(in module os.path)\n(in module shlex)\n(multiprocessing.JoinableQueue method)\n(multiprocessing.pool.Pool method)\n(multiprocessing.Process method)\n(queue.Queue method)\n(str method)\n(threading.Thread method)\njoin_thread() (in module test.support.threading_helper)\n(multiprocessing.Queue method)\nJoinableQueue (class in multiprocessing)\nJoinedStr (class in ast)\njoinpath() (importlib.abc.Traversable method)\n(importlib.resources.abc.Traversable method)\n(pathlib.PurePath method)\n(zipfile.Path method)\njs_output() (http.cookies.BaseCookie method)\n(http.cookies.Morsel method)\njson\nmodule\n,\n[1]\njson.tool\nmodule\njson.tool command line option\n--compact\n--help\n--indent\n--json-lines\n--no-ensure-ascii\n--no-indent\n--sort-keys\n--tab\n-h\ninfile\noutfile\nJSONDecodeError\nJSONDecoder (class in json)\nJSONEncoder (class in json)\nJULY (in module calendar)\nJUMP (monitoring event)\n(opcode)\njump (pdb command)\nJUMP_BACKWARD (opcode)\nJUMP_BACKWARD_NO_INTERRUPT (opcode)\nJUMP_FORWARD (opcode)\nJUMP_NO_INTERRUPT (opcode)\nJUNE (in module calendar)\nÂ«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|"}
{"url": "https://docs.python.org/3/genindex-I.html", "title": "", "text": "- I (in module re)\n-\nI/O control\n- iadd() (in module operator)\n- iand() (in module operator)\n- iconcat() (in module operator)\n-\nid\n- id (ssl.SSLSession attribute)\n-\nid()\n- id() (unittest.TestCase method)\n- idcok() (curses.window method)\n- ident (select.kevent attribute)\n- identchars (cmd.Cmd attribute)\n- identifier, [1]\n- identify() (tkinter.ttk.Notebook method)\n- identify_column() (tkinter.ttk.Treeview method)\n- identify_element() (tkinter.ttk.Treeview method)\n- identify_region() (tkinter.ttk.Treeview method)\n- identify_row() (tkinter.ttk.Treeview method)\n-\nidentity\n- identity of an object\n- IDLE, [1]\n-\nidle command line option\n- IDLE_PRIORITY_CLASS (in module subprocess)\n-\nidlelib\n- IDLESTARTUP, [1], [2], [3], [4]\n- idlok() (curses.window method)\n-\nif\n- If (class in ast)\n- if_indextoname() (in module socket)\n- if_nameindex() (in module socket)\n- if_nametoindex() (in module socket)\n- IfExp (class in ast)\n- ifloordiv() (in module operator)\n- iglob() (in module glob)\n- ignorableWhitespace() (xml.sax.handler.ContentHandler method)\n-\nignore\n- ignore (bdb.Breakpoint attribute)\n- IGNORE (in module tkinter.messagebox)\n- ignore (pdb command)\n- ignore_environment (sys.flags attribute)\n- ignore_errors() (in module codecs)\n- IGNORE_EXCEPTION_DETAIL (in module doctest)\n- ignore_patterns() (in module shutil)\n- ignore_warnings() (in module test.support.warnings_helper)\n- IGNORECASE (in module re)\n- IISCGIHandler (class in wsgiref.handlers)\n- IllegalMonthError\n- IllegalWeekdayError\n- ilshift() (in module operator)\n- imag (numbers.Complex attribute)\n- imaginary literal\n- imap() (multiprocessing.pool.Pool method)\n-\nIMAP4\n- IMAP4 (class in imaplib)\n- IMAP4.abort\n- IMAP4.error\n- IMAP4.readonly\n-\nIMAP4_SSL\n- IMAP4_SSL (class in imaplib)\n-\nIMAP4_stream\n- IMAP4_stream (class in imaplib)\n- imap_unordered() (multiprocessing.pool.Pool method)\n-\nimaplib\n- imatmul() (in module operator)\n-\nimghdr\n- immedok() (curses.window method)\n- immortal\n- immutable\n- immutable object\n-\nimmutable sequence"}
{"url": "https://docs.python.org/3/genindex-U.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – U\nU (in module re)\nu\"\nstring literal\nu'\nstring literal\nUAdd (class in ast)\nucd_3_2_0 (in module unicodedata)\nudata (select.kevent attribute)\nUDPServer (class in socketserver)\nUF_APPEND (in module stat)\nUF_COMPRESSED (in module stat)\nUF_DATAVAULT (in module stat)\nUF_HIDDEN (in module stat)\nUF_IMMUTABLE (in module stat)\nUF_NODUMP (in module stat)\nUF_NOUNLINK (in module stat)\nUF_OPAQUE (in module stat)\nUF_SETTABLE (in module stat)\nUF_TRACKED (in module stat)\nUID (class in plistlib)\nuid (tarfile.TarInfo attribute)\nuid() (imaplib.IMAP4 method)\nuidl() (poplib.POP3 method)\nULONG_MAX (C macro)\nulp() (in module math)\numask() (in module os)\nunalias (pdb command)\nuname (tarfile.TarInfo attribute)\nuname() (in module os)\n(in module platform)\nunary\narithmetic operation\nbitwise operation\nUNARY_INVERT (opcode)\nUNARY_NEGATIVE (opcode)\nUNARY_NOT (opcode)\nunaryfunc (C type)\nUnaryOp (class in ast)\nunbinding\nname\nUnboundLocalError\n,\n[1]\nunbuffered I/O\nUNC paths\nand os.makedirs()\nuncancel() (asyncio.Task method)\nUNCHECKED_HASH (py_compile.PycInvalidationMode attribute)\nunconsumed_tail (zlib.Decompress attribute)\nunctrl() (in module curses)\n(in module curses.ascii)\nUnderflow (class in decimal)\nundisplay (pdb command)\nundo() (in module turtle)\nundobufferentries() (in module turtle)\nundoc_header (cmd.Cmd attribute)\nunescape() (in module html)\n(in module xml.sax.saxutils)\nUnexpectedException\nunexpectedSuccesses (unittest.TestResult attribute)\nunfreeze() (in module gc)\nunget_wch() (in module curses)\nungetch() (in module curses)\n(in module msvcrt)\nungetmouse() (in module curses)\nungetwch() (in module msvcrt)\nunhexlify() (in module binascii)\nUnicode\n,\n[1]\n,\n[2]\ndatabase\nUNICODE (in module re)\nUnicode Consortium\nunicode_literals (in module __future__)\nunicodedata\nmodule\nUnicodeDecodeError\nUnicodeEncodeError\nUnicodeError\nUnicodeTranslateError\nUnicodeWarning\nunidata_version (in "}
{"url": "https://docs.python.org/3/genindex-H.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – H\nhalfdelay() (in module curses)\nHandle (class in asyncio)\nhandle an exception\nhandle() (http.server.BaseHTTPRequestHandler method)\n(logging.Handler method)\n(logging.handlers.QueueListener method)\n(logging.Logger method)\n(logging.NullHandler method)\n(socketserver.BaseRequestHandler method)\n(wsgiref.simple_server.WSGIRequestHandler method)\nhandle_charref() (html.parser.HTMLParser method)\nhandle_comment() (html.parser.HTMLParser method)\nhandle_data() (html.parser.HTMLParser method)\nhandle_decl() (html.parser.HTMLParser method)\nhandle_defect() (email.policy.Policy method)\nhandle_endtag() (html.parser.HTMLParser method)\nhandle_entityref() (html.parser.HTMLParser method)\nhandle_error() (socketserver.BaseServer method)\nhandle_expect_100() (http.server.BaseHTTPRequestHandler method)\nhandle_one_request() (http.server.BaseHTTPRequestHandler method)\nhandle_pi() (html.parser.HTMLParser method)\nhandle_request() (socketserver.BaseServer method)\n(xmlrpc.server.CGIXMLRPCRequestHandler method)\nhandle_startendtag() (html.parser.HTMLParser method)\nhandle_starttag() (html.parser.HTMLParser method)\nhandle_timeout() (socketserver.BaseServer method)\nhandleError() (logging.Handler method)\n(logging.handlers.SocketHandler method)\nhandler\nexception\nHandler (class in logging)\nHandlers (class in signal)\nhandlers (logging.Logger attribute)\nhardlink_to() (pathlib.Path method)\nharmonic_mean() (in module statistics)\nHAS_ALPN (in module ssl)\nhas_children() (symtable.SymbolTable method)\nhas_colors() (in module curses)\nhas_default() (typing.ParamSpec method)\n(typing.TypeVar method)\n(typing.TypeVarTuple method)\nhas_dualstack_ipv6() (in module socket)\nHAS_ECDH (in module ssl)\nhas_extended_color_support() (in module curses)\nhas_extn() (smtplib.SMTP method)\nhas_header() (csv.Sniffer method)\n(urllib.request.Request method)\nhas_ic() (in module curses)\nhas_il() (in module curses)\nhas_ipv6"}
{"url": "https://docs.python.org/3/genindex-_.html", "title": "", "text": "-\n_ (underscore)\n- _, identifiers\n- __, identifiers\n- __abs__() (in module operator)\n- __add__() (in module operator)\n- __aenter__() (object method)\n- __aexit__() (object method)\n- __aiter__() (object method)\n- __all__\n- __and__() (enum.Flag method)\n- __anext__() (agen method)\n- __annotations__ (class attribute)\n- __args__ (genericalias attribute)\n- __await__() (object method)\n- __bases__ (class attribute)\n- __bool__() (object method), [1]\n- __bound__ (typing.TypeVar attribute)\n- __breakpointhook__ (in module sys)\n- __buffer__() (object method)\n- __bytes__() (email.message.EmailMessage method)\n- __cached__ (module attribute), [1]\n- __call__() (argparse.Action method)\n- __callback__ (weakref.ref attribute)\n- __cause__ (BaseException attribute)\n- __ceil__() (fractions.Fraction method)\n- __class__ (instance attribute)\n- __class_getitem__() (object class method)\n- __classcell__ (class namespace entry)\n- __closure__ (function attribute), [1]\n- __code__ (function attribute), [1]\n- __complex__() (object method)\n- __concat__() (in module operator)\n- __constraints__ (typing.TypeVar attribute)\n- __contains__() (email.message.EmailMessage method)\n- __context__ (BaseException attribute)\n- __contravariant__ (typing.TypeVar attribute)\n- __copy__() (copy protocol)\n- __covariant__ (typing.TypeVar attribute)\n- __debug__\n- __deepcopy__() (copy protocol)\n- __default__ (typing.ParamSpec attribute)\n- __defaults__ (function attribute), [1]\n- __del__() (io.IOBase method)\n- __delattr__() (object method)\n- __delete__() (object method)\n- __delitem__() (email.message.EmailMessage method)\n- __dict__ (class attribute)\n- __dir__ (module attribute)\n- __dir__() (enum.Enum method)\n- __displayhook__ (in module sys)\n- __divmod__() (object method)\n- __doc__ (class attribute)\n- __enter__() (contextmanager method)\n- __eq__() (email.charset.Charset method)\n- __excepthook__ (in module sys)\n- __exit__() (contextmanager method)\n- __file__ (module attribute), [1], [2], [3]\n- __firstlineno__ (class attribute)"}
{"url": "https://docs.python.org/3/genindex-X.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – X\nX (in module re)\nX509 certificate\nX_OK (in module os)\nxatom() (imaplib.IMAP4 method)\nXATTR_CREATE (in module os)\nXATTR_REPLACE (in module os)\nXATTR_SIZE_MAX (in module os)\nxcor() (in module turtle)\nxdrlib\nmodule\nXHTML\nXHTML_NAMESPACE (in module xml.dom)\nxml\nmodule\nXML() (in module xml.etree.ElementTree)\nxml.dom\nmodule\nxml.dom.minidom\nmodule\nxml.dom.pulldom\nmodule\nxml.etree.ElementInclude\nmodule\nxml.etree.ElementTree\nmodule\nxml.parsers.expat\nmodule\nxml.parsers.expat.errors\nmodule\nxml.parsers.expat.model\nmodule\nxml.sax\nmodule\nxml.sax.handler\nmodule\nxml.sax.saxutils\nmodule\nxml.sax.xmlreader\nmodule\nXML_ERROR_ABORTED (in module xml.parsers.expat.errors)\nXML_ERROR_AMPLIFICATION_LIMIT_BREACH (in module xml.parsers.expat.errors)\nXML_ERROR_ASYNC_ENTITY (in module xml.parsers.expat.errors)\nXML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF (in module xml.parsers.expat.errors)\nXML_ERROR_BAD_CHAR_REF (in module xml.parsers.expat.errors)\nXML_ERROR_BINARY_ENTITY_REF (in module xml.parsers.expat.errors)\nXML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING (in module xml.parsers.expat.errors)\nXML_ERROR_DUPLICATE_ATTRIBUTE (in module xml.parsers.expat.errors)\nXML_ERROR_ENTITY_DECLARED_IN_PE (in module xml.parsers.expat.errors)\nXML_ERROR_EXTERNAL_ENTITY_HANDLING (in module xml.parsers.expat.errors)\nXML_ERROR_FEATURE_REQUIRES_XML_DTD (in module xml.parsers.expat.errors)\nXML_ERROR_FINISHED (in module xml.parsers.expat.errors)\nXML_ERROR_INCOMPLETE_PE (in module xml.parsers.expat.errors)\nXML_ERROR_INCORRECT_ENCODING (in module xml.parsers.expat.errors)\nXML_ERROR_INVALID_ARGUMENT (in module xml.parsers.expat.errors)\nXML_ERROR_INVALID_TOKEN (in module xml.parsers.expat.errors)\nXML_ERROR_JUNK_AFTER_DOC_ELEMENT (in module xml.parsers.expat.errors)\nXML_ERROR_MISPLACED_XML_PI (in module xml.parsers.expat.errors)\nXML_ERROR_NO_BUFFER (in module xml.parsers.expat.errors)\nXML_ERROR_NO_ELEMENTS (in"}
{"url": "https://docs.python.org/3/genindex-G.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – G\ngaierror\ngamma() (in module math)\ngammavariate() (in module random)\ngarbage (in module gc)\ngarbage collection\n,\n[1]\ngather() (curses.textpad.Textbox method)\n(in module asyncio)\ngauss() (in module random)\ngc\nmodule\ngc_collect() (in module test.support)\ngcd() (in module math)\ngcvisitobjects_t (C type)\nGDBM_CFLAGS\ncommand line option\nGDBM_LIBS\ncommand line option\nge() (in module operator)\ngenerate_tokens() (in module tokenize)\ngenerator\n,\n[1]\nexpression\nfunction\n,\n[1]\n,\n[2]\niterator\n,\n[1]\nobject\n,\n[1]\n,\n[2]\nGenerator (class in collections.abc)\n(class in email.generator)\n(class in typing)\ngenerator expression\n,\n[1]\ngenerator iterator\ngenerator_stop (in module __future__)\nGeneratorExit\nexception\n,\n[1]\nGeneratorExp (class in ast)\ngenerators (in module __future__)\nGeneratorType (in module types)\nGeneric\nAlias\ngeneric\nspecial attribute\nGeneric (class in typing)\ngeneric function\ngeneric type\ngeneric_visit() (ast.NodeVisitor method)\nGenericAlias\nobject\nGenericAlias (class in types)\ngenops() (in module pickletools)\ngeometric_mean() (in module statistics)\nget() (asyncio.Queue method)\n(configparser.ConfigParser method)\n(contextvars.Context method)\n(contextvars.ContextVar method)\n(dict method)\n(email.message.EmailMessage method)\n(email.message.Message method)\n(in module webbrowser)\n(mailbox.Mailbox method)\n(multiprocessing.pool.AsyncResult method)\n(multiprocessing.Queue method)\n(multiprocessing.SimpleQueue method)\n(queue.Queue method)\n(queue.SimpleQueue method)\n(tkinter.ttk.Combobox method)\n(tkinter.ttk.Spinbox method)\n(types.MappingProxyType method)\n(xml.etree.ElementTree.Element method)\nGET_AITER (opcode)\nget_all() (email.message.EmailMessage method)\n(email.message.Message method)\n(wsgiref.headers.Headers method)\nget_all_breaks() (bdb.Bdb method)\nget_all_start_methods() (in module multiprocessing)\nGET_ANEXT (opcode)\nget_annotations() (in module inspect)\nget"}
{"url": "https://docs.python.org/3/genindex-E.html", "title": "", "text": "|\n- EnumCheck (class in enum)\n- EnumDict (class in enum)\n-\nenumerate()\n- enumerate() (in module threading)\n- EnumKey() (in module winreg)\n- EnumType (class in enum)\n- EnumValue() (in module winreg)\n-\nENV_DIR\n- EnvBuilder (class in venv)\n- environ (in module os)\n- environb (in module os)\n- environment\n-\nenvironment variable\n- __PYVENV_LAUNCHER__, [1]\n- APPDATA\n- BASECFLAGS\n- BASECPPFLAGS\n- BLDSHARED\n- BROWSER, [1], [2]\n- CC, [1]\n- CCSHARED\n- CFLAGS, [1], [2], [3], [4], [5], [6], [7]\n- CFLAGS_ALIASING\n- CFLAGS_NODIST, [1], [2], [3]\n- CFLAGSFORSHARED\n- COLUMNS, [1]\n- COMPILEALL_OPTS\n- COMSPEC, [1]\n- CONFIGURE_CFLAGS\n- CONFIGURE_CFLAGS_NODIST\n- CONFIGURE_CPPFLAGS\n- CONFIGURE_LDFLAGS\n- CONFIGURE_LDFLAGS_NODIST\n- CPPFLAGS, [1], [2], [3], [4]\n- CXX\n- DISPLAY\n- EnableControlFlowGuard\n- EXTRA_CFLAGS\n- HOME, [1], [2], [3], [4], [5], [6]\n- HOMEDRIVE\n- HOMEPATH\n- IDLESTARTUP, [1], [2], [3], [4]\n- LANG, [1], [2], [3], [4]\n- LANGUAGE, [1]\n- LC_ALL, [1]\n- LC_MESSAGES, [1]\n- LDFLAGS, [1], [2], [3], [4], [5], [6], [7], [8]\n- LDFLAGS_NODIST, [1], [2]\n- LDSHARED\n- LIBS\n- LINES, [1], [2]\n- LINKCC\n- LOGNAME, [1]\n- MANPAGER, [1]\n- no_proxy\n- OPT, [1]\n- PAGER\n- PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49]\n- PATHEXT, [1], [2], [3], [4]\n- PIP_USER\n- PROFILE_TASK, [1], [2]\n- PURIFY\n- PY_BUILTIN_MODULE_CFLAGS\n- PY_CFLAGS\n- PY_CFLAGS_NODIST\n- PY_CORE_CFLAGS\n- PY_CORE_LDFLAGS\n- PY_CPPFLAGS\n- PY_LDFLAGS\n- PY_LDFLAGS_NODIST\n- PY_STDMODULE_CFLAGS\n- PYLAUNCHER_ALLOW_INSTALL, [1]\n- PYTHON_BASIC_REPL, [1], [2], [3], [4], [5]\n- PYTHON_COLORS, [1], [2], [3], [4]\n- PYTHON_CPU_COUNT, [1], [2], [3], [4], [5], [6]\n- PYTHON_DOM\n- PYTHON_FROZEN_MODULES, [1], [2], [3]\n- PYTHON_GIL, [1], [2], [3], [4], [5], [6]\n- PYTHON_HISTORY, [1], [2]\n- PYTHON_JIT, [1], [2], [3]\n- PY"}
{"url": "https://docs.python.org/3/genindex-M.html", "title": "", "text": "|\n- message_from_file() (in module email)\n- message_from_string() (in module email)\n- MessageBeep() (in module winsound)\n- MessageClass (http.server.BaseHTTPRequestHandler attribute)\n- MessageDefect\n- MessageError\n- MessageParseError\n- messages (in module xml.parsers.expat.errors)\n-\nmeta\n- meta hooks\n- meta path finder\n- meta() (in module curses)\n- meta_path (in module sys)\n- metaclass, [1]\n- metaclass hint\n- metadata() (in module importlib.metadata)\n- MetaPathFinder (class in importlib.abc)\n- metavar (optparse.Option attribute)\n- MetavarTypeHelpFormatter (class in argparse)\n- METH_CLASS (C macro)\n- METH_COEXIST (C macro)\n- METH_FASTCALL (C macro)\n- METH_KEYWORDS (C macro)\n- METH_METHOD (C macro)\n- METH_NOARGS (C macro)\n- METH_O (C macro)\n- METH_STATIC (C macro)\n- METH_VARARGS (C macro)\n- method\n- method (urllib.request.Request attribute)\n- method resolution order\n- method_calls (unittest.mock.Mock attribute)\n- methodcaller() (in module operator)\n- MethodDescriptorType (in module types)\n- methodHelp() (xmlrpc.client.ServerProxy.system method)\n-\nmethods\n- methods (pyclbr.Class attribute)\n- methodSignature() (xmlrpc.client.ServerProxy.system method)\n- MethodType (in module types), [1], [2]\n- MethodWrapperType (in module types)\n- metrics() (tkinter.font.Font method)\n- MFD_ALLOW_SEALING (in module os)\n- MFD_CLOEXEC (in module os)\n- MFD_HUGE_16GB (in module os)\n- MFD_HUGE_16MB (in module os)\n- MFD_HUGE_1GB (in module os)\n- MFD_HUGE_1MB (in module os)\n- MFD_HUGE_256MB (in module os)\n- MFD_HUGE_2GB (in module os)\n- MFD_HUGE_2MB (in module os)\n- MFD_HUGE_32MB (in module os)\n- MFD_HUGE_512KB (in module os)\n- MFD_HUGE_512MB (in module os)\n- MFD_HUGE_64KB (in module os)\n- MFD_HUGE_8MB (in module os)\n- MFD_HUGE_MASK (in module os)\n- MFD_HUGE_SHIFT (in module os)\n- MFD_HUGETLB (in module os)\n- MH (class in mailbox)\n- MHMessage (class in mailbox)\n- microsecond (datetime.datetime attribute)\n- microseconds (datetime.timedelta attribute)\n-\nMIME\n- MIMEApplication (class in email.mime"}
{"url": "https://docs.python.org/3/genindex-Q.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – Q\nqiflush() (in module curses)\nQName (class in xml.etree.ElementTree)\nqsize() (asyncio.Queue method)\n(multiprocessing.Queue method)\n(queue.Queue method)\n(queue.SimpleQueue method)\nqualified name\nquantiles() (in module statistics)\n(statistics.NormalDist method)\nquantize() (decimal.Context method)\n(decimal.Decimal method)\nQueryInfoKey() (in module winreg)\nQueryReflectionKey() (in module winreg)\nQueryValue() (in module winreg)\nQueryValueEx() (in module winreg)\nQUESTION (in module tkinter.messagebox)\nqueue\nmodule\nQueue (class in asyncio)\n(class in multiprocessing)\n(class in queue)\nqueue (sched.scheduler attribute)\nQueue() (multiprocessing.managers.SyncManager method)\nQueueEmpty\nQueueFull\nQueueHandler (class in logging.handlers)\nQueueListener (class in logging.handlers)\nQueueShutDown\nquick_ratio() (difflib.SequenceMatcher method)\nquiet (sys.flags attribute)\nquit (built-in variable)\n(pdb command)\nquit() (ftplib.FTP method)\n(poplib.POP3 method)\n(smtplib.SMTP method)\n(tkinter.filedialog.FileDialog method)\nquitting (bdb.Bdb attribute)\nquopri\nmodule\nquote() (in module email.utils)\n(in module shlex)\n(in module urllib.parse)\nQUOTE_ALL (in module csv)\nquote_from_bytes() (in module urllib.parse)\nQUOTE_MINIMAL (in module csv)\nQUOTE_NONE (in module csv)\nQUOTE_NONNUMERIC (in module csv)\nQUOTE_NOTNULL (in module csv)\nquote_plus() (in module urllib.parse)\nQUOTE_STRINGS (in module csv)\nquoteattr() (in module xml.sax.saxutils)\nquotechar (csv.Dialect attribute)\nquoted-printable\nencoding\nquotes (shlex.shlex attribute)\nquoting (csv.Dialect attribute)\nÂ«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|"}
{"url": "https://docs.python.org/3/genindex-V.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – V\nv4_int_to_packed() (in module ipaddress)\nv6_int_to_packed() (in module ipaddress)\nvalid_signals() (in module signal)\nvalidator() (in module wsgiref.validate)\nvalue\ndefault parameter\ntruth\nvalue (ctypes._SimpleCData attribute)\n(enum.Enum attribute)\n(http.cookiejar.Cookie attribute)\n(http.cookies.Morsel attribute)\n(StopIteration attribute)\n(xml.dom.Attr attribute)\nvalue of an object\nValue() (in module multiprocessing)\n(in module multiprocessing.sharedctypes)\n(multiprocessing.managers.SyncManager method)\nvalue_decode() (http.cookies.BaseCookie method)\nvalue_encode() (http.cookies.BaseCookie method)\nValueError\nexception\nvaluerefs() (weakref.WeakValueDictionary method)\nvalues\nBoolean\nwriting\nValues (class in optparse)\nvalues() (contextvars.Context method)\n(dict method)\n(email.message.EmailMessage method)\n(email.message.Message method)\n(mailbox.Mailbox method)\n(types.MappingProxyType method)\nValuesView (class in collections.abc)\n(class in typing)\nvar (contextvars.Token attribute)\nvariable\nfree\nvariable annotation\nvariance (statistics.NormalDist attribute)\nvariance() (in module statistics)\nvariant (uuid.UUID attribute)\nvars()\nbuilt-in function\nVBAR (in module token)\nvbar (tkinter.scrolledtext.ScrolledText attribute)\nVBAREQUAL (in module token)\nVC_ASSEMBLY_PUBLICKEYTOKEN (in module msvcrt)\nVec2D (class in turtle)\nvectorcallfunc (C type)\nvenv\nmodule\nvenv command line option\n--clear\n--copies\n--prompt\n--symlinks\n--system-site-packages\n--upgrade\n--upgrade-deps\n--without-pip\n--without-scm-ignore-files\nENV_DIR\nVERBOSE (in module re)\nverbose (in module tabnanny)\n(in module test.support)\n(sys.flags attribute)\nverify() (in module enum)\n(smtplib.SMTP method)\nVERIFY_ALLOW_PROXY_CERTS (in module ssl)\nverify_client_post_handshake() (ssl.SSLSocket method)\nverify_code (ssl.SSLCertVerificationError attribute)\nVERIFY_CRL_CHECK_CHAIN (in module ssl)\nVERIFY_CRL_CHECK_LEAF"}
{"url": "https://docs.python.org/3/genindex-F.html", "title": "", "text": "-\nf\"\n-\nf'\n- f-string, [1], [2]\n- f-strings\n- f_back (frame attribute), [1]\n- f_builtins (frame attribute), [1]\n- f_code (frame attribute), [1]\n- F_CONTIGUOUS (inspect.BufferFlags attribute)\n- f_contiguous (memoryview attribute)\n- f_globals (frame attribute), [1]\n- f_lasti (frame attribute), [1]\n- f_lineno (frame attribute), [1]\n- f_locals (frame attribute), [1]\n- F_LOCK (in module os)\n- F_OK (in module os)\n- F_TEST (in module os)\n- F_TLOCK (in module os)\n- f_trace (frame attribute), [1]\n- f_trace_lines (frame attribute), [1]\n- f_trace_opcodes (frame attribute), [1]\n- F_ULOCK (in module os)\n- fabs() (in module math)\n- factorial() (in module math)\n- factory() (importlib.util.LazyLoader class method)\n- fail() (unittest.TestCase method)\n- FAIL_FAST (in module doctest)\n- failed (doctest.TestResults attribute)\n- failfast (unittest.TestResult attribute)\n- failureException (unittest.TestCase attribute)\n- failures (doctest.DocTestRunner attribute)\n- FakePath (class in test.support.os_helper)\n- False, [1], [2]\n- false\n- False (Built-in object)\n- families() (in module tkinter.font)\n- family (socket.socket attribute)\n- FancyURLopener (class in urllib.request)\n- fast (pickle.Pickler attribute)\n- FastChildWatcher (class in asyncio)\n- fatalError() (xml.sax.handler.ErrorHandler method)\n- Fault (class in xmlrpc.client)\n- faultCode (xmlrpc.client.Fault attribute)\n-\nfaulthandler\n- faultString (xmlrpc.client.Fault attribute)\n- fchdir() (in module os)\n- fchmod() (in module os)\n- fchown() (in module os)\n-\nfcntl\n- fcntl() (in module fcntl)\n- fd (selectors.SelectorKey attribute)\n- fd() (in module turtle)\n- fd_count() (in module test.support.os_helper)\n- fdatasync() (in module os)\n- fdopen() (in module os)\n- feature_external_ges (in module xml.sax.handler)\n- feature_external_pes (in module xml.sax.handler)\n- feature_namespace_prefixes (in module xml.sax.handler)\n- feature_namespaces (in module xml.sax.handler)\n- feature_string_interning (in module xml.sax.handler)\n- feature_validation (in m"}
{"url": "https://docs.python.org/3/genindex-L.html", "title": "", "text": "- L (in module re)\n- lambda\n- Lambda (class in ast)\n- LambdaType (in module types)\n- LANG, [1], [2], [3], [4]\n- LANGUAGE, [1]\n-\nlanguage\n- large files\n- LARGEST (in module test.support)\n- LargeZipFile\n- last_accepted (multiprocessing.connection.Listener attribute)\n- last_exc (in module sys)\n- last_traceback (in module sys), [1]\n- last_type (in module sys)\n- last_value (in module sys)\n- lastChild (xml.dom.Node attribute)\n- lastcmd (cmd.Cmd attribute)\n- lastgroup (re.Match attribute)\n- lastindex (re.Match attribute)\n- lastResort (in module logging)\n- lastrowid (sqlite3.Cursor attribute)\n- layout() (tkinter.ttk.Style method)\n- lazycache() (in module linecache)\n- LazyLoader (class in importlib.util)\n- LBRACE (in module token)\n- LBYL\n- LC_ALL, [1]\n- LC_COLLATE (in module locale)\n- LC_CTYPE (in module locale)\n- LC_MESSAGES, [1]\n- LC_MONETARY (in module locale)\n- LC_NUMERIC (in module locale)\n- LC_TIME (in module locale)\n- lchflags() (in module os)\n- lchmod() (in module os)\n- lchown() (in module os)\n- lcm() (in module math)\n- ldexp() (in module math)\n- LDFLAGS, [1], [2], [3], [4], [5], [6], [7]\n- LDFLAGS_NODIST, [1]\n- le() (in module operator)\n- leading whitespace\n- leapdays() (in module calendar)\n- leaveok() (curses.window method)\n- left (filecmp.dircmp attribute)\n- left() (in module turtle)\n- left_list (filecmp.dircmp attribute)\n- left_only (filecmp.dircmp attribute)\n- LEFTSHIFT (in module token)\n- LEFTSHIFTEQUAL (in module token)\n- LEGACY_TRANSACTION_CONTROL (in module sqlite3)\n-\nlen\n- built-in function, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]\n-\nlen()\n- lenfunc (C type)\n- length (xml.dom.NamedNodeMap attribute)\n- length_hint() (in module operator)\n- LESS (in module token)\n- LESSEQUAL (in module token)\n- level (logging.Logger attribute)\n- lexical analysis\n- lexical analyzer\n- lexical definitions\n- LexicalHandler (class in xml.sax.handler)\n- lexists() (in module os.path)\n- LF (in module curses.ascii)\n- lgamma() (in module math)\n-\nLIBB2_CFLAGS\n-\nLIBB2_LIBS\n"}
{"url": "https://docs.python.org/3/genindex-P.html", "title": "", "text": "- p (pdb command)\n- P_ALL (in module os)\n- P_DETACH (in module os)\n- P_NOWAIT (in module os)\n- P_NOWAITO (in module os)\n- P_OVERLAY (in module os)\n- P_PGID (in module os)\n- P_PID (in module os)\n- P_PIDFD (in module os)\n- P_WAIT (in module os)\n- pack() (in module struct)\n- pack_into() (in module struct)\n- package, [1], [2]\n-\npackage variable\n- PackageMetadata (class in importlib.metadata)\n- PackageNotFoundError\n- PackagePath (class in importlib.metadata)\n- packages_distributions() (in module importlib.metadata)\n- packed (ipaddress.IPv4Address attribute)\n-\npacking\n- packing (widgets)\n- PAGER\n- pair_content() (in module curses)\n- pair_number() (in module curses)\n- pairwise() (in module itertools)\n-\nPANEL_CFLAGS\n-\nPANEL_LIBS\n- parameter\n- Parameter (class in inspect)\n- ParameterizedMIMEHeader (class in email.headerregistry)\n- parameters (inspect.Signature attribute)\n- params (email.headerregistry.ParameterizedMIMEHeader attribute)\n- ParamSpec (class in ast)\n- ParamSpecArgs (in module typing)\n- ParamSpecKwargs (in module typing)\n- paramstyle (in module sqlite3)\n- pardir (in module os)\n- parent (importlib.machinery.ModuleSpec attribute)\n- parent() (tkinter.ttk.Treeview method)\n- parent_process() (in module multiprocessing)\n- parenthesized form\n- parentNode (xml.dom.Node attribute)\n- parents (collections.ChainMap attribute)\n- paretovariate() (in module random)\n- parse() (doctest.DocTestParser method)\n- Parse() (xml.parsers.expat.xmlparser method)\n- parse() (xml.sax.xmlreader.XMLReader method)\n- parse_and_bind() (in module readline)\n- parse_args() (argparse.ArgumentParser method)\n- PARSE_COLNAMES (in module sqlite3)\n- parse_config_h() (in module sysconfig)\n- PARSE_DECLTYPES (in module sqlite3)\n- parse_headers() (in module http.client)\n- parse_intermixed_args() (argparse.ArgumentParser method)\n- parse_known_args() (argparse.ArgumentParser method)\n- parse_known_intermixed_args() (argparse.ArgumentParser method)\n- parse_qs() (in module urllib.parse)\n- parse_qsl() (in module ur"}
{"url": "https://docs.python.org/3/genindex-D.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – D\nD_FMT (in module locale)\nD_T_FMT (in module locale)\ndaemon (multiprocessing.Process attribute)\n(threading.Thread attribute)\ndaemon_threads (socketserver.ThreadingMixIn attribute)\ndangling\nelse\ndata\npacking binary\ntabular\ntype\ntype, immutable\ndata (collections.UserDict attribute)\n(collections.UserList attribute)\n(collections.UserString attribute)\n(plistlib.UID attribute)\n(select.kevent attribute)\n(selectors.SelectorKey attribute)\n(urllib.request.Request attribute)\n(xml.dom.Comment attribute)\n(xml.dom.ProcessingInstruction attribute)\n(xml.dom.Text attribute)\n(xmlrpc.client.Binary attribute)\ndata() (xml.etree.ElementTree.TreeBuilder method)\ndata_filter() (in module tarfile)\ndata_open() (urllib.request.DataHandler method)\ndata_received() (asyncio.Protocol method)\ndatabase\nUnicode\nDatabaseError\ndatabases\ndataclass() (in module dataclasses)\ndataclass_transform() (in module typing)\ndataclasses\nmodule\nDataError\ndatagram_received() (asyncio.DatagramProtocol method)\nDatagramHandler (class in logging.handlers)\nDatagramProtocol (class in asyncio)\nDatagramRequestHandler (class in socketserver)\nDatagramTransport (class in asyncio)\nDataHandler (class in urllib.request)\ndate (class in datetime)\ndate() (datetime.datetime method)\ndate_time (zipfile.ZipInfo attribute)\ndate_time_string() (http.server.BaseHTTPRequestHandler method)\nDateHeader (class in email.headerregistry)\ndatetime\nmodule\ndatetime (class in datetime)\nDateTime (class in xmlrpc.client)\ndatetime (email.headerregistry.DateHeader attribute)\nDay (class in calendar)\nday (datetime.date attribute)\n(datetime.datetime attribute)\nDAY_1 (in module locale)\nDAY_2 (in module locale)\nDAY_3 (in module locale)\nDAY_4 (in module locale)\nDAY_5 (in module locale)\nDAY_6 (in module locale)\nDAY_7 (in module locale)\nday_abbr (in module calendar)\nday_name (in module calendar)\ndaylight (in module time)\nDaylight Saving Time\nday"}
{"url": "https://docs.python.org/3/genindex-R.html", "title": "", "text": "|\n- report_unexpected_exception() (doctest.DocTestRunner method)\n- REPORTING_FLAGS (in module doctest)\n-\nrepr\n- Repr (class in reprlib)\n-\nrepr()\n-\nrepr() (built-in function)\n- repr() (in module reprlib)\n- repr1() (reprlib.Repr method)\n- ReprEnum (class in enum)\n-\nrepresentation\n- reprfunc (C type)\n-\nreprlib\n- Request (class in urllib.request)\n- request (socketserver.BaseRequestHandler attribute)\n- request() (http.client.HTTPConnection method)\n- request_queue_size (socketserver.BaseServer attribute)\n- request_rate() (urllib.robotparser.RobotFileParser method)\n- request_uri() (in module wsgiref.util)\n- request_version (http.server.BaseHTTPRequestHandler attribute)\n- RequestHandlerClass (socketserver.BaseServer attribute)\n- requestline (http.server.BaseHTTPRequestHandler attribute)\n- Required (in module typing)\n- requires() (in module importlib.metadata)\n- requires_bz2() (in module test.support)\n- requires_docstrings() (in module test.support)\n- requires_freebsd_version() (in module test.support)\n- requires_gil_enabled() (in module test.support)\n- requires_gzip() (in module test.support)\n- requires_IEEE_754() (in module test.support)\n- requires_limited_api() (in module test.support)\n- requires_linux_version() (in module test.support)\n- requires_lzma() (in module test.support)\n- requires_mac_version() (in module test.support)\n- requires_resource() (in module test.support)\n- requires_zlib() (in module test.support)\n- RERAISE (monitoring event)\n- reschedule() (asyncio.Timeout method)\n- reserved (zipfile.ZipInfo attribute)\n- reserved word\n- RESERVED_FUTURE (in module uuid)\n- RESERVED_MICROSOFT (in module uuid)\n- RESERVED_NCS (in module uuid)\n- reset() (asyncio.Barrier method)\n- reset_mock() (unittest.mock.AsyncMock method)\n- reset_peak() (in module tracemalloc)\n- reset_prog_mode() (in module curses)\n- reset_shell_mode() (in module curses)\n- reset_tzpath() (in module zoneinfo)\n- resetbuffer() (code.InteractiveConsole method)\n- resetscreen() (in module turtle)\n- resetty() (i"}
{"url": "https://docs.python.org/3/genindex-Y.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – Y\nycor() (in module turtle)\nyear\ncalendar command line option\nyear (datetime.date attribute)\n(datetime.datetime attribute)\nYear 2038\nyeardatescalendar() (calendar.Calendar method)\nyeardays2calendar() (calendar.Calendar method)\nyeardayscalendar() (calendar.Calendar method)\nYES (in module tkinter.messagebox)\nYESEXPR (in module locale)\nYESNO (in module tkinter.messagebox)\nYESNOCANCEL (in module tkinter.messagebox)\nyield\nexamples\nexpression\nkeyword\nstatement\nyield from (in What's New)\nYield (class in ast)\nYIELD_VALUE (opcode)\nYieldFrom (class in ast)\nyiq_to_rgb() (in module colorsys)\nyview() (tkinter.ttk.Treeview method)\nÂ«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|"}
{"url": "https://docs.python.org/3/genindex-W.html", "title": "", "text": "Theme\nAuto\nLight\nDark\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.7 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – W\nW_OK (in module os)\nwait() (asyncio.Barrier method)\n(asyncio.Condition method)\n(asyncio.Event method)\n(asyncio.subprocess.Process method)\n(in module asyncio)\n(in module concurrent.futures)\n(in module multiprocessing.connection)\n(in module os)\n(multiprocessing.pool.AsyncResult method)\n(subprocess.Popen method)\n(threading.Barrier method)\n(threading.Condition method)\n(threading.Event method)\nwait3() (in module os)\nwait4() (in module os)\nwait_closed() (asyncio.Server method)\n(asyncio.StreamWriter method)\nwait_for() (asyncio.Condition method)\n(in module asyncio)\n(threading.Condition method)\nwait_process() (in module test.support)\nwait_threads_exit() (in module test.support.threading_helper)\nwait_until_any_call_with() (unittest.mock.ThreadingMock method)\nwait_until_called() (unittest.mock.ThreadingMock method)\nwaitid() (in module os)\nwaitpid() (in module os)\nwaitstatus_to_exitcode() (in module os)\nwalk() (email.message.EmailMessage method)\n(email.message.Message method)\n(in module ast)\n(in module os)\n(pathlib.Path method)\nwalk_packages() (in module pkgutil)\nwalk_stack() (in module traceback)\nwalk_tb() (in module traceback)\nwalrus operator\n,\n[1]\nwant (doctest.Example attribute)\nwarn() (in module warnings)\nwarn_default_encoding (sys.flags attribute)\nwarn_explicit() (in module warnings)\nWarning\n,\n[1]\nWARNING (in module logging)\n(in module tkinter.messagebox)\nwarning() (in module logging)\n(logging.Logger method)\n(xml.sax.handler.ErrorHandler method)\nwarnings\nmodule\nWarningsRecorder (class in test.support.warnings_helper)\nwarnoptions (in module sys)\nwasSuccessful() (unittest.TestResult method)\nWatchedFileHandler (class in logging.handlers)\nwave\nmodule\nWave_read (class in wave)\nWave_write (class in wave)\nWCONTINUED (in module os)\nWCOREDUMP() (in module os)\nWeakKeyDictionary (class in weakref)\nWeakMethod (class in weakref)\nweakref\nmodule\nWeakSet (class in we"}
{"url": "https://docs.python.org/3/howto/mro.html", "title": "", "text": "The Python 2.3 Method Resolution OrderÂ¶\nNote\nThis is a historical document, provided as an appendix to the official documentation. The Method Resolution Order discussed here was introduced in Python 2.3, but it is still used in later versions â including Python 3.\n- Abstract:\nThis document is intended for Python programmers who want to understand the C3 Method Resolution Order used in Python 2.3. Although it is not intended for newbies, it is quite pedagogical with many worked out examples. I am not aware of other publicly available documents with the same scope, therefore it should be useful.\nDisclaimer:\nI donate this document to the Python Software Foundation, under the Python 2.3 license. As usual in these circumstances, I warn the reader that what follows should be correct, but I donât give any warranty. Use it at your own risk and peril!\nAcknowledgments:\nAll the people of the Python mailing list who sent me their support. Paul Foley who pointed out various imprecisions and made me to add the part on local precedence ordering. David Goodger for help with the formatting in reStructuredText. David Mertz for help with the editing. Finally, Guido van Rossum who enthusiastically added this document to the official Python 2.3 home-page.\nThe beginningÂ¶\nFelix qui potuit rerum cognoscere causas â Virgilius\nEverything started with a post by Samuele Pedroni to the Python development mailing list [1]. In his post, Samuele showed that the Python 2.2 method resolution order is not monotonic and he proposed to replace it with the C3 method resolution order. Guido agreed with his arguments and therefore now Python 2.3 uses C3. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers [2]. The present paper gives a (hopefully) readable discussion of the C3 algorithm for Pythonistas who want to understand the reasons for the change.\nFirst of all, let me point out that what I am going "}
{"url": "https://docs.python.org/3/whatsnew/3.8.html", "title": "", "text": "Whatâs New In Python 3.8Â¶\n- Editor:\nRaymond Hettinger\nThis article explains the new features in Python 3.8, compared to 3.7. Python 3.8 was released on October 14, 2019. For full details, see the changelog.\nSummary â Release highlightsÂ¶\nNew FeaturesÂ¶\nAssignment expressionsÂ¶\nThere is new syntax :=\nthat assigns values to variables as part of a larger\nexpression. It is affectionately known as âthe walrus operatorâ due to\nits resemblance to the eyes and tusks of a walrus.\nIn this example, the assignment expression helps avoid calling\nlen()\ntwice:\nif (n := len(a)) > 10:\nprint(f\"List is too long ({n} elements, expected <= 10)\")\nA similar benefit arises during regular expression matching where match objects are needed twice, once to test whether a match occurred and another to extract a subgroup:\ndiscount = 0.0\nif (mo := re.search(r'(\\d+)% discount', advertisement)):\ndiscount = float(mo.group(1)) / 100.0\nThe operator is also useful with while-loops that compute a value to test loop termination and then need that same value again in the body of the loop:\n# Loop over fixed length blocks\nwhile (block := f.read(256)) != '':\nprocess(block)\nAnother motivating use case arises in list comprehensions where a value computed in a filtering condition is also needed in the expression body:\n[clean_name.title() for name in names\nif (clean_name := normalize('NFC', name)) in allowed_names]\nTry to limit use of the walrus operator to clean cases that reduce complexity and improve readability.\nSee PEP 572 for a full description.\n(Contributed by Emily Morehouse in bpo-35224.)\nPositional-only parametersÂ¶\nThere is a new function parameter syntax /\nto indicate that some\nfunction parameters must be specified positionally and cannot be used as\nkeyword arguments. This is the same notation shown by help()\nfor C\nfunctions annotated with Larry Hastingsâ\nArgument Clinic tool.\nIn the following example, parameters a and b are positional-only, while c or d can be positional or keyword, and e or f are "}
{"url": "https://docs.python.org", "title": "", "text": "Python 3.13.7 documentation\nWelcome! This is the official documentation for Python 3.13.7.\nDocumentation sections:\n|\nWhat's new in Python 3.13?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3/c-api/frame.html", "title": "", "text": "Frame ObjectsÂ¶\n-\ntype PyFrameObjectÂ¶\n- Part of the Limited API (as an opaque struct).\nThe C structure of the objects used to describe frame objects.\nThere are no public members in this structure.\nChanged in version 3.11: The members of this structure were removed from the public C API. Refer to the Whatâs New entry for details.\nThe PyEval_GetFrame()\nand PyThreadState_GetFrame()\nfunctions\ncan be used to get a frame object.\nSee also Reflection.\n-\nPyTypeObject PyFrame_TypeÂ¶\nThe type of frame objects. It is the same object as\ntypes.FrameType\nin the Python layer.Changed in version 3.11: Previously, this type was only available after including\n<frameobject.h>\n.\n-\nint PyFrame_Check(PyObject *obj)Â¶\nReturn non-zero if obj is a frame object.\nChanged in version 3.11: Previously, this function was only available after including\n<frameobject.h>\n.\n-\nPyFrameObject *PyFrame_GetBack(PyFrameObject *frame)Â¶\n- Return value: New reference.\nGet the frame next outer frame.\nReturn a strong reference, or\nNULL\nif frame has no outer frame.Added in version 3.9.\n-\nPyObject *PyFrame_GetBuiltins(PyFrameObject *frame)Â¶\n- Return value: New reference.\nGet the frameâs\nf_builtins\nattribute.Return a strong reference. The result cannot be\nNULL\n.Added in version 3.11.\n-\nPyCodeObject *PyFrame_GetCode(PyFrameObject *frame)Â¶\n- Return value: New reference. Part of the Stable ABI since version 3.10.\nGet the frame code.\nReturn a strong reference.\nThe result (frame code) cannot be\nNULL\n.Added in version 3.9.\n-\nPyObject *PyFrame_GetGenerator(PyFrameObject *frame)Â¶\n- Return value: New reference.\nGet the generator, coroutine, or async generator that owns this frame, or\nNULL\nif this frame is not owned by a generator. Does not raise an exception, even if the return value isNULL\n.Return a strong reference, or\nNULL\n.Added in version 3.11.\n-\nPyObject *PyFrame_GetGlobals(PyFrameObject *frame)Â¶\n- Return value: New reference.\nGet the frameâs\nf_globals\nattribute.Return a strong reference. The result cannot be\nNULL"}
{"url": "https://docs.python.org/3/library/imp.html", "title": "", "text": "imp\nâ Access the import internalsÂ¶\nDeprecated since version 3.4, removed in version 3.12.\nThis module is no longer part of the Python standard library. It was removed in Python 3.12 after being deprecated in Python 3.4.\nThe removal notice includes guidance for\nmigrating code from imp\nto importlib\n.\nThe last version of Python that provided the imp\nmodule was\nPython 3.11."}
{"url": "https://docs.python.org/3/library/email.parser.html", "title": "", "text": "email.parser\n: Parsing email messagesÂ¶\nSource code: Lib/email/parser.py\nMessage object structures can be created in one of two ways: they can be\ncreated from whole cloth by creating an EmailMessage\nobject, adding headers using the dictionary interface, and adding payload(s)\nusing set_content()\nand related methods, or\nthey can be created by parsing a serialized representation of the email\nmessage.\nThe email\npackage provides a standard parser that understands most email\ndocument structures, including MIME documents. You can pass the parser a\nbytes, string or file object, and the parser will return to you the root\nEmailMessage\ninstance of the object structure. For\nsimple, non-MIME messages the payload of this root object will likely be a\nstring containing the text of the message. For MIME messages, the root object\nwill return True\nfrom its is_multipart()\nmethod, and the subparts can be accessed via the payload manipulation methods,\nsuch as get_body()\n,\niter_parts()\n, and\nwalk()\n.\nThere are actually two parser interfaces available for use, the Parser\nAPI and the incremental FeedParser\nAPI. The Parser\nAPI is\nmost useful if you have the entire text of the message in memory, or if the\nentire message lives in a file on the file system. FeedParser\nis more\nappropriate when you are reading the message from a stream which might block\nwaiting for more input (such as reading an email message from a socket). The\nFeedParser\ncan consume and parse the message incrementally, and only\nreturns the root object when you close the parser.\nNote that the parser can be extended in limited ways, and of course you can\nimplement your own parser completely from scratch. All of the logic that\nconnects the email\npackageâs bundled parser and the\nEmailMessage\nclass is embodied in the Policy\nclass, so a custom parser can create message object trees any way it finds\nnecessary by implementing custom versions of the appropriate Policy\nmethods.\nFeedParser APIÂ¶\nThe BytesFeedParser\n, imported from the ema"}
{"url": "https://docs.python.org/3/library/asyncio-exceptions.html", "title": "", "text": "ExceptionsÂ¶\nSource code: Lib/asyncio/exceptions.py\n- exception asyncio.TimeoutErrorÂ¶\nA deprecated alias of\nTimeoutError\n, raised when the operation has exceeded the given deadline.Changed in version 3.11: This class was made an alias of\nTimeoutError\n.\n- exception asyncio.CancelledErrorÂ¶\nThe operation has been cancelled.\nThis exception can be caught to perform custom operations when asyncio Tasks are cancelled. In almost all situations the exception must be re-raised.\nChanged in version 3.8:\nCancelledError\nis now a subclass ofBaseException\nrather thanException\n.\n- exception asyncio.InvalidStateErrorÂ¶\nInvalid internal state of\nTask\norFuture\n.Can be raised in situations like setting a result value for a Future object that already has a result value set.\n- exception asyncio.SendfileNotAvailableErrorÂ¶\nThe âsendfileâ syscall is not available for the given socket or file type.\nA subclass of\nRuntimeError\n.\n- exception asyncio.IncompleteReadErrorÂ¶\nThe requested read operation did not complete fully.\nRaised by the asyncio stream APIs.\nThis exception is a subclass of\nEOFError\n.\n- exception asyncio.LimitOverrunErrorÂ¶\nReached the buffer size limit while looking for a separator.\nRaised by the asyncio stream APIs.\n- consumedÂ¶\nThe total number of to be consumed bytes."}
{"url": "https://docs.python.org/3/c-api/file.html", "title": "", "text": "File ObjectsÂ¶\nThese APIs are a minimal emulation of the Python 2 C API for built-in file\nobjects, which used to rely on the buffered I/O (FILE*) support\nfrom the C standard library. In Python 3, files and streams use the new\nio\nmodule, which defines several layers over the low-level unbuffered\nI/O of the operating system. The functions described below are\nconvenience C wrappers over these new APIs, and meant mostly for internal\nerror reporting in the interpreter; third-party code is advised to access\nthe io\nAPIs instead.\n-\nPyObject *PyFile_FromFd(int fd, const char *name, const char *mode, int buffering, const char *encoding, const char *errors, const char *newline, int closefd)Â¶\n- Return value: New reference. Part of the Stable ABI.\nCreate a Python file object from the file descriptor of an already opened file fd. The arguments name, encoding, errors and newline can be\nNULL\nto use the defaults; buffering can be -1 to use the default. name is ignored and kept for backward compatibility. ReturnNULL\non failure. For a more comprehensive description of the arguments, please refer to theio.open()\nfunction documentation.Warning\nSince Python streams have their own buffering layer, mixing them with OS-level file descriptors can produce various issues (such as unexpected ordering of data).\nChanged in version 3.2: Ignore name attribute.\n-\nint PyObject_AsFileDescriptor(PyObject *p)Â¶\n- Part of the Stable ABI.\nReturn the file descriptor associated with p as an int. If the object is an integer, its value is returned. If not, the objectâs\nfileno()\nmethod is called if it exists; the method must return an integer, which is returned as the file descriptor value. Sets an exception and returns-1\non failure.\n-\nPyObject *PyFile_GetLine(PyObject *p, int n)Â¶\n- Return value: New reference. Part of the Stable ABI.\nEquivalent to\np.readline([n])\n, this function reads one line from the object p. p may be a file object or any object with areadline()\nmethod. If n is0\n, exactly one line is rea"}
{"url": "https://docs.python.org/3/c-api/import.html", "title": "", "text": "Importing ModulesÂ¶\n-\nPyObject *PyImport_ImportModule(const char *name)Â¶\n- Return value: New reference. Part of the Stable ABI.\nThis is a wrapper around\nPyImport_Import()\nwhich takes a const char* as an argument instead of a PyObject*.\n-\nPyObject *PyImport_ImportModuleNoBlock(const char *name)Â¶\n- Return value: New reference. Part of the Stable ABI.\nThis function is a deprecated alias of\nPyImport_ImportModule()\n.Changed in version 3.3: This function used to fail immediately when the import lock was held by another thread. In Python 3.3 though, the locking scheme switched to per-module locks for most purposes, so this functionâs special behaviour isnât needed anymore.\nDeprecated since version 3.13, will be removed in version 3.15: Use\nPyImport_ImportModule()\ninstead.\n-\nPyObject *PyImport_ImportModuleEx(const char *name, PyObject *globals, PyObject *locals, PyObject *fromlist)Â¶\n- Return value: New reference.\nImport a module. This is best described by referring to the built-in Python function\n__import__()\n.The return value is a new reference to the imported module or top-level package, or\nNULL\nwith an exception set on failure. Like for__import__()\n, the return value when a submodule of a package was requested is normally the top-level package, unless a non-empty fromlist was given.Failing imports remove incomplete module objects, like with\nPyImport_ImportModule()\n.\n-\nPyObject *PyImport_ImportModuleLevelObject(PyObject *name, PyObject *globals, PyObject *locals, PyObject *fromlist, int level)Â¶\n- Return value: New reference. Part of the Stable ABI since version 3.7.\nImport a module. This is best described by referring to the built-in Python function\n__import__()\n, as the standard__import__()\nfunction calls this function directly.The return value is a new reference to the imported module or top-level package, or\nNULL\nwith an exception set on failure. Like for__import__()\n, the return value when a submodule of a package was requested is normally the top-level package, u"}
{"url": "https://docs.python.org/3/c-api/weakref.html", "title": "", "text": "Weak Reference ObjectsÂ¶\nPython supports weak references as first-class objects. There are two specific object types which directly implement weak references. The first is a simple reference object, and the second acts as a proxy for the original object as much as it can.\n-\nint PyWeakref_Check(PyObject *ob)Â¶\nReturn non-zero if ob is either a reference or proxy object. This function always succeeds.\n-\nint PyWeakref_CheckRef(PyObject *ob)Â¶\nReturn non-zero if ob is a reference object. This function always succeeds.\n-\nint PyWeakref_CheckProxy(PyObject *ob)Â¶\nReturn non-zero if ob is a proxy object. This function always succeeds.\n-\nPyObject *PyWeakref_NewRef(PyObject *ob, PyObject *callback)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a weak reference object for the object ob. This will always return a new reference, but is not guaranteed to create a new object; an existing reference object may be returned. The second parameter, callback, can be a callable object that receives notification when ob is garbage collected; it should accept a single parameter, which will be the weak reference object itself. callback may also be\nNone\norNULL\n. If ob is not a weakly referenceable object, or if callback is not callable,None\n, orNULL\n, this will returnNULL\nand raiseTypeError\n.\n-\nPyObject *PyWeakref_NewProxy(PyObject *ob, PyObject *callback)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a weak reference proxy object for the object ob. This will always return a new reference, but is not guaranteed to create a new object; an existing proxy object may be returned. The second parameter, callback, can be a callable object that receives notification when ob is garbage collected; it should accept a single parameter, which will be the weak reference object itself. callback may also be\nNone\norNULL\n. If ob is not a weakly referenceable object, or if callback is not callable,None\n, orNULL\n, this will returnNULL\nand raiseTypeError\n.\n-\nint PyWeakref_GetRe"}
{"url": "https://docs.python.org/3/library/asyncio-policy.html", "title": "", "text": "PoliciesÂ¶\nAn event loop policy is a global object used to get and set the current event loop, as well as create new event loops. The default policy can be replaced with built-in alternatives to use different event loop implementations, or substituted by a custom policy that can override these behaviors.\nThe policy object gets and sets a separate event loop per context. This is per-thread by default, though custom policies could define context differently.\nCustom event loop policies can control the behavior of\nget_event_loop()\n, set_event_loop()\n, and new_event_loop()\n.\nPolicy objects should implement the APIs defined\nin the AbstractEventLoopPolicy\nabstract base class.\nGetting and Setting the PolicyÂ¶\nThe following functions can be used to get and set the policy for the current process:\n- asyncio.get_event_loop_policy()Â¶\nReturn the current process-wide policy.\n- asyncio.set_event_loop_policy(policy)Â¶\nSet the current process-wide policy to policy.\nIf policy is set to\nNone\n, the default policy is restored.\nPolicy ObjectsÂ¶\nThe abstract event loop policy base class is defined as follows:\n- class asyncio.AbstractEventLoopPolicyÂ¶\nAn abstract base class for asyncio policies.\n- get_event_loop()Â¶\nGet the event loop for the current context.\nReturn an event loop object implementing the\nAbstractEventLoop\ninterface.This method should never return\nNone\n.Changed in version 3.6.\n- set_event_loop(loop)Â¶\nSet the event loop for the current context to loop.\n- new_event_loop()Â¶\nCreate and return a new event loop object.\nThis method should never return\nNone\n.\n- get_child_watcher()Â¶\nGet a child process watcher object.\nReturn a watcher object implementing the\nAbstractChildWatcher\ninterface.This function is Unix specific.\nDeprecated since version 3.12.\n- set_child_watcher(watcher)Â¶\nSet the current child process watcher to watcher.\nThis function is Unix specific.\nDeprecated since version 3.12.\nasyncio ships with the following built-in policies:\n- class asyncio.DefaultEventLoopPolicy"}
{"url": "https://docs.python.org/3/c-api/mapping.html", "title": "", "text": "Mapping ProtocolÂ¶\nSee also PyObject_GetItem()\n, PyObject_SetItem()\nand\nPyObject_DelItem()\n.\n-\nint PyMapping_Check(PyObject *o)Â¶\n- Part of the Stable ABI.\nReturn\n1\nif the object provides the mapping protocol or supports slicing, and0\notherwise. Note that it returns1\nfor Python classes with a__getitem__()\nmethod, since in general it is impossible to determine what type of keys the class supports. This function always succeeds.\n-\nPy_ssize_t PyMapping_Size(PyObject *o)Â¶\n-\nPy_ssize_t PyMapping_Length(PyObject *o)Â¶\n- Part of the Stable ABI.\nReturns the number of keys in object o on success, and\n-1\non failure. This is equivalent to the Python expressionlen(o)\n.\n-\nPyObject *PyMapping_GetItemString(PyObject *o, const char *key)Â¶\n- Return value: New reference. Part of the Stable ABI.\nThis is the same as\nPyObject_GetItem()\n, but key is specified as a const char* UTF-8 encoded bytes string, rather than a PyObject*.\n-\nint PyMapping_GetOptionalItem(PyObject *obj, PyObject *key, PyObject **result)Â¶\n- Part of the Stable ABI since version 3.13.\nVariant of\nPyObject_GetItem()\nwhich doesnât raiseKeyError\nif the key is not found.If the key is found, return\n1\nand set *result to a new strong reference to the corresponding value. If the key is not found, return0\nand set *result toNULL\n; theKeyError\nis silenced. If an error other thanKeyError\nis raised, return-1\nand set *result toNULL\n.Added in version 3.13.\n-\nint PyMapping_GetOptionalItemString(PyObject *obj, const char *key, PyObject **result)Â¶\n- Part of the Stable ABI since version 3.13.\nThis is the same as\nPyMapping_GetOptionalItem()\n, but key is specified as a const char* UTF-8 encoded bytes string, rather than a PyObject*.Added in version 3.13.\n-\nint PyMapping_SetItemString(PyObject *o, const char *key, PyObject *v)Â¶\n- Part of the Stable ABI.\nThis is the same as\nPyObject_SetItem()\n, but key is specified as a const char* UTF-8 encoded bytes string, rather than a PyObject*.\n-\nint PyMapping_DelItem(PyObject *o, PyObject *key)Â¶\nT"}
{"url": "https://docs.python.org/3/library/email.message.html", "title": "", "text": "email.message\n: Representing an email messageÂ¶\nSource code: Lib/email/message.py\nAdded in version 3.6: [1]\nThe central class in the email\npackage is the EmailMessage\nclass, imported from the email.message\nmodule. It is the base class for\nthe email\nobject model. EmailMessage\nprovides the core\nfunctionality for setting and querying header fields, for accessing message\nbodies, and for creating or modifying structured messages.\nAn email message consists of headers and a payload (which is also referred to as the content). Headers are RFC 5322 or RFC 6532 style field names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as multipart/* or message/rfc822.\nThe conceptual model provided by an EmailMessage\nobject is that of an\nordered dictionary of headers coupled with a payload that represents the\nRFC 5322 body of the message, which might be a list of sub-EmailMessage\nobjects. In addition to the normal dictionary methods for accessing the header\nnames and values, there are methods for accessing specialized information from\nthe headers (for example the MIME content type), for operating on the payload,\nfor generating a serialized version of the message, and for recursively walking\nover the object tree.\nThe EmailMessage\ndictionary-like interface is indexed by the header\nnames, which must be ASCII values. The values of the dictionary are strings\nwith some extra methods. Headers are stored and returned in case-preserving\nform, but field names are matched case-insensitively. The keys are ordered,\nbut unlike a real dict, there can be duplicates. Additional methods are\nprovided for working with headers that have duplicate keys.\nThe payload is either a string or"}
{"url": "https://docs.python.org/3/whatsnew/2.0.html", "title": "", "text": "Whatâs New in Python 2.0Â¶\n- Author:\nA.M. Kuchling and Moshe Zadka\nIntroductionÂ¶\nA new release of Python, version 2.0, was released on October 16, 2000. This article covers the exciting new features in 2.0, highlights some other useful changes, and points out a few incompatible changes that may require rewriting code.\nPythonâs development never completely stops between releases, and a steady flow of bug fixes and improvements are always being submitted. A host of minor fixes, a few optimizations, additional docstrings, and better error messages went into 2.0; to list them all would be impossible, but theyâre certainly significant. Consult the publicly available CVS logs if you want to see the full list. This progress is due to the five developers working for PythonLabs are now getting paid to spend their days fixing bugs, and also due to the improved communication resulting from moving to SourceForge.\nWhat About Python 1.6?Â¶\nPython 1.6 can be thought of as the Contractual Obligations Python release. After the core development team left CNRI in May 2000, CNRI requested that a 1.6 release be created, containing all the work on Python that had been performed at CNRI. Python 1.6 therefore represents the state of the CVS tree as of May 2000, with the most significant new feature being Unicode support. Development continued after May, of course, so the 1.6 tree received a few fixes to ensure that itâs forward-compatible with Python 2.0. 1.6 is therefore part of Pythonâs evolution, and not a side branch.\nSo, should you take much interest in Python 1.6? Probably not. The 1.6final and 2.0beta1 releases were made on the same day (September 5, 2000), the plan being to finalize Python 2.0 within a month or so. If you have applications to maintain, there seems little point in breaking things by moving to 1.6, fixing them, and then having another round of breakage within a month by moving to 2.0; youâre better off just going straight to 2.0. Most of the really interesting featu"}
{"url": "https://docs.python.org/3/c-api/memoryview.html", "title": "", "text": "MemoryView objectsÂ¶\nA memoryview\nobject exposes the C level buffer interface as a Python object which can then be passed around like\nany other object.\n-\nPyObject *PyMemoryView_FromObject(PyObject *obj)Â¶\n- Return value: New reference. Part of the Stable ABI.\nCreate a memoryview object from an object that provides the buffer interface. If obj supports writable buffer exports, the memoryview object will be read/write, otherwise it may be either read-only or read/write at the discretion of the exporter.\n-\nPyBUF_READÂ¶\nFlag to request a readonly buffer.\n-\nPyBUF_WRITEÂ¶\nFlag to request a writable buffer.\n-\nPyObject *PyMemoryView_FromMemory(char *mem, Py_ssize_t size, int flags)Â¶\n- Return value: New reference. Part of the Stable ABI since version 3.7.\nCreate a memoryview object using mem as the underlying buffer. flags can be one of\nPyBUF_READ\norPyBUF_WRITE\n.Added in version 3.3.\n-\nPyObject *PyMemoryView_FromBuffer(const Py_buffer *view)Â¶\n- Return value: New reference. Part of the Stable ABI since version 3.11.\nCreate a memoryview object wrapping the given buffer structure view. For simple byte buffers,\nPyMemoryView_FromMemory()\nis the preferred function.\n-\nPyObject *PyMemoryView_GetContiguous(PyObject *obj, int buffertype, char order)Â¶\n- Return value: New reference. Part of the Stable ABI.\nCreate a memoryview object to a contiguous chunk of memory (in either âCâ or âFâortran order) from an object that defines the buffer interface. If memory is contiguous, the memoryview object points to the original memory. Otherwise, a copy is made and the memoryview points to a new bytes object.\nbuffertype can be one of\nPyBUF_READ\norPyBUF_WRITE\n.\n-\nint PyMemoryView_Check(PyObject *obj)Â¶\nReturn true if the object obj is a memoryview object. It is not currently allowed to create subclasses of\nmemoryview\n. This function always succeeds.\n-\nPy_buffer *PyMemoryView_GET_BUFFER(PyObject *mview)Â¶\nReturn a pointer to the memoryviewâs private copy of the exporterâs buffer. mview must be a m"}
{"url": "https://docs.python.org/3/c-api/call.html", "title": "", "text": "Call ProtocolÂ¶\nCPython supports two different calling protocols: tp_call and vectorcall.\nThe tp_call ProtocolÂ¶\nInstances of classes that set tp_call\nare callable.\nThe signature of the slot is:\nPyObject *tp_call(PyObject *callable, PyObject *args, PyObject *kwargs);\nA call is made using a tuple for the positional arguments\nand a dict for the keyword arguments, similarly to\ncallable(*args, **kwargs)\nin Python code.\nargs must be non-NULL (use an empty tuple if there are no arguments)\nbut kwargs may be NULL if there are no keyword arguments.\nThis convention is not only used by tp_call:\ntp_new\nand tp_init\nalso pass arguments this way.\nTo call an object, use PyObject_Call()\nor another\ncall API.\nThe Vectorcall ProtocolÂ¶\nAdded in version 3.9.\nThe vectorcall protocol was introduced in PEP 590 as an additional protocol for making calls more efficient.\nAs rule of thumb, CPython will prefer the vectorcall for internal calls\nif the callable supports it. However, this is not a hard rule.\nAdditionally, some third-party extensions use tp_call directly\n(rather than using PyObject_Call()\n).\nTherefore, a class supporting vectorcall must also implement\ntp_call\n.\nMoreover, the callable must behave the same\nregardless of which protocol is used.\nThe recommended way to achieve this is by setting\ntp_call\nto PyVectorcall_Call()\n.\nThis bears repeating:\nWarning\nA class supporting vectorcall must also implement\ntp_call\nwith the same semantics.\nChanged in version 3.12: The Py_TPFLAGS_HAVE_VECTORCALL\nflag is now removed from a class\nwhen the classâs __call__()\nmethod is reassigned.\n(This internally sets tp_call\nonly, and thus\nmay make it behave differently than the vectorcall function.)\nIn earlier Python versions, vectorcall should only be used with\nimmutable\nor static types.\nA class should not implement vectorcall if that would be slower than tp_call. For example, if the callee needs to convert the arguments to an args tuple and kwargs dict anyway, then there is no point in implementing vecto"}
{"url": "https://docs.python.org/3/c-api/dict.html", "title": "", "text": "Dictionary ObjectsÂ¶\n-\nPyTypeObject PyDict_TypeÂ¶\n- Part of the Stable ABI.\nThis instance of\nPyTypeObject\nrepresents the Python dictionary type. This is the same object asdict\nin the Python layer.\n-\nint PyDict_Check(PyObject *p)Â¶\nReturn true if p is a dict object or an instance of a subtype of the dict type. This function always succeeds.\n-\nint PyDict_CheckExact(PyObject *p)Â¶\nReturn true if p is a dict object, but not an instance of a subtype of the dict type. This function always succeeds.\n-\nPyObject *PyDict_New()Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new empty dictionary, or\nNULL\non failure.\n-\nPyObject *PyDictProxy_New(PyObject *mapping)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a\ntypes.MappingProxyType\nobject for a mapping which enforces read-only behavior. This is normally used to create a view to prevent modification of the dictionary for non-dynamic class types.\n-\nvoid PyDict_Clear(PyObject *p)Â¶\n- Part of the Stable ABI.\nEmpty an existing dictionary of all key-value pairs.\n-\nint PyDict_Contains(PyObject *p, PyObject *key)Â¶\n- Part of the Stable ABI.\nDetermine if dictionary p contains key. If an item in p is matches key, return\n1\n, otherwise return0\n. On error, return-1\n. This is equivalent to the Python expressionkey in p\n.\n-\nint PyDict_ContainsString(PyObject *p, const char *key)Â¶\nThis is the same as\nPyDict_Contains()\n, but key is specified as a const char* UTF-8 encoded bytes string, rather than a PyObject*.Added in version 3.13.\n-\nPyObject *PyDict_Copy(PyObject *p)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new dictionary that contains the same key-value pairs as p.\n-\nint PyDict_SetItem(PyObject *p, PyObject *key, PyObject *val)Â¶\n- Part of the Stable ABI.\nInsert val into the dictionary p with a key of key. key must be hashable; if it isnât,\nTypeError\nwill be raised. Return0\non success or-1\non failure. This function does not steal a reference to val.\n-\nint PyDict_SetItemString(PyOb"}
{"url": "https://docs.python.org/3/c-api/time.html", "title": "", "text": "PyTime C APIÂ¶\nAdded in version 3.13.\nThe clock C API provides access to system clocks.\nIt is similar to the Python time\nmodule.\nFor C API related to the datetime\nmodule, see DateTime Objects.\nTypesÂ¶\n-\ntype PyTime_tÂ¶\nA timestamp or duration in nanoseconds, represented as a signed 64-bit integer.\nThe reference point for timestamps depends on the clock used. For example,\nPyTime_Time()\nreturns timestamps relative to the UNIX epoch.The supported range is around [-292.3 years; +292.3 years]. Using the Unix epoch (January 1st, 1970) as reference, the supported date range is around [1677-09-21; 2262-04-11]. The exact limits are exposed as constants:\nClock FunctionsÂ¶\nThe following functions take a pointer to a PyTime_t that they set to the value of a particular clock. Details of each clock are given in the documentation of the corresponding Python function.\nThe functions return 0\non success, or -1\n(with an exception set)\non failure.\nOn integer overflow, they set the PyExc_OverflowError\nexception and\nset *result\nto the value clamped to the [PyTime_MIN; PyTime_MAX]\nrange.\n(On current systems, integer overflows are likely caused by misconfigured\nsystem time.)\nAs any other C API (unless otherwise specified), the functions must be called with the GIL held.\n-\nint PyTime_Monotonic(PyTime_t *result)Â¶\nRead the monotonic clock. See\ntime.monotonic()\nfor important details on this clock.\n-\nint PyTime_PerfCounter(PyTime_t *result)Â¶\nRead the performance counter. See\ntime.perf_counter()\nfor important details on this clock.\n-\nint PyTime_Time(PyTime_t *result)Â¶\nRead the âwall clockâ time. See\ntime.time()\nfor details important on this clock.\nRaw Clock FunctionsÂ¶\nSimilar to clock functions, but donât set an exception on error and donât require the caller to hold the GIL.\nOn success, the functions return 0\n.\nOn failure, they set *result\nto 0\nand return -1\n, without setting\nan exception. To get the cause of the error, acquire the GIL and call the\nregular (non-Raw\n) function. Note that the"}
{"url": "https://docs.python.org/3/c-api/long.html", "title": "", "text": "Integer ObjectsÂ¶\nAll integers are implemented as âlongâ integer objects of arbitrary size.\nOn error, most PyLong_As*\nAPIs return (return type)-1\nwhich cannot be\ndistinguished from a number. Use PyErr_Occurred()\nto disambiguate.\n-\ntype PyLongObjectÂ¶\n- Part of the Limited API (as an opaque struct).\nThis subtype of\nPyObject\nrepresents a Python integer object.\n-\nPyTypeObject PyLong_TypeÂ¶\n- Part of the Stable ABI.\nThis instance of\nPyTypeObject\nrepresents the Python integer type. This is the same object asint\nin the Python layer.\n-\nint PyLong_Check(PyObject *p)Â¶\nReturn true if its argument is a\nPyLongObject\nor a subtype ofPyLongObject\n. This function always succeeds.\n-\nint PyLong_CheckExact(PyObject *p)Â¶\nReturn true if its argument is a\nPyLongObject\n, but not a subtype ofPyLongObject\n. This function always succeeds.\n-\nPyObject *PyLong_FromLong(long v)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new\nPyLongObject\nobject from v, orNULL\non failure.CPython implementation detail: CPython keeps an array of integer objects for all integers between\n-5\nand256\n. When you create an int in that range you actually just get back a reference to the existing object.\n-\nPyObject *PyLong_FromUnsignedLong(unsigned long v)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new\nPyLongObject\nobject from a C unsigned long, orNULL\non failure.\n-\nPyObject *PyLong_FromSsize_t(Py_ssize_t v)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new\nPyLongObject\nobject from a CPy_ssize_t\n, orNULL\non failure.\n-\nPyObject *PyLong_FromSize_t(size_t v)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new\nPyLongObject\nobject from a Csize_t\n, orNULL\non failure.\n-\nPyObject *PyLong_FromLongLong(long long v)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a new\nPyLongObject\nobject from a C long long, orNULL\non failure.\n-\nPyObject *PyLong_FromUnsignedLongLong(unsigned long long v)Â¶\n- Return value: New reference. Part of the Sta"}
{"url": "https://docs.python.org/3/c-api/number.html", "title": "", "text": "Number ProtocolÂ¶\n-\nint PyNumber_Check(PyObject *o)Â¶\n- Part of the Stable ABI.\nReturns\n1\nif the object o provides numeric protocols, and false otherwise. This function always succeeds.Changed in version 3.8: Returns\n1\nif o is an index integer.\n-\nPyObject *PyNumber_Add(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturns the result of adding o1 and o2, or\nNULL\non failure. This is the equivalent of the Python expressiono1 + o2\n.\n-\nPyObject *PyNumber_Subtract(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturns the result of subtracting o2 from o1, or\nNULL\non failure. This is the equivalent of the Python expressiono1 - o2\n.\n-\nPyObject *PyNumber_Multiply(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturns the result of multiplying o1 and o2, or\nNULL\non failure. This is the equivalent of the Python expressiono1 * o2\n.\n-\nPyObject *PyNumber_MatrixMultiply(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI since version 3.7.\nReturns the result of matrix multiplication on o1 and o2, or\nNULL\non failure. This is the equivalent of the Python expressiono1 @ o2\n.Added in version 3.5.\n-\nPyObject *PyNumber_FloorDivide(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the floor of o1 divided by o2, or\nNULL\non failure. This is the equivalent of the Python expressiono1 // o2\n.\n-\nPyObject *PyNumber_TrueDivide(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn a reasonable approximation for the mathematical value of o1 divided by o2, or\nNULL\non failure. The return value is âapproximateâ because binary floating-point numbers are approximate; it is not possible to represent all real numbers in base two. This function can return a floating-point value when passed two integers. This is the equivalent of the Python expressiono1 / o2\n.\n-\nPyObject *PyNumber_Re"}
{"url": "https://docs.python.org/3/howto/perf_profiling.html", "title": "", "text": "Python support for the Linux perf\nprofilerÂ¶\n- author:\nPablo Galindo\nThe Linux perf profiler\nis a very powerful tool that allows you to profile and obtain\ninformation about the performance of your application.\nperf\nalso has a very vibrant ecosystem of tools\nthat aid with the analysis of the data that it produces.\nThe main problem with using the perf\nprofiler with Python applications is that\nperf\nonly gets information about native symbols, that is, the names of\nfunctions and procedures written in C. This means that the names and file names\nof Python functions in your code will not appear in the output of perf\n.\nSince Python 3.12, the interpreter can run in a special mode that allows Python\nfunctions to appear in the output of the perf\nprofiler. When this mode is\nenabled, the interpreter will interpose a small piece of code compiled on the\nfly before the execution of every Python function and it will teach perf\nthe\nrelationship between this piece of code and the associated Python function using\nperf map files.\nNote\nSupport for the perf\nprofiler is currently only available for Linux on\nselect architectures. Check the output of the configure\nbuild step or\ncheck the output of python -m sysconfig | grep HAVE_PERF_TRAMPOLINE\nto see if your system is supported.\nFor example, consider the following script:\ndef foo(n):\nresult = 0\nfor _ in range(n):\nresult += 1\nreturn result\ndef bar(n):\nfoo(n)\ndef baz(n):\nbar(n)\nif __name__ == \"__main__\":\nbaz(1000000)\nWe can run perf\nto sample CPU stack traces at 9999 hertz:\n$ perf record -F 9999 -g -o perf.data python my_script.py\nThen we can use perf report\nto analyze the data:\n$ perf report --stdio -n -g\n# Children Self Samples Command Shared Object Symbol\n# ........ ........ ............ .......... .................. ..........................................\n#\n91.08% 0.00% 0 python.exe python.exe [.] _start\n|\n---_start\n|\n--90.71%--__libc_start_main\nPy_BytesMain\n|\n|--56.88%--pymain_run_python.constprop.0\n| |\n| |--56.13%--_PyRun_AnyFileObjec"}
{"url": "https://docs.python.org/3/c-api/marshal.html", "title": "", "text": "Data marshalling supportÂ¶\nThese routines allow C code to work with serialized objects using the same\ndata format as the marshal\nmodule. There are functions to write data\ninto the serialization format, and additional functions that can be used to\nread the data back. Files used to store marshalled data must be opened in\nbinary mode.\nNumeric values are stored with the least significant byte first.\nThe module supports two versions of the data format: version 0 is the\nhistorical version, version 1 shares interned strings in the file, and upon\nunmarshalling. Version 2 uses a binary format for floating-point numbers.\nPy_MARSHAL_VERSION\nindicates the current file format (currently 2).\n-\nvoid PyMarshal_WriteLongToFile(long value, FILE *file, int version)Â¶\nMarshal a long integer, value, to file. This will only write the least-significant 32 bits of value; regardless of the size of the native long type. version indicates the file format.\nThis function can fail, in which case it sets the error indicator. Use\nPyErr_Occurred()\nto check for that.\n-\nvoid PyMarshal_WriteObjectToFile(PyObject *value, FILE *file, int version)Â¶\nMarshal a Python object, value, to file. version indicates the file format.\nThis function can fail, in which case it sets the error indicator. Use\nPyErr_Occurred()\nto check for that.\n-\nPyObject *PyMarshal_WriteObjectToString(PyObject *value, int version)Â¶\n- Return value: New reference.\nReturn a bytes object containing the marshalled representation of value. version indicates the file format.\nThe following functions allow marshalled values to be read back in.\n-\nlong PyMarshal_ReadLongFromFile(FILE *file)Â¶\nReturn a C long from the data stream in a FILE* opened for reading. Only a 32-bit value can be read in using this function, regardless of the native size of long.\nOn error, sets the appropriate exception (\nEOFError\n) and returns-1\n.\n-\nint PyMarshal_ReadShortFromFile(FILE *file)Â¶\nReturn a C short from the data stream in a FILE* opened for reading. Only a 16"}
{"url": "https://docs.python.org/3/c-api/exceptions.html", "title": "", "text": "Exception HandlingÂ¶\nThe functions described in this chapter will let you handle and raise Python\nexceptions. It is important to understand some of the basics of Python\nexception handling. It works somewhat like the POSIX errno\nvariable:\nthere is a global indicator (per thread) of the last error that occurred. Most\nC API functions donât clear this on success, but will set it to indicate the\ncause of the error on failure. Most C API functions also return an error\nindicator, usually NULL\nif they are supposed to return a pointer, or -1\nif they return an integer (exception: the PyArg_*\nfunctions\nreturn 1\nfor success and 0\nfor failure).\nConcretely, the error indicator consists of three object pointers: the\nexceptionâs type, the exceptionâs value, and the traceback object. Any\nof those pointers can be NULL\nif non-set (although some combinations are\nforbidden, for example you canât have a non-NULL\ntraceback if the exception\ntype is NULL\n).\nWhen a function must fail because some function it called failed, it generally doesnât set the error indicator; the function it called already set it. It is responsible for either handling the error and clearing the exception or returning after cleaning up any resources it holds (such as object references or memory allocations); it should not continue normally if it is not prepared to handle the error. If returning due to an error, it is important to indicate to the caller that an error has been set. If the error is not handled or carefully propagated, additional calls into the Python/C API may not behave as intended and may fail in mysterious ways.\nNote\nThe error indicator is not the result of sys.exc_info()\n.\nThe former corresponds to an exception that is not yet caught (and is\ntherefore still propagating), while the latter returns an exception after\nit is caught (and has therefore stopped propagating).\nPrinting and clearingÂ¶\n-\nvoid PyErr_Clear()Â¶\n- Part of the Stable ABI.\nClear the error indicator. If the error indicator is not set,"}
{"url": "https://docs.python.org/3/c-api/descriptor.html", "title": "", "text": "Descriptor ObjectsÂ¶\nâDescriptorsâ are objects that describe some attribute of an object. They are found in the dictionary of type objects.\n-\nPyTypeObject PyProperty_TypeÂ¶\n- Part of the Stable ABI.\nThe type object for the built-in descriptor types.\n-\nPyObject *PyDescr_NewGetSet(PyTypeObject *type, struct PyGetSetDef *getset)Â¶\n- Return value: New reference. Part of the Stable ABI.\n-\nPyObject *PyDescr_NewMember(PyTypeObject *type, struct PyMemberDef *meth)Â¶\n- Return value: New reference. Part of the Stable ABI.\n-\nPyObject *PyDescr_NewMethod(PyTypeObject *type, struct PyMethodDef *meth)Â¶\n- Return value: New reference. Part of the Stable ABI.\n-\nPyObject *PyDescr_NewWrapper(PyTypeObject *type, struct wrapperbase *wrapper, void *wrapped)Â¶\n- Return value: New reference.\n-\nPyObject *PyDescr_NewClassMethod(PyTypeObject *type, PyMethodDef *method)Â¶\n- Return value: New reference. Part of the Stable ABI.\n-\nint PyDescr_IsData(PyObject *descr)Â¶\nReturn non-zero if the descriptor objects descr describes a data attribute, or\n0\nif it describes a method. descr must be a descriptor object; there is no error checking.\n-\nPyObject *PyWrapper_New(PyObject*, PyObject*)Â¶\n- Return value: New reference. Part of the Stable ABI."}
{"url": "https://docs.python.org/3/c-api/sequence.html", "title": "", "text": "Sequence ProtocolÂ¶\n-\nint PySequence_Check(PyObject *o)Â¶\n- Part of the Stable ABI.\nReturn\n1\nif the object provides the sequence protocol, and0\notherwise. Note that it returns1\nfor Python classes with a__getitem__()\nmethod, unless they aredict\nsubclasses, since in general it is impossible to determine what type of keys the class supports. This function always succeeds.\n-\nPy_ssize_t PySequence_Size(PyObject *o)Â¶\n-\nPy_ssize_t PySequence_Length(PyObject *o)Â¶\n- Part of the Stable ABI.\nReturns the number of objects in sequence o on success, and\n-1\non failure. This is equivalent to the Python expressionlen(o)\n.\n-\nPyObject *PySequence_Concat(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the concatenation of o1 and o2 on success, and\nNULL\non failure. This is the equivalent of the Python expressiono1 + o2\n.\n-\nPyObject *PySequence_Repeat(PyObject *o, Py_ssize_t count)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the result of repeating sequence object o count times, or\nNULL\non failure. This is the equivalent of the Python expressiono * count\n.\n-\nPyObject *PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the concatenation of o1 and o2 on success, and\nNULL\non failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python expressiono1 += o2\n.\n-\nPyObject *PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the result of repeating sequence object o count times, or\nNULL\non failure. The operation is done in-place when o supports it. This is the equivalent of the Python expressiono *= count\n.\n-\nPyObject *PySequence_GetItem(PyObject *o, Py_ssize_t i)Â¶\n- Return value: New reference. Part of the Stable ABI.\nReturn the ith element of o, or\nNULL\non failure. This is the equivalent of the Python expressiono[i]\n.\n-\nPyObject *PySequence_GetSlice(PyObject *o,"}
{"url": "https://docs.python.org/3/library/asyncio-stream.html", "title": "", "text": "StreamsÂ¶\nSource code: Lib/asyncio/streams.py\nStreams are high-level async/await-ready primitives to work with network connections. Streams allow sending and receiving data without using callbacks or low-level protocols and transports.\nHere is an example of a TCP echo client written using asyncio streams:\nimport asyncio\nasync def tcp_echo_client(message):\nreader, writer = await asyncio.open_connection(\n'127.0.0.1', 8888)\nprint(f'Send: {message!r}')\nwriter.write(message.encode())\nawait writer.drain()\ndata = await reader.read(100)\nprint(f'Received: {data.decode()!r}')\nprint('Close the connection')\nwriter.close()\nawait writer.wait_closed()\nasyncio.run(tcp_echo_client('Hello World!'))\nSee also the Examples section below.\nStream Functions\nThe following top-level asyncio functions can be used to create and work with streams:\n- async asyncio.open_connection(host=None, port=None, *, limit=None, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None, ssl_handshake_timeout=None, ssl_shutdown_timeout=None, happy_eyeballs_delay=None, interleave=None)Â¶\nEstablish a network connection and return a pair of\n(reader, writer)\nobjects.The returned reader and writer objects are instances of\nStreamReader\nandStreamWriter\nclasses.limit determines the buffer size limit used by the returned\nStreamReader\ninstance. By default the limit is set to 64 KiB.The rest of the arguments are passed directly to\nloop.create_connection()\n.Note\nThe sock argument transfers ownership of the socket to the\nStreamWriter\ncreated. To close the socket, call itsclose()\nmethod.Changed in version 3.7: Added the ssl_handshake_timeout parameter.\nChanged in version 3.8: Added the happy_eyeballs_delay and interleave parameters.\nChanged in version 3.10: Removed the loop parameter.\nChanged in version 3.11: Added the ssl_shutdown_timeout parameter.\n- async asyncio.start_server(client_connected_cb, host=None, port=None, *, limit=None, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=None"}
{"url": "https://docs.python.org/3/c-api/reflection.html", "title": "", "text": "ReflectionÂ¶\n-\nPyObject *PyEval_GetBuiltins(void)Â¶\n- Return value: Borrowed reference. Part of the Stable ABI.\nDeprecated since version 3.13: Use\nPyEval_GetFrameBuiltins()\ninstead.Return a dictionary of the builtins in the current execution frame, or the interpreter of the thread state if no frame is currently executing.\n-\nPyObject *PyEval_GetLocals(void)Â¶\n- Return value: Borrowed reference. Part of the Stable ABI.\nDeprecated since version 3.13: Use either\nPyEval_GetFrameLocals()\nto obtain the same behaviour as callinglocals()\nin Python code, or else callPyFrame_GetLocals()\non the result ofPyEval_GetFrame()\nto access thef_locals\nattribute of the currently executing frame.Return a mapping providing access to the local variables in the current execution frame, or\nNULL\nif no frame is currently executing.Refer to\nlocals()\nfor details of the mapping returned at different scopes.As this function returns a borrowed reference, the dictionary returned for optimized scopes is cached on the frame object and will remain alive as long as the frame object does. Unlike\nPyEval_GetFrameLocals()\nandlocals()\n, subsequent calls to this function in the same frame will update the contents of the cached dictionary to reflect changes in the state of the local variables rather than returning a new snapshot.Changed in version 3.13: As part of PEP 667,\nPyFrame_GetLocals()\n,locals()\n, andFrameType.f_locals\nno longer make use of the shared cache dictionary. Refer to the Whatâs New entry for additional details.\n-\nPyObject *PyEval_GetGlobals(void)Â¶\n- Return value: Borrowed reference. Part of the Stable ABI.\nDeprecated since version 3.13: Use\nPyEval_GetFrameGlobals()\ninstead.Return a dictionary of the global variables in the current execution frame, or\nNULL\nif no frame is currently executing.\n-\nPyFrameObject *PyEval_GetFrame(void)Â¶\n- Return value: Borrowed reference. Part of the Stable ABI.\nReturn the current thread stateâs frame, which is\nNULL\nif no frame is currently executing.See also\nPyThr"}
