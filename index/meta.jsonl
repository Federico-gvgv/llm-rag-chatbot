{"url": "https://docs.python.org/3/tutorial/index.html", "title": "", "text": "The Python TutorialÂ¶\nTip\nThis tutorial is designed for programmers that are new to the Python language, not beginners who are new to programming.\nPython is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Pythonâs elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and features of the Python language and system. Be aware that it expects you to have a basic understanding of programming in general. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Pythonâs most noteworthy features, and will give you a good idea of the l"}
{"url": "https://docs.python.org/3/library/index.html", "title": "", "text": "The Python Standard LibraryÂ¶\nWhile The Python Language Reference describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.\nPythonâs standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.\nThe Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.\nIn addition to the standard library, there is an active collection of hundreds of thousands of components (from individual programs and modules to packages and entire application development frameworks), available from the Python Package Index.\n- Introduction\n- Built-in Functions\n- Built-in Constants\n- Built-in Types\n- Truth Value Testing\n- Boolean Operations â\nand\n,or\n,not\n- Comparisons\n- Numeric Types â\nint\n,float\n,complex\n- Boolean Type -\nbool\n- Iterator Types\n- Sequence Types â\nlist\n,tuple\n,range\n- Text Sequence Type â\nstr\n- Binary Sequence Types â\nbytes\n,bytearray\n,memoryview\n- Set Types â\nset\n,frozenset\n- Mapping Types â\ndict\n- Context Manager Types\n- Type Annotation Types â Gener"}
{"url": "https://docs.python.org/3/faq/programming.html", "title": "", "text": "Programming FAQÂ¶\nGeneral QuestionsÂ¶\nIs there a source code level debugger with breakpoints, single-stepping, etc.?Â¶\nYes.\nSeveral debuggers for Python are described below, and the built-in function\nbreakpoint()\nallows you to drop into any of them.\nThe pdb module is a simple but adequate console-mode debugger for Python. It is\npart of the standard Python library, and is documented in the Library\nReference Manual\n. You can also write your own debugger by using the code\nfor pdb as an example.\nThe IDLE interactive development environment, which is part of the standard Python distribution (normally available as Tools/scripts/idle3), includes a graphical debugger.\nPythonWin is a Python IDE that includes a GUI debugger based on pdb. The PythonWin debugger colors breakpoints and has quite a few cool features such as debugging non-PythonWin programs. PythonWin is available as part of pywin32 project and as a part of the ActivePython distribution.\nEric is an IDE built on PyQt and the Scintilla editing component.\ntrepan3k is a gdb-like debugger.\nVisual Studio Code is an IDE with debugging tools that integrates with version-control software.\nThere are a number of commercial Python IDEs that include graphical debuggers. They include:\nAre there tools to help find bugs or perform static analysis?Â¶\nYes.\nPylint and Pyflakes do basic checking that will help you catch bugs sooner.\nStatic type checkers such as Mypy, Pyre, and Pytype can check type hints in Python source code.\nHow can I create a stand-alone binary from a Python script?Â¶\nYou donât need the ability to compile Python to C code if all you want is a stand-alone program that users can download and run without having to install the Python distribution first. There are a number of tools that determine the set of modules required by a program and bind these modules together with a Python binary to produce a single executable.\nOne is to use the freeze tool, which is included in the Python source tree as Tools/freeze. It conve"}
{"url": "https://docs.python.org/3/howto/logging.html", "title": "", "text": "Logging HOWTOÂ¶\n- Author:\nVinay Sajip <vinay_sajip at red-dove dot com>\nThis page contains tutorial information. For links to reference information and a logging cookbook, please see Other resources.\nBasic Logging TutorialÂ¶\nLogging is a means of tracking events that happen when some software runs. The softwareâs developer adds logging calls to their code to indicate that certain events have occurred. An event is described by a descriptive message which can optionally contain variable data (i.e. data that is potentially different for each occurrence of the event). Events also have an importance which the developer ascribes to the event; the importance can also be called the level or severity.\nWhen to use loggingÂ¶\nYou can access logging functionality by creating a logger via logger =\ngetLogger(__name__)\n, and then calling the loggerâs debug()\n,\ninfo()\n, warning()\n, error()\nand\ncritical()\nmethods. To determine when to use logging, and to see\nwhich logger methods to use when, see the table below. It states, for each of a\nset of common tasks, the best tool to use for that task.\nTask you want to perform |\nThe best tool for the task |\n|---|---|\nDisplay console output for ordinary usage of a command line script or program |\n|\nReport events that occur during normal operation of a program (e.g. for status monitoring or fault investigation) |\nA loggerâs |\nIssue a warning regarding a particular runtime event |\nA loggerâs |\nReport an error regarding a particular runtime event |\nRaise an exception |\nReport suppression of an error without raising an exception (e.g. error handler in a long-running server process) |\nA loggerâs |\nThe logger methods are named after the level or severity of the events they are used to track. The standard levels and their applicability are described below (in increasing order of severity):\nLevel |\nWhen itâs used |\n|---|---|\n|\nDetailed information, typically of interest only when diagnosing problems. |\n|\nConfirmation that things are working as expected"}
{"url": "https://docs.python.org/3/tutorial/stdlib.html", "title": "", "text": "10. Brief Tour of the Standard LibraryÂ¶\n10.1. Operating System InterfaceÂ¶\nThe os\nmodule provides dozens of functions for interacting with the\noperating system:\n>>> import os\n>>> os.getcwd() # Return the current working directory\n'C:\\\\Python313'\n>>> os.chdir('/server/accesslogs') # Change current working directory\n>>> os.system('mkdir today') # Run the command mkdir in the system shell\n0\nBe sure to use the import os\nstyle instead of from os import *\n. This\nwill keep os.open()\nfrom shadowing the built-in open()\nfunction which\noperates much differently.\nThe built-in dir()\nand help()\nfunctions are useful as interactive\naids for working with large modules like os\n:\n>>> import os\n>>> dir(os)\n<returns a list of all module functions>\n>>> help(os)\n<returns an extensive manual page created from the module's docstrings>\nFor daily file and directory management tasks, the shutil\nmodule provides\na higher level interface that is easier to use:\n>>> import shutil\n>>> shutil.copyfile('data.db', 'archive.db')\n'archive.db'\n>>> shutil.move('/build/executables', 'installdir')\n'installdir'\n10.2. File WildcardsÂ¶\nThe glob\nmodule provides a function for making file lists from directory\nwildcard searches:\n>>> import glob\n>>> glob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']\n10.3. Command Line ArgumentsÂ¶\nCommon utility scripts often need to process command line arguments. These\narguments are stored in the sys\nmoduleâs argv attribute as a list. For\ninstance, letâs take the following demo.py\nfile:\n# File demo.py\nimport sys\nprint(sys.argv)\nHere is the output from running python demo.py one two three\nat the command\nline:\n['demo.py', 'one', 'two', 'three']\nThe argparse\nmodule provides a more sophisticated mechanism to process\ncommand line arguments. The following script extracts one or more filenames\nand an optional number of lines to be displayed:\nimport argparse\nparser = argparse.ArgumentParser(\nprog='top',\ndescription='Show top lines from each file')\nparser.add_argument('filenames', n"}
{"url": "https://docs.python.org/3/tutorial/floatingpoint.html", "title": "", "text": "15. Floating-Point Arithmetic: Issues and LimitationsÂ¶\nFloating-point numbers are represented in computer hardware as base 2 (binary)\nfractions. For example, the decimal fraction 0.625\nhas value 6/10 + 2/100 + 5/1000, and in the same way the binary fraction 0.101\nhas value 1/2 + 0/4 + 1/8. These two fractions have identical values, the only\nreal difference being that the first is written in base 10 fractional notation,\nand the second in base 2.\nUnfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is that, in general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers actually stored in the machine.\nThe problem is easier to understand at first in base 10. Consider the fraction 1/3. You can approximate that as a base 10 fraction:\n0.3\nor, better,\n0.33\nor, better,\n0.333\nand so on. No matter how many digits youâre willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3.\nIn the same way, no matter how many base 2 digits youâre willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction. In base 2, 1/10 is the infinitely repeating fraction\n0.0001100110011001100110011001100110011001100110011...\nStop at any finite number of bits, and you get an approximation. On most\nmachines today, floats are approximated using a binary fraction with\nthe numerator using the first 53 bits starting with the most significant bit and\nwith the denominator as a power of two. In the case of 1/10, the binary fraction\nis 3602879701896397 / 2 ** 55\nwhich is close to but not exactly\nequal to the true value of 1/10.\nMany users are not aware of the approximation because of the way values are displayed. Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine. On most machines, if Python were to print the true decimal value of the binary approximation s"}
{"url": "https://docs.python.org/3/tutorial/datastructures.html", "title": "", "text": "5. Data StructuresÂ¶\nThis chapter describes some things youâve learned about already in more detail, and adds some new things as well.\n5.1. More on ListsÂ¶\nThe list data type has some more methods. Here are all of the methods of list objects:\n- list.append(x)\nAdd an item to the end of the list. Similar to\na[len(a):] = [x]\n.\n- list.extend(iterable)\nExtend the list by appending all the items from the iterable. Similar to\na[len(a):] = iterable\n.\n- list.insert(i, x)\nInsert an item at a given position. The first argument is the index of the element before which to insert, so\na.insert(0, x)\ninserts at the front of the list, anda.insert(len(a), x)\nis equivalent toa.append(x)\n.\n- list.remove(x)\nRemove the first item from the list whose value is equal to x. It raises a\nValueError\nif there is no such item.\n- list.pop([i])\nRemove the item at the given position in the list, and return it. If no index is specified,\na.pop()\nremoves and returns the last item in the list. It raises anIndexError\nif the list is empty or the index is outside the list range.\n- list.clear()\nRemove all items from the list. Similar to\ndel a[:]\n.\n- list.index(x[, start[, end]])\nReturn zero-based index of the first occurrence of x in the list. Raises a\nValueError\nif there is no such item.The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.\n- list.count(x)\nReturn the number of times x appears in the list.\n- list.sort(*, key=None, reverse=False)\nSort the items of the list in place (the arguments can be used for sort customization, see\nsorted()\nfor their explanation).\n- list.reverse()\nReverse the elements of the list in place.\n- list.copy()\nReturn a shallow copy of the list. Similar to\na[:]\n.\nAn example that uses most of the list methods:\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple',"}
{"url": "https://docs.python.org/3/tutorial/interactive.html", "title": "", "text": "14. Interactive Input Editing and History SubstitutionÂ¶\nSome versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU Readline library, which supports various styles of editing. This library has its own documentation which we wonât duplicate here.\n14.1. Tab Completion and History EditingÂ¶\nCompletion of variable and module names is\nautomatically enabled at interpreter startup so\nthat the Tab key invokes the completion function; it looks at\nPython statement names, the current local variables, and the available\nmodule names. For dotted expressions such as string.a\n, it will evaluate\nthe expression up to the final '.'\nand then suggest completions from\nthe attributes of the resulting object. Note that this may execute\napplication-defined code if an object with a __getattr__()\nmethod\nis part of the expression. The default configuration also saves your\nhistory into a file named .python_history\nin your user directory.\nThe history will be available again during the next interactive interpreter\nsession.\n14.2. Alternatives to the Interactive InterpreterÂ¶\nThis facility is an enormous step forward compared to earlier versions of the\ninterpreter; however, some wishes are left: It would be nice if the proper\nindentation were suggested on continuation lines (the parser knows if an\nINDENT\ntoken is required next). The completion mechanism might\nuse the interpreterâs symbol table. A command to check (or even suggest)\nmatching parentheses, quotes, etc., would also be useful.\nOne alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management. It can also be thoroughly customized and embedded into other applications. Another similar enhanced interactive environment is bpython."}
{"url": "https://docs.python.org/3/tutorial/classes.html", "title": "", "text": "9. ClassesÂ¶\nClasses provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\nCompared with other programming languages, Pythonâs class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.\nIn C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual. As in Modula-3, there are no shorthands for referencing the objectâs members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.\n(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms. I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few rea"}
{"url": "https://docs.python.org/3/tutorial/venv.html", "title": "", "text": "12. Virtual Environments and PackagesÂ¶\n12.1. IntroductionÂ¶\nPython applications will often use packages and modules that donât come as part of the standard library. Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the libraryâs interface.\nThis means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.\nThe solution for this problem is to create a virtual environment, a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.\nDifferent applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application Aâs environment.\n12.2. Creating Virtual EnvironmentsÂ¶\nThe module used to create and manage virtual environments is called\nvenv\n. venv\nwill install the Python version from which\nthe command was run (as reported by the --version\noption).\nFor instance, executing the command with python3.12\nwill install\nversion 3.12.\nTo create a virtual environment, decide upon a directory where you want to\nplace it, and run the venv\nmodule as a script with the directory path:\npython -m venv tutorial-env\nThis will create the tutorial-env\ndirectory if it doesnât exist,\nand also create directories inside it containing a copy of the Python\ninterpreter and various supporting files.\nA common directory location for a "}
{"url": "https://docs.python.org/3/tutorial/errors.html", "title": "", "text": "8. Errors and ExceptionsÂ¶\nUntil now error messages havenât been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.\n8.1. Syntax ErrorsÂ¶\nSyntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:\n>>> while True print('Hello world')\nFile \"<stdin>\", line 1\nwhile True print('Hello world')\n^^^^^\nSyntaxError: invalid syntax\nThe parser repeats the offending line and displays little arrows pointing\nat the place where the error was detected. Note that this is not always the\nplace that needs to be fixed. In the example, the error is detected at the\nfunction print()\n, since a colon (':'\n) is missing just before it.\nThe file name (<stdin>\nin our example) and line number are printed so you\nknow where to look in case the input came from a file.\n8.2. ExceptionsÂ¶\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:\n>>> 10 * (1/0)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n10 * (1/0)\n~^~\nZeroDivisionError: division by zero\n>>> 4 + spam*3\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n4 + spam*3\n^^^^\nNameError: name 'spam' is not defined\n>>> '2' + 2\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n'2' + 2\n~~~~^~~\nTypeError: can only concatenate str (not \"int\") to str\nThe last line of the error message indicates what happened. Exceptions come in\ndifferent types, and the type is printed as part of the message: the types in\nthe example are ZeroDivisionError\n, NameError\nand TypeError\n.\nThe string printed "}
{"url": "https://docs.python.org/3/tutorial/interpreter.html", "title": "", "text": "2. Using the Python InterpreterÂ¶\n2.1. Invoking the InterpreterÂ¶\nThe Python interpreter is usually installed as /usr/local/bin/python3.13\non those machines where it is available; putting /usr/local/bin\nin your\nUnix shellâs search path makes it possible to start it by typing the command:\npython3.13\nto the shell. [1] Since the choice of the directory where the interpreter lives\nis an installation option, other places are possible; check with your local\nPython guru or system administrator. (E.g., /usr/local/python\nis a\npopular alternative location.)\nOn Windows machines where you have installed Python from the Microsoft Store, the python3.13\ncommand will be available. If you have\nthe py.exe launcher installed, you can use the py\ncommand. See Excursus: Setting environment variables for other ways to launch Python.\nTyping an end-of-file character (Control-D on Unix, Control-Z on\nWindows) at the primary prompt causes the interpreter to exit with a zero exit\nstatus. If that doesnât work, you can exit the interpreter by typing the\nfollowing command: quit()\n.\nThe interpreterâs line-editing features include interactive editing, history\nsubstitution and code completion on systems that support the GNU Readline library.\nPerhaps the quickest check to see whether command line editing is supported is\ntyping Control-P to the first Python prompt you get. If it beeps, you\nhave command line editing; see Appendix Interactive Input Editing and History Substitution for an\nintroduction to the keys. If nothing appears to happen, or if ^P\nis\nechoed, command line editing isnât available; youâll only be able to use\nbackspace to remove characters from the current line.\nThe interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.\nA second way of starting the interpreter is python -"}
{"url": "https://docs.python.org/3/tutorial/appetite.html", "title": "", "text": "1. Whetting Your AppetiteÂ¶\nIf you do much work on computers, eventually you find that thereâs some task youâd like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps youâd like to write a small custom database, or a specialized GUI application, or a simple game.\nIf youâre a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow. Perhaps youâre writing a test suite for such a library and find writing the testing code a tedious task. Or maybe youâve written a program that could use an extension language, and you donât want to design and implement a whole new language for your application.\nPython is just the language for you.\nYou could write a Unix shell script or Windows batch files for some of these tasks, but shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a first-draft program. Python is simpler to use, available on Windows, macOS, and Unix operating systems, and will help you get the job done more quickly.\nPython is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer. On the other hand, Python also offers much more error checking than C, and, being a very-high-level language, it has high-level data types built in, such as flexible arrays and dictionaries. Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages.\nPython allows you to split your program into modules that can be reused in other Python programs. It comes with a large collection of stand"}
{"url": "https://docs.python.org/3/c-api/index.html", "title": "", "text": "Python/C API Reference ManualÂ¶\nThis manual documents the API used by C and C++ programmers who want to write extension modules or embed Python. It is a companion to Extending and Embedding the Python Interpreter, which describes the general principles of extension writing but does not document the API functions in detail.\n- Introduction\n- C API Stability\n- The Very High Level Layer\n- Reference Counting\n- Exception Handling\n- Utilities\n- Abstract Objects Layer\n- Concrete Objects Layer\n- Initialization, Finalization, and Threads\n- Before Python Initialization\n- Global configuration variables\n- Initializing and finalizing the interpreter\n- Process-wide parameters\n- Thread State and the Global Interpreter Lock\n- Sub-interpreter support\n- Asynchronous Notifications\n- Profiling and Tracing\n- Reference tracing\n- Advanced Debugger Support\n- Thread Local Storage Support\n- Synchronization Primitives\n- Python Initialization Configuration\n- Memory Management\n- Object Implementation Support\n- API and ABI Versioning\n- Monitoring C API\n- Generating Execution Events"}
{"url": "https://docs.python.org/3/tutorial/controlflow.html", "title": "", "text": "4. More Control Flow ToolsÂ¶\nAs well as the while\nstatement just introduced, Python uses a few more\nthat we will encounter in this chapter.\n4.1. if\nStatementsÂ¶\nPerhaps the most well-known statement type is the if\nstatement. For\nexample:\n>>> x = int(input(\"Please enter an integer: \"))\nPlease enter an integer: 42\n>>> if x < 0:\n... x = 0\n... print('Negative changed to zero')\n... elif x == 0:\n... print('Zero')\n... elif x == 1:\n... print('Single')\n... else:\n... print('More')\n...\nMore\nThere can be zero or more elif\nparts, and the else\npart is\noptional. The keyword âelif\nâ is short for âelse ifâ, and is useful\nto avoid excessive indentation. An if\nâ¦ elif\nâ¦\nelif\nâ¦ sequence is a substitute for the switch\nor\ncase\nstatements found in other languages.\nIf youâre comparing the same value to several constants, or checking for specific types or\nattributes, you may also find the match\nstatement useful. For more\ndetails see match Statements.\n4.2. for\nStatementsÂ¶\nThe for\nstatement in Python differs a bit from what you may be used\nto in C or Pascal. Rather than always iterating over an arithmetic progression\nof numbers (like in Pascal), or giving the user the ability to define both the\niteration step and halting condition (as C), Pythonâs for\nstatement\niterates over the items of any sequence (a list or a string), in the order that\nthey appear in the sequence. For example (no pun intended):\n>>> # Measure some strings:\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words:\n... print(w, len(w))\n...\ncat 3\nwindow 6\ndefenestrate 12\nCode that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:\n# Create a sample collection\nusers = {'Hans': 'active', 'ÃlÃ©onore': 'inactive', 'æ¯å¤ªé': 'active'}\n# Strategy: Iterate over a copy\nfor user, status in users.copy().items():\nif status == 'inactive':\ndel users[user]\n# Strategy: Create a"}
{"url": "https://docs.python.org/3/tutorial/stdlib2.html", "title": "", "text": "11. Brief Tour of the Standard Library â Part IIÂ¶\nThis second tour covers more advanced modules that support professional programming needs. These modules rarely occur in small scripts.\n11.1. Output FormattingÂ¶\nThe reprlib\nmodule provides a version of repr()\ncustomized for\nabbreviated displays of large or deeply nested containers:\n>>> import reprlib\n>>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"\nThe pprint\nmodule offers more sophisticated control over printing both\nbuilt-in and user defined objects in a way that is readable by the interpreter.\nWhen the result is longer than one line, the âpretty printerâ adds line breaks\nand indentation to more clearly reveal data structure:\n>>> import pprint\n>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n... 'yellow'], 'blue']]]\n...\n>>> pprint.pprint(t, width=30)\n[[[['black', 'cyan'],\n'white',\n['green', 'red']],\n[['magenta', 'yellow'],\n'blue']]]\nThe textwrap\nmodule formats paragraphs of text to fit a given screen\nwidth:\n>>> import textwrap\n>>> doc = \"\"\"The wrap() method is just like fill() except that it returns\n... a list of strings instead of one big string with newlines to separate\n... the wrapped lines.\"\"\"\n...\n>>> print(textwrap.fill(doc, width=40))\nThe wrap() method is just like fill()\nexcept that it returns a list of strings\ninstead of one big string with newlines\nto separate the wrapped lines.\nThe locale\nmodule accesses a database of culture specific data formats.\nThe grouping attribute of localeâs format function provides a direct way of\nformatting numbers with group separators:\n>>> import locale\n>>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n'English_United States.1252'\n>>> conv = locale.localeconv() # get a mapping of conventions\n>>> x = 1234567.8\n>>> locale.format_string(\"%d\", x, grouping=True)\n'1,234,567'\n>>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n... conv['frac_digits'], x), grouping=True)\n'$1,234,567.80'\n1"}
{"url": "https://docs.python.org/3/genindex.html", "title": "", "text": "Index pages by letter:\nSymbols | _ | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z\nFull index on one page (can be huge)"}
{"url": "https://docs.python.org/3/tutorial/modules.html", "title": "", "text": "6. ModulesÂ¶\nIf you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that youâve written in several programs without copying its definition into each program.\nTo support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).\nA module is a file containing Python definitions and statements. The file name\nis the module name with the suffix .py\nappended. Within a module, the\nmoduleâs name (as a string) is available as the value of the global variable\n__name__\n. For instance, use your favorite text editor to create a file\ncalled fibo.py\nin the current directory with the following contents:\n# Fibonacci numbers module\ndef fib(n):\n\"\"\"Write Fibonacci series up to n.\"\"\"\na, b = 0, 1\nwhile a < n:\nprint(a, end=' ')\na, b = b, a+b\nprint()\ndef fib2(n):\n\"\"\"Return Fibonacci series up to n.\"\"\"\nresult = []\na, b = 0, 1\nwhile a < n:\nresult.append(a)\na, b = b, a+b\nreturn result\nNow enter the Python interpreter and import this module with the following command:\n>>> import fibo\nThis does not add the names of the functions defined in fibo\ndirectly to\nthe current namespace (see Python Scopes and Namespaces for more details);\nit only adds the module name fibo\nthere. Using\nthe module name you can access the functions:\n>>> fibo.fib(1000)\n0 1 1 2 3 5 8 13 21 34 55 89 144 23"}
{"url": "https://docs.python.org/3/tutorial/appendix.html", "title": "", "text": "16. AppendixÂ¶\n16.1. Interactive ModeÂ¶\nThere are two variants of the interactive REPL. The classic basic interpreter is supported on all platforms with minimal line control capabilities.\nOn Windows, or Unix-like systems with curses\nsupport,\na new interactive shell is used by default since Python 3.13.\nThis one supports color, multiline editing, history browsing, and\npaste mode. To disable color, see Controlling color for\ndetails. Function keys provide some additional functionality.\nF1 enters the interactive help browser pydoc\n.\nF2 allows for browsing command-line history with neither output nor the\n>>> and â¦ prompts. F3 enters âpaste modeâ, which\nmakes pasting larger blocks of code easier. Press F3 to return to\nthe regular prompt.\nWhen using the new interactive shell, exit the shell by typing exit or quit. Adding call parentheses after those commands is not required.\nIf the new interactive shell is not desired, it can be disabled via\nthe PYTHON_BASIC_REPL\nenvironment variable.\n16.1.1. Error HandlingÂ¶\nWhen an error occurs, the interpreter prints an error message and a stack trace.\nIn interactive mode, it then returns to the primary prompt; when input came from\na file, it exits with a nonzero exit status after printing the stack trace.\n(Exceptions handled by an except\nclause in a try\nstatement\nare not errors in this context.) Some errors are unconditionally fatal and\ncause an exit with a nonzero exit status; this applies to internal inconsistencies and\nsome cases of running out of memory. All error messages are written to the\nstandard error stream; normal output from executed commands is written to\nstandard output.\nTyping the interrupt character (usually Control-C or Delete) to the primary or\nsecondary prompt cancels the input and returns to the primary prompt. [1]\nTyping an interrupt while a command is executing raises the\nKeyboardInterrupt\nexception, which may be handled by a try\nstatement.\n16.1.2. Executable Python ScriptsÂ¶\nOn BSDâish Unix systems, Python scrip"}
{"url": "https://docs.python.org/3/tutorial/introduction.html", "title": "", "text": "3. An Informal Introduction to PythonÂ¶\nIn the following examples, input and output are distinguished by the presence or absence of prompts (>>> and â¦): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.\nYou can use the âCopyâ button (it appears in the upper-right corner when hovering over or tapping a code example), which strips prompts and omits output, to copy and paste the input lines into your interpreter.\nMany of the examples in this manual, even those entered at the interactive\nprompt, include comments. Comments in Python start with the hash character,\n#\n, and extend to the end of the physical line. A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral. A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.\nSome examples:\n# this is the first comment\nspam = 1 # and this is the second comment\n# ... and now a third!\ntext = \"# This is not a comment because it's inside quotes.\"\n3.1. Using Python as a CalculatorÂ¶\nLetâs try some simple Python commands. Start the interpreter and wait for the\nprimary prompt, >>>\n. (It shouldnât take long.)\n3.1.1. NumbersÂ¶\nThe interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value. Expression syntax is straightforward: the\noperators +\n, -\n, *\nand /\ncan be used to perform\narithmetic; parentheses (()\n) can be used for grouping.\nFor example:\n>>> 2 + 2\n4\n>>> 50 - 5*6\n20\n>>> (50 - 5*6) / 4\n5.0\n>>> 8 / 5 # division always returns a floating-point number\n1.6\nThe integer numbers (e.g. 2\n, 4\n, 20\n) have type int\n,\nthe ones with a fractional part (e.g. 5.0\n, 1.6\n) have typ"}
{"url": "https://docs.python.org/3/copyright.html", "title": "", "text": "CopyrightÂ¶\nPython and this documentation is:\nCopyright Â© 2001-2024 Python Software Foundation. All rights reserved.\nCopyright Â© 2000 BeOpen.com. All rights reserved.\nCopyright Â© 1995-2000 Corporation for National Research Initiatives. All rights reserved.\nCopyright Â© 1991-1995 Stichting Mathematisch Centrum. All rights reserved.\nSee History and License for complete license and permissions information."}
{"url": "https://docs.python.org/3/tutorial/inputoutput.html", "title": "", "text": "7. Input and OutputÂ¶\nThere are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.\n7.1. Fancier Output FormattingÂ¶\nSo far weâve encountered two ways of writing values: expression statements and\nthe print()\nfunction. (A third way is using the write()\nmethod\nof file objects; the standard output file can be referenced as sys.stdout\n.\nSee the Library Reference for more information on this.)\nOften youâll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.\nTo use formatted string literals, begin a string with\nf\norF\nbefore the opening quotation mark or triple quotation mark. Inside this string, you can write a Python expression between{\nand}\ncharacters that can refer to variables or literal values.>>> year = 2016 >>> event = 'Referendum' >>> f'Results of the {year} {event}' 'Results of the 2016 Referendum'\nThe\nstr.format()\nmethod of strings requires more manual effort. Youâll still use{\nand}\nto mark where a variable will be substituted and can provide detailed formatting directives, but youâll also need to provide the information to be formatted. In the following code block there are two examples of how to format variables:>>> yes_votes = 42_572_654 >>> total_votes = 85_705_149 >>> percentage = yes_votes / total_votes >>> '{:-9} YES votes {:2.2%}'.format(yes_votes, percentage) ' 42572654 YES votes 49.67%'\nNotice how the\nyes_votes\nare padded with spaces and a negative sign only for negative numbers. The example also printspercentage\nmultiplied by 100, with 2 decimal places and followed by a percent sign (see Format Specification Mini-Language for details).Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operati"}
{"url": "https://docs.python.org/3/tutorial/whatnow.html", "title": "", "text": "13. What Now?Â¶\nReading this tutorial has probably reinforced your interest in using Python â you should be eager to apply Python to solving your real-world problems. Where should you go to learn more?\nThis tutorial is part of Pythonâs documentation set. Some other documents in the set are:\n-\nYou should browse through this manual, which gives complete (though terse) reference material about types, functions, and the modules in the standard library. The standard Python distribution includes a lot of additional code. There are modules to read Unix mailboxes, retrieve documents via HTTP, generate random numbers, parse command-line options, compress data, and many other tasks. Skimming through the Library Reference will give you an idea of whatâs available.\nInstalling Python Modules explains how to install additional modules written by other Python users.\nThe Python Language Reference: A detailed explanation of Pythonâs syntax and semantics. Itâs heavy reading, but is useful as a complete guide to the language itself.\nMore Python resources:\nhttps://www.python.org: The major Python web site. It contains code, documentation, and pointers to Python-related pages around the web.\nhttps://docs.python.org: Fast access to Pythonâs documentation.\nhttps://pypi.org: The Python Package Index, previously also nicknamed the Cheese Shop [1], is an index of user-created Python modules that are available for download. Once you begin releasing code, you can register it here so that others can find it.\nhttps://code.activestate.com/recipes/langs/python/: The Python Cookbook is a sizable collection of code examples, larger modules, and useful scripts. Particularly notable contributions are collected in a book also titled Python Cookbook (OâReilly & Associates, ISBN 0-596-00797-3.)\nhttps://pyvideo.org collects links to Python-related videos from conferences and user-group meetings.\nhttps://scipy.org: The Scientific Python project includes modules for fast array computations and manipulations"}
{"url": "https://docs.python.org/license.html", "title": "", "text": "History and LicenseÂ¶\nHistory of the softwareÂ¶\nPython was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Pythonâs principal author, although it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, see https://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF.\nAll Python releases are Open Source (see https://opensource.org for the Open Source Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases.\nRelease |\nDerived from |\nYear |\nOwner |\nGPL-compatible? (1) |\n|---|---|---|---|---|\n0.9.0 thru 1.2 |\nn/a |\n1991-1995 |\nCWI |\nyes |\n1.3 thru 1.5.2 |\n1.2 |\n1995-1999 |\nCNRI |\nyes |\n1.6 |\n1.5.2 |\n2000 |\nCNRI |\nno |\n2.0 |\n1.6 |\n2000 |\nBeOpen.com |\nno |\n1.6.1 |\n1.6 |\n2001 |\nCNRI |\nyes (2) |\n2.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nno |\n2.0.1 |\n2.0+1.6.1 |\n2001 |\nPSF |\nyes |\n2.1.1 |\n2.1+2.0.1 |\n2001 |\nPSF |\nyes |\n2.1.2 |\n2.1.1 |\n2002 |\nPSF |\nyes |\n2.1.3 |\n2.1.2 |\n2002 |\nPSF |\nyes |\n2.2 and above |\n2.1.1 |\n2001-now |\nPSF |\nyes |\nNote\nGPL-compatible doesnât mean that weâre distributing Python under the GPL. All Python licenses, unlike the GPL, let you distribute a modified version without making your changes open source. The GPL-compatible licenses make it possible to combine Python with ot"}
{"url": "https://docs.python.org/3/py-modindex.html", "title": "", "text": "Python Module Index\n_ |\na |\nb |\nc |\nd |\ne |\nf |\ng |\nh |\ni |\nj |\nk |\nl |\nm |\nn |\no |\np |\nq |\nr |\ns |\nt |\nu |\nv |\nw |\nx |\nz\n| _ | ||\n__future__ | Future statement definitions | |\n__main__ | The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``. | |\n_thread | Low-level threading API. | |\n_tkinter | A binary module that contains the low-level interface to Tcl/Tk. | |\n| a | ||\nabc | Abstract base classes according to :pep:`3119`. | |\naifc | Deprecated: Removed in 3.13. | |\nargparse | Command-line option and argument parsing library. | |\narray | Space efficient arrays of uniformly typed numeric values. | |\nast | Abstract Syntax Tree classes and manipulation. | |\nasynchat | Deprecated: Removed in 3.12. | |\nasyncio | Asynchronous I/O. | |\nasyncore | Deprecated: Removed in 3.12. | |\natexit | Register and execute cleanup functions. | |\naudioop | Deprecated: Removed in 3.13. | |\n| b | ||\nbase64 | RFC 4648: Base16, Base32, Base64 Data Encodings; Base85 and Ascii85 | |\nbdb | Debugger framework. | |\nbinascii | Tools for converting between binary and various ASCII-encoded binary representations. | |\nbisect | Array bisection algorithms for binary searching. | |\nbuiltins | The module that provides the built-in namespace. | |\nbz2 | Interfaces for bzip2 compression and decompression. | |\n| c | ||\ncalendar | Functions for working with calendars, including some emulation of the Unix cal program. | |\ncgi | Deprecated: Removed in 3.13. | |\ncgitb | Deprecated: Removed in 3.13. | |\nchunk | Deprecated: Removed in 3.13. | |\ncmath | Mathematical functions for complex numbers. | |\ncmd | Build line-oriented command interpreters. | |\ncode | Facilities to implement read-eval-print loops. | |\ncodecs | Encode and decode data and streams. | |\ncodeop | Compile (possibly incomplete) Python code. | |\ncollections | Container datatypes | |\ncollections.abc | Abstract base classes for containers | |\ncolorsys | Conversion functions b"}
{"url": "https://docs.python.org/3/glossary.html", "title": "", "text": "GlossaryÂ¶\n>>>\nÂ¶The default Python prompt of the interactive shell. Often seen for code examples which can be executed interactively in the interpreter.\n...\nÂ¶Can refer to:\nThe default Python prompt of the interactive shell when entering the code for an indented code block, when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or triple quotes), or after specifying a decorator.\nThe three dots form of the Ellipsis object.\n- abstract base classÂ¶\nAbstract base classes complement duck-typing by providing a way to define interfaces when other techniques like\nhasattr()\nwould be clumsy or subtly wrong (for example with magic methods). ABCs introduce virtual subclasses, which are classes that donât inherit from a class but are still recognized byisinstance()\nandissubclass()\n; see theabc\nmodule documentation. Python comes with many built-in ABCs for data structures (in thecollections.abc\nmodule), numbers (in thenumbers\nmodule), streams (in theio\nmodule), import finders and loaders (in theimportlib.abc\nmodule). You can create your own ABCs with theabc\nmodule.- annotationÂ¶\nA label associated with a variable, a class attribute or a function parameter or return value, used by convention as a type hint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the\n__annotations__\nspecial attribute of modules, classes, and functions, respectively.See variable annotation, function annotation, PEP 484 and PEP 526, which describe this functionality. Also see Annotations Best Practices for best practices on working with annotations.\n- argumentÂ¶\nA value passed to a function (or method) when calling the function. There are two kinds of argument:\nkeyword argument: an argument preceded by an identifier (e.g.\nname=\n) in a function call or passed as a value in a dictionary preceded by**\n. For example,3\nand5\nare both keyword arguments in the following call"}
{"url": "https://docs.python.org/3/extending/index.html", "title": "", "text": "Extending and Embedding the Python InterpreterÂ¶\nThis document describes how to write modules in C or C++ to extend the Python interpreter with new modules. Those modules can not only define new functions but also new object types and their methods. The document also describes how to embed the Python interpreter in another application, for use as an extension language. Finally, it shows how to compile and link extension modules so that they can be loaded dynamically (at run time) into the interpreter, if the underlying operating system supports this feature.\nThis document assumes basic knowledge about Python. For an informal introduction to the language, see The Python Tutorial. The Python Language Reference gives a more formal definition of the language. The Python Standard Library documents the existing object types, functions and modules (both built-in and written in Python) that give the language its wide application range.\nFor a detailed description of the whole Python/C API, see the separate Python/C API Reference Manual.\nRecommended third party toolsÂ¶\nThis guide only covers the basic tools for creating extensions provided as part of this version of CPython. Some third party tools offer both simpler and more sophisticated approaches to creating C and C++ extensions for Python.\nCreating extensions without third party toolsÂ¶\nThis section of the guide covers creating C and C++ extensions without assistance from third party tools. It is intended primarily for creators of those tools, rather than being a recommended way to create your own C extensions.\nSee also\nPEP 489 â Multi-phase extension module initialization\n- 1. Extending Python with C or C++\n- 1.1. A Simple Example\n- 1.2. Intermezzo: Errors and Exceptions\n- 1.3. Back to the Example\n- 1.4. The Moduleâs Method Table and Initialization Function\n- 1.5. Compilation and Linkage\n- 1.6. Calling Python Functions from C\n- 1.7. Extracting Parameters in Extension Functions\n- 1.8. Keyword Parameters for Extension Func"}
{"url": "https://docs.python.org/3/bugs.html", "title": "", "text": "Dealing with BugsÂ¶\nPython is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how to contribute.\nDocumentation bugsÂ¶\nIf you find a bug in this documentation or would like to propose an improvement, please submit a bug report on the tracker. If you have a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our Documentation Discourse forum.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on the python-doc-theme bug tracker.\nIf youâre short on time, you can also email documentation bug reports to docs@python.org (behavioral bugs can be sent to python-list@python.org). âdocs@â is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.\nSee also\n- Documentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\n- Issue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\n- Helping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\n- Documentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue trackerÂ¶\nIssue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developersâ time, is that you learn what has been "}
{"url": "https://docs.python.org/3/whatsnew/changelog.html", "title": "", "text": "ChangelogÂ¶\nPython nextÂ¶\nRelease date: XXXX-XX-XX\nWindowsÂ¶\ngh-138896: Fix error installing C runtime on non-updated Windows machines\nTools/DemosÂ¶\ngh-139330: SBOM generation tool didnât cross-check the version and checksum values against the\nModules/expat/refresh.sh\nscript, leading to the values becoming out-of-date during routine updates.gh-137873: The iOS test runner has been simplified, resolving some issues that have been observed using the runner in GitHub Actions and Azure Pipelines test environments.\nTestsÂ¶\ngh-139208: Fix regrtest\n--fast-ci --verbose\n: donât ignore the--verbose\noption anymore. Patch by Victor Stinner.\nSecurityÂ¶\ngh-135661: Fix CDATA section parsing in\nhtml.parser.HTMLParser\naccording to the HTML5 standard:] ]>\nand]] >\nno longer end the CDATA section. Add private method_set_support_cdata()\nwhich can be used to specify how to parse<[CDATA[\nâ as a CDATA section in foreign content (SVG or MathML) or as a bogus comment in the HTML namespace.\nLibraryÂ¶\ngh-139312: Upgrade bundled libexpat to 2.7.3\ngh-139289: Do a real lazy-import on\nrlcompleter\ninpdb\nand restore the existing completer after importingrlcompleter\n.gh-139210: Fix use-after-free when reporting unknown event in\nxml.etree.ElementTree.iterparse()\n. Patch by Ken Jin.gh-138860: Lazy import\nrlcompleter\ninpdb\nto avoid deadlock in subprocess.gh-112729: Fix crash when calling\n_interpreters.create\nwhen the process is out of memory.gh-139076: Fix a bug in the\npydoc\nmodule that was hiding functions in a Python module if they were implemented in an extension module and the module did not have__all__\n.gh-138998: Update bundled libexpat to 2.7.2\ngh-130567: Fix possible crash in\nlocale.strxfrm()\ndue to a platform bug on macOS.gh-138779: Support device numbers larger than\n2**63-1\nfor thest_rdev\nfield of theos.stat_result\nstructure.gh-128636: Fix crash in PyREPL when os.environ is overwritten with an invalid value for mac\ngh-88375: Fix normalization of the\nrobots.txt\nrules and URLs in theurllib.robotp"}
{"url": "https://docs.python.org/bugs.html", "title": "", "text": "Dealing with BugsÂ¶\nPython is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how to contribute.\nDocumentation bugsÂ¶\nIf you find a bug in this documentation or would like to propose an improvement, please submit a bug report on the tracker. If you have a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our Documentation Discourse forum.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on the python-doc-theme bug tracker.\nIf youâre short on time, you can also email documentation bug reports to docs@python.org (behavioral bugs can be sent to python-list@python.org). âdocs@â is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.\nSee also\n- Documentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\n- Issue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\n- Helping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\n- Documentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue trackerÂ¶\nIssue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developersâ time, is that you learn what has been "}
{"url": "https://docs.python.org/3/index.html", "title": "", "text": "Python 3.13.7 documentation\nWelcome! This is the official documentation for Python 3.13.7.\nDocumentation sections:\n|\nWhat's new in Python 3.13?\nOr all \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n|\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\n|\nIndices, glossary, and search:\n|\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n|\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n|\nProject information:"}
{"url": "https://docs.python.org/3/reference/index.html", "title": "", "text": "The Python Language ReferenceÂ¶\nThis reference manual describes the syntax and âcore semanticsâ of the language. It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the built-in functions and modules are described in The Python Standard Library. For an informal introduction to the language, see The Python Tutorial. For C or C++ programmers, two additional manuals exist: Extending and Embedding the Python Interpreter describes the high-level picture of how to write a Python extension module, and the Python/C API Reference Manual describes the interfaces available to C/C++ programmers in detail.\n- 1. Introduction\n- 2. Lexical analysis\n- 3. Data model\n- 4. Execution model\n- 5. The import system\n- 6. Expressions\n- 6.1. Arithmetic conversions\n- 6.2. Atoms\n- 6.3. Primaries\n- 6.4. Await expression\n- 6.5. The power operator\n- 6.6. Unary arithmetic and bitwise operations\n- 6.7. Binary arithmetic operations\n- 6.8. Shifting operations\n- 6.9. Binary bitwise operations\n- 6.10. Comparisons\n- 6.11. Boolean operations\n- 6.12. Assignment expressions\n- 6.13. Conditional expressions\n- 6.14. Lambdas\n- 6.15. Expression lists\n- 6.16. Evaluation order\n- 6.17. Operator precedence\n- 7. Simple statements\n- 7.1. Expression statements\n- 7.2. Assignment statements\n- 7.3. The\nassert\nstatement - 7.4. The\npass\nstatement - 7.5. The\ndel\nstatement - 7.6. The\nreturn\nstatement - 7.7. The\nyield\nstatement - 7.8. The\nraise\nstatement - 7.9. The\nbreak\nstatement - 7.10. The\ncontinue\nstatement - 7.11. The\nimport\nstatement - 7.12. The\nglobal\nstatement - 7.13. The\nnonlocal\nstatement - 7.14. The\ntype\nstatement\n- 8. Compound statements\n- 9. Top-level components\n- 10. Full Grammar specification"}
{"url": "https://docs.python.org/3/library/shutil.html", "title": "", "text": "shutil\nâ High-level file operationsÂ¶\nSource code: Lib/shutil.py\nThe shutil\nmodule offers a number of high-level operations on files and\ncollections of files. In particular, functions are provided which support file\ncopying and removal. For operations on individual files, see also the\nos\nmodule.\nWarning\nEven the higher-level file copying functions (shutil.copy()\n,\nshutil.copy2()\n) cannot copy all file metadata.\nOn POSIX platforms, this means that file owner and group are lost as well as ACLs. On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied.\nDirectory and files operationsÂ¶\n- shutil.copyfileobj(fsrc, fdst[, length])Â¶\nCopy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is the buffer size. In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied.\n- shutil.copyfile(src, dst, *, follow_symlinks=True)Â¶\nCopy the contents (no metadata) of the file named src to a file named dst and return dst in the most efficient way possible. src and dst are path-like objects or path names given as strings.\ndst must be the complete target file name; look at\ncopy()\nfor a copy that accepts a target directory path. If src and dst specify the same file,SameFileError\nis raised.The destination location must be writable; otherwise, an\nOSError\nexception will be raised. If dst already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function.If follow_symlinks is false and src is a symbolic link, a new symbolic link will"}
{"url": "https://docs.python.org/3/library/sys.monitoring.html", "title": "", "text": "sys.monitoring\nâ Execution event monitoringÂ¶\nAdded in version 3.12.\nNote\nsys.monitoring\nis a namespace within the sys\nmodule,\nnot an independent module, so there is no need to\nimport sys.monitoring\n, simply import sys\nand then use\nsys.monitoring\n.\nThis namespace provides access to the functions and constants necessary to activate and control event monitoring.\nAs programs execute, events occur that might be of interest to tools that\nmonitor execution. The sys.monitoring\nnamespace provides means to\nreceive callbacks when events of interest occur.\nThe monitoring API consists of three components:\nTool identifiersÂ¶\nA tool identifier is an integer and the associated name. Tool identifiers are used to discourage tools from interfering with each other and to allow multiple tools to operate at the same time. Currently tools are completely independent and cannot be used to monitor each other. This restriction may be lifted in the future.\nBefore registering or activating events, a tool should choose an identifier. Identifiers are integers in the range 0 to 5 inclusive.\nRegistering and using toolsÂ¶\n- sys.monitoring.use_tool_id(tool_id: int, name: str, /) None Â¶\nMust be called before tool_id can be used. tool_id must be in the range 0 to 5 inclusive. Raises a\nValueError\nif tool_id is in use.\n- sys.monitoring.free_tool_id(tool_id: int, /) None Â¶\nShould be called once a tool no longer requires tool_id.\nNote\nfree_tool_id()\nwill not disable global or local events associated\nwith tool_id, nor will it unregister any callback functions. This\nfunction is only intended to be used to notify the VM that the\nparticular tool_id is no longer in use.\n- sys.monitoring.get_tool(tool_id: int, /) str | None Â¶\nReturns the name of the tool if tool_id is in use, otherwise it returns\nNone\n. tool_id must be in the range 0 to 5 inclusive.\nAll IDs are treated the same by the VM with regard to events, but the following IDs are pre-defined to make co-operation of tools easier:\nsys.monitoring.DEBUGGER"}
{"url": "https://docs.python.org/3/library/concurrent.futures.html", "title": "", "text": "concurrent.futures\nâ Launching parallel tasksÂ¶\nAdded in version 3.2.\nSource code: Lib/concurrent/futures/thread.py and Lib/concurrent/futures/process.py\nThe concurrent.futures\nmodule provides a high-level interface for\nasynchronously executing callables.\nThe asynchronous execution can be performed with threads, using\nThreadPoolExecutor\n, or separate processes, using\nProcessPoolExecutor\n. Both implement the same interface, which is\ndefined by the abstract Executor\nclass.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nExecutor ObjectsÂ¶\n- class concurrent.futures.ExecutorÂ¶\nAn abstract class that provides methods to execute calls asynchronously. It should not be used directly, but through its concrete subclasses.\n- submit(fn, /, *args, **kwargs)Â¶\nSchedules the callable, fn, to be executed as\nfn(*args, **kwargs)\nand returns aFuture\nobject representing the execution of the callable.with ThreadPoolExecutor(max_workers=1) as executor: future = executor.submit(pow, 323, 1235) print(future.result())\n- map(fn, *iterables, timeout=None, chunksize=1)Â¶\nSimilar to\nmap(fn, *iterables)\nexcept:the iterables are collected immediately rather than lazily;\nfn is executed asynchronously and several calls to fn may be made concurrently.\nThe returned iterator raises a\nTimeoutError\nif__next__()\nis called and the result isnât available after timeout seconds from the original call toExecutor.map()\n. timeout can be an int or a float. If timeout is not specified orNone\n, there is no limit to the wait time.If a fn call raises an exception, then that exception will be raised when its value is retrieved from the iterator.\nWhen using\nProcessPoolExecutor\n, this method chops iterables into a number of chunks which it submits to the pool as separate tasks. The (approximate) size of these chunks can be specified by setting chunksize to a positive integer. For very long iterables, using a large value for chunksize"}
{"url": "https://docs.python.org/3/library/rlcompleter.html", "title": "", "text": "rlcompleter\nâ Completion function for GNU readlineÂ¶\nSource code: Lib/rlcompleter.py\nThe rlcompleter\nmodule defines a completion function suitable to be\npassed to set_completer()\nin the readline\nmodule.\nWhen this module is imported on a Unix platform with the readline\nmodule\navailable, an instance of the Completer\nclass is automatically created\nand its complete()\nmethod is set as the\nreadline completer. The method provides\ncompletion of valid Python identifiers and keywords.\nExample:\n>>> import rlcompleter\n>>> import readline\n>>> readline.parse_and_bind(\"tab: complete\")\n>>> readline. <TAB PRESSED>\nreadline.__doc__ readline.get_line_buffer( readline.read_init_file(\nreadline.__file__ readline.insert_text( readline.set_completer(\nreadline.__name__ readline.parse_and_bind(\n>>> readline.\nThe rlcompleter\nmodule is designed for use with Pythonâs\ninteractive mode. Unless Python is run with the\n-S\noption, the module is automatically imported and configured\n(see Readline configuration).\nOn platforms without readline\n, the Completer\nclass defined by\nthis module can still be used for custom purposes.\n- class rlcompleter.CompleterÂ¶\nCompleter objects have the following method:\n- complete(text, state)Â¶\nReturn the next possible completion for text.\nWhen called by the\nreadline\nmodule, this method is called successively withstate == 0, 1, 2, ...\nuntil the method returnsNone\n.If called for text that doesnât include a period character (\n'.'\n), it will complete from names currently defined in__main__\n,builtins\nand keywords (as defined by thekeyword\nmodule).If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to\n__getattr__()\n) up to the last part, and find matches for the rest via thedir()\nfunction. Any exception raised during the evaluation of the expression is caught, silenced andNone\nis returned."}
{"url": "https://docs.python.org/3/library/tkinter.ttk.html", "title": "", "text": "tkinter.ttk\nâ Tk themed widgetsÂ¶\nSource code: Lib/tkinter/ttk.py\nThe tkinter.ttk\nmodule provides access to the Tk themed widget set,\nintroduced in Tk 8.5. It provides additional benefits including anti-aliased font\nrendering under X11 and window transparency (requiring a composition\nwindow manager on X11).\nThe basic idea for tkinter.ttk\nis to separate, to the extent possible,\nthe code implementing a widgetâs behavior from the code implementing its\nappearance.\nSee also\n- Tk Widget Styling Support\nA document introducing theming support for Tk\nUsing TtkÂ¶\nTo start using Ttk, import its module:\nfrom tkinter import ttk\nTo override the basic Tk widgets, the import should follow the Tk import:\nfrom tkinter import *\nfrom tkinter.ttk import *\nThat code causes several tkinter.ttk\nwidgets (Button\n,\nCheckbutton\n, Entry\n, Frame\n, Label\n,\nLabelFrame\n, Menubutton\n, PanedWindow\n,\nRadiobutton\n, Scale\nand Scrollbar\n) to\nautomatically replace the Tk widgets.\nThis has the direct benefit of using the new widgets which gives a better\nlook and feel across platforms; however, the replacement widgets are not\ncompletely compatible. The main difference is that widget options such as\nâfgâ, âbgâ and others related to widget styling are no\nlonger present in Ttk widgets. Instead, use the ttk.Style\nclass\nfor improved styling effects.\nSee also\n- Converting existing applications to use Tile widgets\nA monograph (using Tcl terminology) about differences typically encountered when moving applications to use the new widgets.\nTtk WidgetsÂ¶\nTtk comes with 18 widgets, twelve of which already existed in tkinter:\nButton\n, Checkbutton\n, Entry\n, Frame\n,\nLabel\n, LabelFrame\n, Menubutton\n, PanedWindow\n,\nRadiobutton\n, Scale\n, Scrollbar\n, and Spinbox\n.\nThe other six are new: Combobox\n, Notebook\n,\nProgressbar\n, Separator\n, Sizegrip\nand\nTreeview\n. And all them are subclasses of Widget\n.\nUsing the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling"}
{"url": "https://docs.python.org/3/library/tk.html", "title": "", "text": "Graphical user interfaces with TkÂ¶\nTk/Tcl has long been an integral part of Python. It provides a robust and\nplatform independent windowing toolkit, that is available to Python programmers\nusing the tkinter\npackage, and its extension, the tkinter.ttk\nmodule.\nThe tkinter\npackage is a thin object-oriented layer on top of Tcl/Tk. To\nuse tkinter\n, you donât need to write Tcl code, but you will need to\nconsult the Tk documentation, and occasionally the Tcl documentation.\ntkinter\nis a set of wrappers that implement the Tk widgets as Python\nclasses.\ntkinter\nâs chief virtues are that it is fast, and that it usually comes\nbundled with Python. Although its standard documentation is weak, good\nmaterial is available, which includes: references, tutorials, a book and\nothers. tkinter\nis also famous for having an outdated look and feel,\nwhich has been vastly improved in Tk 8.5. Nevertheless, there are many other\nGUI libraries that you could be interested in. The Python wiki lists several\nalternative GUI frameworks and tools.\ntkinter\nâ Python interface to Tcl/Tktkinter.colorchooser\nâ Color choosing dialogtkinter.font\nâ Tkinter font wrapper- Tkinter Dialogs\ntkinter.messagebox\nâ Tkinter message promptstkinter.scrolledtext\nâ Scrolled Text Widgettkinter.dnd\nâ Drag and drop supporttkinter.ttk\nâ Tk themed widgets- IDLE â Python editor and shell\nturtle\nâ Turtle graphics- Introduction\n- Get started\n- Tutorial\n- How toâ¦\n- Turtle graphics reference\n- Methods of RawTurtle/Turtle and corresponding functions\n- Methods of TurtleScreen/Screen and corresponding functions\n- Public classes\n- Explanation\n- Help and configuration\nturtledemo\nâ Demo scripts- Changes since Python 2.6\n- Changes since Python 3.0"}
{"url": "https://docs.python.org/3/library/contextvars.html", "title": "", "text": "contextvars\nâ Context VariablesÂ¶\nThis module provides APIs to manage, store, and access context-local\nstate. The ContextVar\nclass is used to declare\nand work with Context Variables. The copy_context()\nfunction and the Context\nclass should be used to\nmanage the current context in asynchronous frameworks.\nContext managers that have state should use Context Variables\ninstead of threading.local()\nto prevent their state from\nbleeding to other code unexpectedly, when used in concurrent code.\nSee also PEP 567 for additional details.\nAdded in version 3.7.\nContext VariablesÂ¶\n- class contextvars.ContextVar(name[, *, default])Â¶\nThis class is used to declare a new Context Variable, e.g.:\nvar: ContextVar[int] = ContextVar('var', default=42)\nThe required name parameter is used for introspection and debug purposes.\nThe optional keyword-only default parameter is returned by\nContextVar.get()\nwhen no value for the variable is found in the current context.Important: Context Variables should be created at the top module level and never in closures.\nContext\nobjects hold strong references to context variables which prevents context variables from being properly garbage collected.- nameÂ¶\nThe name of the variable. This is a read-only property.\nAdded in version 3.7.1.\n- get([default])Â¶\nReturn a value for the context variable for the current context.\nIf there is no value for the variable in the current context, the method will:\nreturn the value of the default argument of the method, if provided; or\nreturn the default value for the context variable, if it was created with one; or\nraise a\nLookupError\n.\n- set(value)Â¶\nCall to set a new value for the context variable in the current context.\nThe required value argument is the new value for the context variable.\nReturns a\nToken\nobject that can be used to restore the variable to its previous value via theContextVar.reset()\nmethod.\n- reset(token)Â¶\nReset the context variable to the value it had before the\nContextVar.set()\nthat created the token"}
{"url": "https://docs.python.org/3/library/mimetypes.html", "title": "", "text": "mimetypes\nâ Map filenames to MIME typesÂ¶\nSource code: Lib/mimetypes.py\nThe mimetypes\nmodule converts between a filename or URL and the MIME type\nassociated with the filename extension. Conversions are provided from filename\nto MIME type and from MIME type to filename extension; encodings are not\nsupported for the latter conversion.\nThe module provides one class and a number of convenience functions. The functions are the normal interface to this module, but some applications may be interested in the class as well.\nThe functions described below provide the primary interface for this module. If\nthe module has not been initialized, they will call init()\nif they rely on\nthe information init()\nsets up.\n- mimetypes.guess_type(url, strict=True)Â¶\nGuess the type of a file based on its filename, path or URL, given by url. URL can be a string or a path-like object.\nThe return value is a tuple\n(type, encoding)\nwhere type isNone\nif the type canât be guessed (missing or unknown suffix) or a string of the form'type/subtype'\n, usable for a MIME content-type header.encoding is\nNone\nfor no encoding or the name of the program used to encode (e.g. compress or gzip). The encoding is suitable for use as a Content-Encoding header, not as a Content-Transfer-Encoding header. The mappings are table driven. Encoding suffixes are case sensitive; type suffixes are first tried case sensitively, then case insensitively.The optional strict argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA. When strict is\nTrue\n(the default), only the IANA types are supported; when strict isFalse\n, some additional non-standard but commonly used MIME types are also recognized.Changed in version 3.8: Added support for url being a path-like object.\nDeprecated since version 3.13: Passing a file path instead of URL is soft deprecated. Use\nguess_file_type()\nfor this.\n- mimetypes.guess_file_type(path, *, strict=True)Â¶\nGuess the type of a file ba"}
{"url": "https://docs.python.org/3/library/pyclbr.html", "title": "", "text": "pyclbr\nâ Python module browser supportÂ¶\nSource code: Lib/pyclbr.py\nThe pyclbr\nmodule provides limited information about the\nfunctions, classes, and methods defined in a Python-coded module. The\ninformation is sufficient to implement a module browser. The\ninformation is extracted from the Python source code rather than by\nimporting the module, so this module is safe to use with untrusted code.\nThis restriction makes it impossible to use this module with modules not\nimplemented in Python, including all standard and optional extension\nmodules.\n- pyclbr.readmodule(module, path=None)Â¶\nReturn a dictionary mapping module-level class names to class descriptors. If possible, descriptors for imported base classes are included. Parameter module is a string with the name of the module to read; it may be the name of a module within a package. If given, path is a sequence of directory paths prepended to\nsys.path\n, which is used to locate the module source code.This function is the original interface and is only kept for back compatibility. It returns a filtered version of the following.\n- pyclbr.readmodule_ex(module, path=None)Â¶\nReturn a dictionary-based tree containing a function or class descriptors for each function and class defined in the module with a\ndef\norclass\nstatement. The returned dictionary maps module-level function and class names to their descriptors. Nested objects are entered into the children dictionary of their parent. As with readmodule, module names the module to be read and path is prepended to sys.path. If the module being read is a package, the returned dictionary has a key'__path__'\nwhose value is a list containing the package search path.\nAdded in version 3.7: Descriptors for nested definitions. They are accessed through the new children attribute. Each has a new parent attribute.\nThe descriptors returned by these functions are instances of Function and Class classes. Users are not expected to create instances of these classes.\nFunction ObjectsÂ¶\n- c"}
{"url": "https://docs.python.org/3/library/audit_events.html", "title": "", "text": "Audit events tableÂ¶\nThis table contains all events raised by sys.audit()\nor\nPySys_Audit()\ncalls throughout the CPython runtime and the\nstandard library. These calls were added in 3.8 or later (see PEP 578).\nSee sys.addaudithook()\nand PySys_AddAuditHook()\nfor\ninformation on handling these events.\nCPython implementation detail: This table is generated from the CPython documentation, and may not represent events raised by other implementations. See your runtime specific documentation for actual events raised.\nAudit event |\nArguments |\nReferences |\n|---|---|---|\n_thread.start_new_thread |\n|\n|\narray.__new__ |\n|\n|\nbuiltins.breakpoint |\n|\n|\nbuiltins.id |\n|\n|\nbuiltins.input |\n|\n|\nbuiltins.input/result |\n|\n|\ncode.__new__ |\n|\n|\ncompile |\n|\n|\ncpython.PyInterpreterState_Clear |\n||\ncpython.PyInterpreterState_New |\n||\ncpython._PySys_ClearAuditHooks |\n||\ncpython.run_command |\n|\n|\ncpython.run_file |\n|\n|\ncpython.run_interactivehook |\n|\n|\ncpython.run_module |\n|\n|\ncpython.run_startup |\n|\n|\ncpython.run_stdin |\n||\nctypes.addressof |\n|\n|\nctypes.call_function |\n|\n|\nctypes.cdata |\n|\n|\nctypes.cdata/buffer |\n|\n|\nctypes.create_string_buffer |\n|\n|\nctypes.create_unicode_buffer |\n|\n|\nctypes.dlopen |\n|\n|\nctypes.dlsym |\n|\n|\nctypes.dlsym/handle |\n|\n|\nctypes.get_errno |\n||\nctypes.get_last_error |\n||\nctypes.set_errno |\n|\n|\nctypes.set_exception |\n|\n|\nctypes.set_last_error |\n|\n|\nctypes.string_at |\n|\n|\nctypes.wstring_at |\n|\n|\nensurepip.bootstrap |\n|\n|\nexec |\n|\n|\nfcntl.fcntl |\n|\n|\nfcntl.flock |\n|\n|\nfcntl.ioctl |\n|\n|\nfcntl.lockf |\n|\n|\nftplib.connect |\n|\n|\nftplib.sendcmd |\n|\n|\nfunction.__new__ |\n|\n|\ngc.get_objects |\n|\n|\ngc.get_referents |\n|\n|\ngc.get_referrers |\n|\n|\nglob.glob |\n|\n|\nglob.glob/2 |\n|\n|\nhttp.client.connect |\n|\n|\nhttp.client.send |\n|\n|\nimaplib.open |\n|\n|\nimaplib.send |\n|\n|\nimport |\n|\n|\nmarshal.dumps |\n|\n|\nmarshal.load |\n||\nmarshal.loads |\n|\n|\nmmap.__new__ |\n|\n|\nmsvcrt.get_osfhandle |\n|\n|\nmsvcrt.locking |\n|\n|\nmsvcrt.open_osfhandle |\n|\n|\nobject.__delattr__ |\n|\n|\nobject.__getattr__ |\n|\n|\nobject.__"}
{"url": "https://docs.python.org/3/library/posix.html", "title": "", "text": "posix\nâ The most common POSIX system callsÂ¶\nThis module provides access to operating system functionality that is standardized by the C Standard and the POSIX standard (a thinly disguised Unix interface).\nAvailability: Unix.\nDo not import this module directly. Instead, import the module os\n,\nwhich provides a portable version of this interface. On Unix, the os\nmodule provides a superset of the posix\ninterface. On non-Unix operating\nsystems the posix\nmodule is not available, but a subset is always\navailable through the os\ninterface. Once os\nis imported, there is\nno performance penalty in using it instead of posix\n. In addition,\nos\nprovides some additional functionality, such as automatically calling\nputenv()\nwhen an entry in os.environ\nis changed.\nErrors are reported as exceptions; the usual exceptions are given for type\nerrors, while errors reported by the system calls raise OSError\n.\nLarge File SupportÂ¶\nSeveral operating systems (including AIX and Solaris) provide support for files that are larger than 2 GiB from a C programming model where int and long are 32-bit values. This is typically accomplished by defining the relevant size and offset types as 64-bit values. Such files are sometimes referred to as large files.\nLarge file support is enabled in Python when the size of an off_t\nis\nlarger than a long and the long long is at least as large\nas an off_t\n.\nIt may be necessary to configure and compile Python with certain compiler flags\nto enable this mode. For example, with Solaris 2.6 and 2.7 you need to do\nsomething like:\nCFLAGS=\"`getconf LFS_CFLAGS`\" OPT=\"-g -O2 $CFLAGS\" \\\n./configure\nOn large-file-capable Linux systems, this might work:\nCFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT=\"-g -O2 $CFLAGS\" \\\n./configure\nNotable Module ContentsÂ¶\nIn addition to many functions described in the os\nmodule documentation,\nposix\ndefines the following data item:\n- posix.environÂ¶\nA dictionary representing the string environment at the time the interpreter was start"}
{"url": "https://docs.python.org/3/library/tkinter.scrolledtext.html", "title": "", "text": "tkinter.scrolledtext\nâ Scrolled Text WidgetÂ¶\nSource code: Lib/tkinter/scrolledtext.py\nThe tkinter.scrolledtext\nmodule provides a class of the same name which\nimplements a basic text widget which has a vertical scroll bar configured to do\nthe âright thing.â Using the ScrolledText\nclass is a lot easier than\nsetting up a text widget and scroll bar directly.\nThe text widget and scrollbar are packed together in a Frame\n, and the\nmethods of the Grid\nand Pack\ngeometry managers are acquired\nfrom the Frame\nobject. This allows the ScrolledText\nwidget to\nbe used directly to achieve most normal geometry management behavior.\nShould more specific control be necessary, the following attributes are available:"}
{"url": "https://docs.python.org/3/library/logging.html", "title": "", "text": "logging\nâ Logging facility for PythonÂ¶\nSource code: Lib/logging/__init__.py\nThis module defines functions and classes which implement a flexible event logging system for applications and libraries.\nThe key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules.\nHereâs a simple example of idiomatic usage:\n# myapp.py\nimport logging\nimport mylib\nlogger = logging.getLogger(__name__)\ndef main():\nlogging.basicConfig(filename='myapp.log', level=logging.INFO)\nlogger.info('Started')\nmylib.do_something()\nlogger.info('Finished')\nif __name__ == '__main__':\nmain()\n# mylib.py\nimport logging\nlogger = logging.getLogger(__name__)\ndef do_something():\nlogger.info('Doing something')\nIf you run myapp.py, you should see this in myapp.log:\nINFO:__main__:Started\nINFO:mylib:Doing something\nINFO:__main__:Finished\nThe key feature of this idiomatic usage is that the majority of code is simply\ncreating a module level logger with getLogger(__name__)\n, and using that\nlogger to do any needed logging. This is concise, while allowing downstream\ncode fine-grained control if needed. Logged messages to the module-level logger\nget forwarded to handlers of loggers in higher-level modules, all the way up to\nthe highest-level logger known as the root logger; this approach is known as\nhierarchical logging.\nFor logging to be useful, it needs to be configured: setting the levels and\ndestinations for each logger, potentially changing how specific modules log,\noften based on command-line arguments or application configuration. In most\ncases, like the one above, only the root logger needs to be so configured, since\nall the lower level loggers at module level eventually forward their messages to\nits handlers. basicConfig()\nprovides a quick way to configure\nthe root logger that handles many use cases.\nThe module provides a lot of functional"}
{"url": "https://docs.python.org/3/library/resource.html", "title": "", "text": "resource\nâ Resource usage informationÂ¶\nThis module provides basic mechanisms for measuring and controlling system resources utilized by a program.\nAvailability: Unix, not WASI.\nSymbolic constants are used to specify particular system resources and to request usage information about either the current process or its children.\nAn OSError\nis raised on syscall failure.\nResource LimitsÂ¶\nResources usage can be limited using the setrlimit()\nfunction described\nbelow. Each resource is controlled by a pair of limits: a soft limit and a hard\nlimit. The soft limit is the current limit, and may be lowered or raised by a\nprocess over time. The soft limit can never exceed the hard limit. The hard\nlimit can be lowered to any value greater than the soft limit, but not raised.\n(Only processes with the effective UID of the super-user can raise a hard\nlimit.)\nThe specific resources that can be limited are system dependent. They are described in the getrlimit(2) man page. The resources listed below are supported when the underlying operating system supports them; resources which cannot be checked or controlled by the operating system are not defined in this module for those platforms.\n- resource.RLIM_INFINITYÂ¶\nConstant used to represent the limit for an unlimited resource.\n- resource.getrlimit(resource)Â¶\nReturns a tuple\n(soft, hard)\nwith the current soft and hard limits of resource. RaisesValueError\nif an invalid resource is specified, orerror\nif the underlying system call fails unexpectedly.\n- resource.setrlimit(resource, limits)Â¶\nSets new limits of consumption of resource. The limits argument must be a tuple\n(soft, hard)\nof two integers describing the new limits. A value ofRLIM_INFINITY\ncan be used to request a limit that is unlimited.Raises\nValueError\nif an invalid resource is specified, if the new soft limit exceeds the hard limit, or if a process tries to raise its hard limit. Specifying a limit ofRLIM_INFINITY\nwhen the hard or system limit for that resource is not unlimited w"}
{"url": "https://docs.python.org/3/library/termios.html", "title": "", "text": "termios\nâ POSIX style tty controlÂ¶\nThis module provides an interface to the POSIX calls for tty I/O control. For a complete description of these calls, see termios(3) Unix manual page. It is only available for those Unix versions that support POSIX termios style tty I/O control configured during installation.\nAvailability: Unix.\nAll functions in this module take a file descriptor fd as their first\nargument. This can be an integer file descriptor, such as returned by\nsys.stdin.fileno()\n, or a file object, such as sys.stdin\nitself.\nThis module also defines all the constants needed to work with the functions provided here; these have the same name as their counterparts in C. Please refer to your system documentation for more information on using these terminal control interfaces.\nThe module defines the following functions:\n- termios.tcgetattr(fd)Â¶\nReturn a list containing the tty attributes for file descriptor fd, as follows:\n[iflag, oflag, cflag, lflag, ispeed, ospeed, cc]\nwhere cc is a list of the tty special characters (each a string of length 1, except the items with indicesVMIN\nandVTIME\n, which are integers when these fields are defined). The interpretation of the flags and the speeds as well as the indexing in the cc array must be done using the symbolic constants defined in thetermios\nmodule.\n- termios.tcsetattr(fd, when, attributes)Â¶\nSet the tty attributes for file descriptor fd from the attributes, which is a list like the one returned by\ntcgetattr()\n. The when argument determines when the attributes are changed:- termios.TCSANOWÂ¶\nChange attributes immediately.\n- termios.TCSADRAINÂ¶\nChange attributes after transmitting all queued output.\n- termios.TCSAFLUSHÂ¶\nChange attributes after transmitting all queued output and discarding all queued input.\n- termios.tcsendbreak(fd, duration)Â¶\nSend a break on file descriptor fd. A zero duration sends a break for 0.25â0.5 seconds; a nonzero duration has a system dependent meaning.\n- termios.tcdrain(fd)Â¶\nWait until al"}
{"url": "https://docs.python.org/3/library/statistics.html", "title": "", "text": "statistics\nâ Mathematical statistics functionsÂ¶\nAdded in version 3.4.\nSource code: Lib/statistics.py\nThis module provides functions for calculating mathematical statistics of\nnumeric (Real\n-valued) data.\nThe module is not intended to be a competitor to third-party libraries such as NumPy, SciPy, or proprietary full-featured statistics packages aimed at professional statisticians such as Minitab, SAS and Matlab. It is aimed at the level of graphing and scientific calculators.\nUnless explicitly noted, these functions support int\n,\nfloat\n, Decimal\nand Fraction\n.\nBehaviour with other types (whether in the numeric tower or not) is\ncurrently unsupported. Collections with a mix of types are also undefined\nand implementation-dependent. If your input data consists of mixed types,\nyou may be able to use map()\nto ensure a consistent result, for\nexample: map(float, input_data)\n.\nSome datasets use NaN\n(not a number) values to represent missing data.\nSince NaNs have unusual comparison semantics, they cause surprising or\nundefined behaviors in the statistics functions that sort data or that count\noccurrences. The functions affected are median()\n, median_low()\n,\nmedian_high()\n, median_grouped()\n, mode()\n, multimode()\n, and\nquantiles()\n. The NaN\nvalues should be stripped before calling these\nfunctions:\n>>> from statistics import median\n>>> from math import isnan\n>>> from itertools import filterfalse\n>>> data = [20.7, float('NaN'),19.2, 18.3, float('NaN'), 14.4]\n>>> sorted(data) # This has surprising behavior\n[20.7, nan, 14.4, 18.3, 19.2, nan]\n>>> median(data) # This result is unexpected\n16.35\n>>> sum(map(isnan, data)) # Number of missing values\n2\n>>> clean = list(filterfalse(isnan, data)) # Strip NaN values\n>>> clean\n[20.7, 19.2, 18.3, 14.4]\n>>> sorted(clean) # Sorting now works as expected\n[14.4, 18.3, 19.2, 20.7]\n>>> median(clean) # This result is now well defined\n18.75\nAverages and measures of central locationÂ¶\nThese functions calculate an average or typical value from a popula"}
{"url": "https://docs.python.org/3/library/stat.html", "title": "", "text": "stat\nâ Interpreting stat()\nresultsÂ¶\nSource code: Lib/stat.py\nThe stat\nmodule defines constants and functions for interpreting the\nresults of os.stat()\n, os.fstat()\nand os.lstat()\n(if they\nexist). For complete details about the stat()\n, fstat()\nand\nlstat()\ncalls, consult the documentation for your system.\nChanged in version 3.4: The stat module is backed by a C implementation.\nThe stat\nmodule defines the following functions to test for specific file\ntypes:\n- stat.S_ISDIR(mode)Â¶\nReturn non-zero if the mode is from a directory.\n- stat.S_ISCHR(mode)Â¶\nReturn non-zero if the mode is from a character special device file.\n- stat.S_ISBLK(mode)Â¶\nReturn non-zero if the mode is from a block special device file.\n- stat.S_ISREG(mode)Â¶\nReturn non-zero if the mode is from a regular file.\n- stat.S_ISFIFO(mode)Â¶\nReturn non-zero if the mode is from a FIFO (named pipe).\n- stat.S_ISLNK(mode)Â¶\nReturn non-zero if the mode is from a symbolic link.\n- stat.S_ISSOCK(mode)Â¶\nReturn non-zero if the mode is from a socket.\n- stat.S_ISDOOR(mode)Â¶\nReturn non-zero if the mode is from a door.\nAdded in version 3.4.\n- stat.S_ISPORT(mode)Â¶\nReturn non-zero if the mode is from an event port.\nAdded in version 3.4.\n- stat.S_ISWHT(mode)Â¶\nReturn non-zero if the mode is from a whiteout.\nAdded in version 3.4.\nTwo additional functions are defined for more general manipulation of the fileâs mode:\n- stat.S_IMODE(mode)Â¶\nReturn the portion of the fileâs mode that can be set by\nos.chmod()\nâthat is, the fileâs permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them).\n- stat.S_IFMT(mode)Â¶\nReturn the portion of the fileâs mode that describes the file type (used by the\nS_IS*()\nfunctions above).\nNormally, you would use the os.path.is*()\nfunctions for testing the type\nof a file; the functions here are useful when you are doing multiple tests of\nthe same file and wish to avoid the overhead of the stat()\nsystem call\nfor each test. These are also useful when checking "}
{"url": "https://docs.python.org/3/library/internet.html", "title": "", "text": "Internet Protocols and SupportÂ¶\nThe modules described in this chapter implement internet protocols and support\nfor related technology. They are all implemented in Python. Most of these\nmodules require the presence of the system-dependent module socket\n, which\nis currently supported on most popular platforms. Here is an overview:\nwebbrowser\nâ Convenient web-browser controllerwsgiref\nâ WSGI Utilities and Reference Implementationwsgiref.util\nâ WSGI environment utilitieswsgiref.headers\nâ WSGI response header toolswsgiref.simple_server\nâ a simple WSGI HTTP serverwsgiref.validate\nâ WSGI conformance checkerwsgiref.handlers\nâ server/gateway base classeswsgiref.types\nâ WSGI types for static type checking- Examples\nurllib\nâ URL handling modulesurllib.request\nâ Extensible library for opening URLs- Request Objects\n- OpenerDirector Objects\n- BaseHandler Objects\n- HTTPRedirectHandler Objects\n- HTTPCookieProcessor Objects\n- ProxyHandler Objects\n- HTTPPasswordMgr Objects\n- HTTPPasswordMgrWithPriorAuth Objects\n- AbstractBasicAuthHandler Objects\n- HTTPBasicAuthHandler Objects\n- ProxyBasicAuthHandler Objects\n- AbstractDigestAuthHandler Objects\n- HTTPDigestAuthHandler Objects\n- ProxyDigestAuthHandler Objects\n- HTTPHandler Objects\n- HTTPSHandler Objects\n- FileHandler Objects\n- DataHandler Objects\n- FTPHandler Objects\n- CacheFTPHandler Objects\n- UnknownHandler Objects\n- HTTPErrorProcessor Objects\n- Examples\n- Legacy interface\nurllib.request\nRestrictions\nurllib.response\nâ Response classes used by urlliburllib.parse\nâ Parse URLs into componentsurllib.error\nâ Exception classes raised by urllib.requesturllib.robotparser\nâ Parser for robots.txthttp\nâ HTTP moduleshttp.client\nâ HTTP protocol clientftplib\nâ FTP protocol clientpoplib\nâ POP3 protocol clientimaplib\nâ IMAP4 protocol clientsmtplib\nâ SMTP protocol clientuuid\nâ UUID objects according to RFC 4122socketserver\nâ A framework for network servershttp.server\nâ HTTP servershttp.cookies\nâ HTTP state managementhttp.cookiejar\nâ Cookie handling f"}
{"url": "https://docs.python.org/3/library/shelve.html", "title": "", "text": "shelve\nâ Python object persistenceÂ¶\nSource code: Lib/shelve.py\nA âshelfâ is a persistent, dictionary-like object. The difference with âdbmâ\ndatabases is that the values (not the keys!) in a shelf can be essentially\narbitrary Python objects â anything that the pickle\nmodule can handle.\nThis includes most class instances, recursive data types, and objects containing\nlots of shared sub-objects. The keys are ordinary strings.\n- shelve.open(filename, flag='c', protocol=None, writeback=False)Â¶\nOpen a persistent dictionary. The filename specified is the base filename for the underlying database. As a side-effect, an extension may be added to the filename and more than one file may be created. By default, the underlying database file is opened for reading and writing. The optional flag parameter has the same interpretation as the flag parameter of\ndbm.open()\n.By default, pickles created with\npickle.DEFAULT_PROTOCOL\nare used to serialize values. The version of the pickle protocol can be specified with the protocol parameter.Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written only when assigned to the shelf (see Example). If the optional writeback parameter is set to\nTrue\n, all entries accessed are also cached in memory, and written back onsync()\nandclose()\n; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).Changed in version 3.10:\npickle.DEFAULT_PROTOCOL\nis now used as the default pickle protocol.Changed in version 3.11: Accepts path-like object for filename.\nNote\nDo not rely on the shelf being closed automatically; always call\nclose()\nexplicitly when you donât need it any "}
{"url": "https://docs.python.org/3/library/datatypes.html", "title": "", "text": "Data TypesÂ¶\nThe modules described in this chapter provide a variety of specialized data types such as dates and times, fixed-type arrays, heap queues, double-ended queues, and enumerations.\nPython also provides some built-in data types, in particular,\ndict\n, list\n, set\nand frozenset\n, and\ntuple\n. The str\nclass is used to hold\nUnicode strings, and the bytes\nand bytearray\nclasses are used\nto hold binary data.\nThe following modules are documented in this chapter:\ndatetime\nâ Basic date and time typeszoneinfo\nâ IANA time zone supportcalendar\nâ General calendar-related functionscollections\nâ Container datatypescollections.abc\nâ Abstract Base Classes for Containersheapq\nâ Heap queue algorithmbisect\nâ Array bisection algorithmarray\nâ Efficient arrays of numeric valuesweakref\nâ Weak referencestypes\nâ Dynamic type creation and names for built-in typescopy\nâ Shallow and deep copy operationspprint\nâ Data pretty printerreprlib\nâ Alternaterepr()\nimplementationenum\nâ Support for enumerationsgraphlib\nâ Functionality to operate with graph-like structures"}
{"url": "https://docs.python.org/3/library/ipaddress.html", "title": "", "text": "ipaddress\nâ IPv4/IPv6 manipulation libraryÂ¶\nSource code: Lib/ipaddress.py\nipaddress\nprovides the capabilities to create, manipulate and\noperate on IPv4 and IPv6 addresses and networks.\nThe functions and classes in this module make it straightforward to handle various tasks related to IP addresses, including checking whether or not two hosts are on the same subnet, iterating over all hosts in a particular subnet, checking whether or not a string represents a valid IP address or network definition, and so on.\nThis is the full module API referenceâfor an overview and introduction, see An introduction to the ipaddress module.\nAdded in version 3.3.\nConvenience factory functionsÂ¶\nThe ipaddress\nmodule provides factory functions to conveniently create\nIP addresses, networks and interfaces:\n- ipaddress.ip_address(address)Â¶\nReturn an\nIPv4Address\norIPv6Address\nobject depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than2**32\nwill be considered to be IPv4 by default. AValueError\nis raised if address does not represent a valid IPv4 or IPv6 address.>>> ipaddress.ip_address('192.168.0.1') IPv4Address('192.168.0.1') >>> ipaddress.ip_address('2001:db8::') IPv6Address('2001:db8::')\n- ipaddress.ip_network(address, strict=True)Â¶\nReturn an\nIPv4Network\norIPv6Network\nobject depending on the IP address passed as argument. address is a string or integer representing the IP network. Either IPv4 or IPv6 networks may be supplied; integers less than2**32\nwill be considered to be IPv4 by default. strict is passed toIPv4Network\norIPv6Network\nconstructor. AValueError\nis raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.>>> ipaddress.ip_network('192.168.0.0/28') IPv4Network('192.168.0.0/28')\n- ipaddress.ip_interface(address)Â¶\nReturn an\nIPv4Interface\norIPv6Interface\nobject depending on the IP address passed as argument. address is a string or integer representing the IP address. Eith"}
{"url": "https://docs.python.org/3/library/pwd.html", "title": "", "text": "pwd\nâ The password databaseÂ¶\nThis module provides access to the Unix user account and password database. It is available on all Unix versions.\nAvailability: Unix, not WASI, not iOS.\nPassword database entries are reported as a tuple-like object, whose attributes\ncorrespond to the members of the passwd\nstructure (Attribute field below,\nsee <pwd.h>\n):\nIndex |\nAttribute |\nMeaning |\n|---|---|---|\n0 |\n|\nLogin name |\n1 |\n|\nOptional encrypted password |\n2 |\n|\nNumerical user ID |\n3 |\n|\nNumerical group ID |\n4 |\n|\nUser name or comment field |\n5 |\n|\nUser home directory |\n6 |\n|\nUser command interpreter |\nThe uid and gid items are integers, all others are strings. KeyError\nis\nraised if the entry asked for cannot be found.\nNote\nIn traditional Unix the field pw_passwd\nusually contains a password\nencrypted with a DES derived algorithm. However most\nmodern unices use a so-called shadow password system. On those unices the\npw_passwd field only contains an asterisk ('*'\n) or the letter 'x'\nwhere the encrypted password is stored in a file /etc/shadow\nwhich is\nnot world readable. Whether the pw_passwd field contains anything useful is\nsystem-dependent.\nIt defines the following items:\n- pwd.getpwuid(uid)Â¶\nReturn the password database entry for the given numeric user ID.\n- pwd.getpwnam(name)Â¶\nReturn the password database entry for the given user name.\n- pwd.getpwall()Â¶\nReturn a list of all available password database entries, in arbitrary order.\nSee also\n- Module\ngrp\nAn interface to the group database, similar to this."}
{"url": "https://docs.python.org/3/library/superseded.html", "title": "", "text": "Superseded ModulesÂ¶\nThe modules described in this chapter have been superseded by other modules for most use cases, and are retained primarily to preserve backwards compatibility.\nModules may appear in this chapter because they only cover a limited subset of\na problem space, and a more generally applicable solution is available elsewhere\nin the standard library (for example, getopt\ncovers the very specific\ntask of âmimic the C getopt()\nAPI in Pythonâ, rather than the broader\ncommand line option parsing and argument parsing capabilities offered by\noptparse\nand argparse\n).\nAlternatively, modules may appear in this chapter because they are deprecated outright, and awaiting removal in a future release, or they are soft deprecated and their use is actively discouraged in new projects. With the removal of various obsolete modules through PEP 594, there are currently no modules in this latter category."}
{"url": "https://docs.python.org/3/library/tarfile.html", "title": "", "text": "tarfile\nâ Read and write tar archive filesÂ¶\nSource code: Lib/tarfile.py\nThe tarfile\nmodule makes it possible to read and write tar\narchives, including those using gzip, bz2 and lzma compression.\nUse the zipfile\nmodule to read or write .zip\nfiles, or the\nhigher-level functions in shutil.\nSome facts and figures:\nreads and writes\ngzip\n,bz2\nandlzma\ncompressed archives if the respective modules are available.read/write support for the POSIX.1-1988 (ustar) format.\nread/write support for the GNU tar format including longname and longlink extensions, read-only support for all variants of the sparse extension including restoration of sparse files.\nread/write support for the POSIX.1-2001 (pax) format.\nhandles directories, regular files, hardlinks, symbolic links, fifos, character devices and block devices and is able to acquire and restore file information like timestamp, access permissions and owner.\nChanged in version 3.3: Added support for lzma\ncompression.\nChanged in version 3.12: Archives are extracted using a filter, which makes it possible to either limit surprising/dangerous features, or to acknowledge that they are expected and the archive is fully trusted. By default, archives are fully trusted, but this default is deprecated and slated to change in Python 3.14.\n- tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)Â¶\nReturn a\nTarFile\nobject for the pathname name. For detailed information onTarFile\nobjects and the keyword arguments that are allowed, see TarFile Objects.mode has to be a string of the form\n'filemode[:compression]'\n, it defaults to'r'\n. Here is a full list of mode combinations:mode\naction\n'r'\nor'r:*'\nOpen for reading with transparent compression (recommended).\n'r:'\nOpen for reading exclusively without compression.\n'r:gz'\nOpen for reading with gzip compression.\n'r:bz2'\nOpen for reading with bzip2 compression.\n'r:xz'\nOpen for reading with lzma compression.\n'x'\nor'x:'\nCreate a tarfile exclusively without compression. Raise a\nFileExist"}
{"url": "https://docs.python.org/3/library/trace.html", "title": "", "text": "trace\nâ Trace or track Python statement executionÂ¶\nSource code: Lib/trace.py\nThe trace\nmodule allows you to trace program execution, generate\nannotated statement coverage listings, print caller/callee relationships and\nlist functions executed during a program run. It can be used in another program\nor from the command line.\nSee also\n- Coverage.py\nA popular third-party coverage tool that provides HTML output along with advanced features such as branch coverage.\nCommand-Line UsageÂ¶\nThe trace\nmodule can be invoked from the command line. It can be as\nsimple as\npython -m trace --count -C . somefile.py ...\nThe above will execute somefile.py\nand generate annotated listings of\nall Python modules imported during the execution into the current directory.\n- --helpÂ¶\nDisplay usage and exit.\n- --versionÂ¶\nDisplay the version of the module and exit.\nAdded in version 3.8: Added --module\noption that allows to run an executable module.\nMain optionsÂ¶\nAt least one of the following options must be specified when invoking\ntrace\n. The --listfuncs\noption is mutually exclusive with\nthe --trace\nand --count\noptions. When\n--listfuncs\nis provided, neither --count\nnor\n--trace\nare accepted, and vice versa.\n- -c, --countÂ¶\nProduce a set of annotated listing files upon program completion that shows how many times each statement was executed. See also\n--coverdir\n,--file\nand--no-report\nbelow.\n- -t, --traceÂ¶\nDisplay lines as they are executed.\n- -l, --listfuncsÂ¶\nDisplay the functions executed by running the program.\n- -r, --reportÂ¶\nProduce an annotated list from an earlier program run that used the\n--count\nand--file\noption. This does not execute any code.\n- -T, --trackcallsÂ¶\nDisplay the calling relationships exposed by running the program.\nModifiersÂ¶\n- -f, --file=<file>Â¶\nName of a file to accumulate counts over several tracing runs. Should be used with the\n--count\noption.\n- -C, --coverdir=<dir>Â¶\nDirectory where the report files go. The coverage report for\npackage.module\nis written to filedir"}
{"url": "https://docs.python.org/3/library/warnings.html", "title": "", "text": "warnings\nâ Warning controlÂ¶\nSource code: Lib/warnings.py\nWarning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesnât warrant raising an exception and terminating the program. For example, one might want to issue a warning when a program uses an obsolete module.\nPython programmers issue warnings by calling the warn()\nfunction defined\nin this module. (C programmers use PyErr_WarnEx()\n; see\nException Handling for details).\nWarning messages are normally written to sys.stderr\n, but their disposition\ncan be changed flexibly, from ignoring all warnings to turning them into\nexceptions. The disposition of warnings can vary based on the warning category, the text of the warning message, and the source location where it\nis issued. Repetitions of a particular warning for the same source location are\ntypically suppressed.\nThere are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook.\nThe determination whether to issue a warning message is controlled by the\nwarning filter, which is a sequence of matching rules and actions. Rules can be\nadded to the filter by calling filterwarnings()\nand reset to its default\nstate by calling resetwarnings()\n.\nThe printing of warning messages is done by calling showwarning()\n, which\nmay be overridden; the default implementation of this function formats the\nmessage by calling formatwarning()\n, which is also available for use by\ncustom implementations.\nSee also\nlogging.captureWarnings()\nallows you to handle all warnings with\nthe standard logging infrastructure.\nWarning CategoriesÂ¶\nThere are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.\nWhile these are technically built-in exceptions,"}
{"url": "https://docs.python.org/3/library/wsgiref.html", "title": "", "text": "wsgiref\nâ WSGI Utilities and Reference ImplementationÂ¶\nSource code: Lib/wsgiref\nThe Web Server Gateway Interface (WSGI) is a standard interface between web server software and web applications written in Python. Having a standard interface makes it easy to use an application that supports WSGI with a number of different web servers.\nOnly authors of web servers and programming frameworks need to know every detail and corner case of the WSGI design. You donât need to understand every detail of WSGI just to install a WSGI application or to write a web application using an existing framework.\nwsgiref\nis a reference implementation of the WSGI specification that can\nbe used to add WSGI support to a web server or framework. It provides utilities\nfor manipulating WSGI environment variables and response headers, base classes\nfor implementing WSGI servers, a demo HTTP server that serves WSGI applications,\ntypes for static type checking,\nand a validation tool that checks WSGI servers and applications for conformance\nto the WSGI specification (PEP 3333).\nSee wsgi.readthedocs.io for more information about WSGI, and links to tutorials and other resources.\nwsgiref.util\nâ WSGI environment utilitiesÂ¶\nThis module provides a variety of utility functions for working with WSGI\nenvironments. A WSGI environment is a dictionary containing HTTP request\nvariables as described in PEP 3333. All of the functions taking an environ\nparameter expect a WSGI-compliant dictionary to be supplied; please see\nPEP 3333 for a detailed specification and\nWSGIEnvironment\nfor a type alias that can be used\nin type annotations.\n- wsgiref.util.guess_scheme(environ)Â¶\nReturn a guess for whether\nwsgi.url_scheme\nshould be âhttpâ or âhttpsâ, by checking for aHTTPS\nenvironment variable in the environ dictionary. The return value is a string.This function is useful when creating a gateway that wraps CGI or a CGI-like protocol such as FastCGI. Typically, servers providing such protocols will include a\nHTTPS\nvariable "}
{"url": "https://docs.python.org/3/reference/grammar.html", "title": "", "text": "10. Full Grammar specificationÂ¶\nThis is the full Python grammar, derived directly from the grammar used to generate the CPython parser (see Grammar/python.gram). The version here omits details related to code generation and error recovery.\nThe notation is a mixture of EBNF\nand PEG.\nIn particular, &\nfollowed by a symbol, token or parenthesized\ngroup indicates a positive lookahead (i.e., is required to match but\nnot consumed), while !\nindicates a negative lookahead (i.e., is\nrequired not to match). We use the |\nseparator to mean PEGâs\nâordered choiceâ (written as /\nin traditional PEG grammars). See\nPEP 617 for more details on the grammarâs syntax.\n# PEG grammar for Python\n# ========================= START OF THE GRAMMAR =========================\n# General grammatical elements and rules:\n#\n# * Strings with double quotes (\") denote SOFT KEYWORDS\n# * Strings with single quotes (') denote KEYWORDS\n# * Upper case names (NAME) denote tokens in the Grammar/Tokens file\n# * Rule names starting with \"invalid_\" are used for specialized syntax errors\n# - These rules are NOT used in the first pass of the parser.\n# - Only if the first pass fails to parse, a second pass including the invalid\n# rules will be executed.\n# - If the parser fails in the second phase with a generic syntax error, the\n# location of the generic failure of the first pass will be used (this avoids\n# reporting incorrect locations due to the invalid rules).\n# - The order of the alternatives involving invalid rules matter\n# (like any rule in PEG).\n#\n# Grammar Syntax (see PEP 617 for more information):\n#\n# rule_name: expression\n# Optionally, a type can be included right after the rule name, which\n# specifies the return type of the C or Python function corresponding to the\n# rule:\n# rule_name[return_type]: expression\n# If the return type is omitted, then a void * is returned in C and an Any in\n# Python.\n# e1 e2\n# Match e1, then match e2.\n# e1 | e2\n# Match e1 or e2.\n# The first alternative can also appear on the lin"}
{"url": "https://docs.python.org/3/library/subprocess.html", "title": "", "text": "subprocess\nâ Subprocess managementÂ¶\nSource code: Lib/subprocess.py\nThe subprocess\nmodule allows you to spawn new processes, connect to their\ninput/output/error pipes, and obtain their return codes. This module intends to\nreplace several older modules and functions:\nos.system\nos.spawn*\nInformation about how the subprocess\nmodule can be used to replace these\nmodules and functions can be found in the following sections.\nSee also\nPEP 324 â PEP proposing the subprocess module\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nUsing the subprocess\nModuleÂ¶\nThe recommended approach to invoking subprocesses is to use the run()\nfunction for all use cases it can handle. For more advanced use cases, the\nunderlying Popen\ninterface can be used directly.\n- subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)Â¶\nRun the command described by args. Wait for command to complete, then return a\nCompletedProcess\ninstance.The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the use of keyword-only notation in the abbreviated signature). The full function signature is largely the same as that of the\nPopen\nconstructor - most of the arguments to this function are passed through to that interface. (timeout, input, check, and capture_output are not.)If capture_output is true, stdout and stderr will be captured. When used, the internal\nPopen\nobject is automatically created with stdout and stderr both set toPIPE\n. The stdout and stderr arguments may not be supplied at the same time as capture_output. If you wish to capture and combine both streams into one, set stdout toPIPE\nand stderr toSTDOUT\n, instead of using capture_output.A timeout may be specified in seconds, it is internally "}
{"url": "https://docs.python.org/3/library/http.cookiejar.html", "title": "", "text": "http.cookiejar\nâ Cookie handling for HTTP clientsÂ¶\nSource code: Lib/http/cookiejar.py\nThe http.cookiejar\nmodule defines classes for automatic handling of HTTP\ncookies. It is useful for accessing web sites that require small pieces of data\nâ cookies â to be set on the client machine by an HTTP response from a\nweb server, and then returned to the server in later HTTP requests.\nBoth the regular Netscape cookie protocol and the protocol defined by\nRFC 2965 are handled. RFC 2965 handling is switched off by default.\nRFC 2109 cookies are parsed as Netscape cookies and subsequently treated\neither as Netscape or RFC 2965 cookies according to the âpolicyâ in effect.\nNote that the great majority of cookies on the internet are Netscape cookies.\nhttp.cookiejar\nattempts to follow the de-facto Netscape cookie protocol (which\ndiffers substantially from that set out in the original Netscape specification),\nincluding taking note of the max-age\nand port\ncookie-attributes\nintroduced with RFC 2965.\nNote\nThe various named parameters found in Set-Cookie and\nSet-Cookie2 headers (eg. domain\nand expires\n) are\nconventionally referred to as attributes. To distinguish them from\nPython attributes, the documentation for this module uses the term\ncookie-attribute instead.\nThe module defines the following exception:\n- exception http.cookiejar.LoadErrorÂ¶\nInstances of\nFileCookieJar\nraise this exception on failure to load cookies from a file.LoadError\nis a subclass ofOSError\n.\nThe following classes are provided:\n- class http.cookiejar.CookieJar(policy=None)Â¶\npolicy is an object implementing the\nCookiePolicy\ninterface.The\nCookieJar\nclass stores HTTP cookies. It extracts cookies from HTTP requests, and returns them in HTTP responses.CookieJar\ninstances automatically expire contained cookies when necessary. Subclasses are also responsible for storing and retrieving cookies from a file or database.\n- class http.cookiejar.FileCookieJar(filename=None, delayload=None, policy=None)Â¶\npolicy is an object im"}
{"url": "https://docs.python.org/3/library/timeit.html", "title": "", "text": "timeit\nâ Measure execution time of small code snippetsÂ¶\nSource code: Lib/timeit.py\nThis module provides a simple way to time small bits of Python code. It has both a Command-Line Interface as well as a callable one. It avoids a number of common traps for measuring execution times. See also Tim Petersâ introduction to the âAlgorithmsâ chapter in the second edition of Python Cookbook, published by OâReilly.\nBasic ExamplesÂ¶\nThe following example shows how the Command-Line Interface can be used to compare three different expressions:\n$ python -m timeit \"'-'.join(str(n) for n in range(100))\"\n10000 loops, best of 5: 30.2 usec per loop\n$ python -m timeit \"'-'.join([str(n) for n in range(100)])\"\n10000 loops, best of 5: 27.5 usec per loop\n$ python -m timeit \"'-'.join(map(str, range(100)))\"\n10000 loops, best of 5: 23.2 usec per loop\nThis can be achieved from the Python Interface with:\n>>> import timeit\n>>> timeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)\n0.3018611848820001\n>>> timeit.timeit('\"-\".join([str(n) for n in range(100)])', number=10000)\n0.2727368790656328\n>>> timeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n0.23702679807320237\nA callable can also be passed from the Python Interface:\n>>> timeit.timeit(lambda: \"-\".join(map(str, range(100))), number=10000)\n0.19665591977536678\nNote however that timeit()\nwill automatically determine the number of\nrepetitions only when the command-line interface is used. In the\nExamples section you can find more advanced examples.\nPython InterfaceÂ¶\nThe module defines three convenience functions and a public class:\n- timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)Â¶\nCreate a\nTimer\ninstance with the given statement, setup code and timer function and run itstimeit()\nmethod with number executions. The optional globals argument specifies a namespace in which to execute the code.Changed in version 3.5: The optional globals parameter was added.\n- timeit.repeat(stmt='"}
{"url": "https://docs.python.org/3/library/ast.html", "title": "", "text": "ast\nâ Abstract Syntax TreesÂ¶\nSource code: Lib/ast.py\nThe ast\nmodule helps Python applications to process trees of the Python\nabstract syntax grammar. The abstract syntax itself might change with each\nPython release; this module helps to find out programmatically what the current\ngrammar looks like.\nAn abstract syntax tree can be generated by passing ast.PyCF_ONLY_AST\nas\na flag to the compile()\nbuilt-in function, or using the parse()\nhelper provided in this module. The result will be a tree of objects whose\nclasses all inherit from ast.AST\n. An abstract syntax tree can be\ncompiled into a Python code object using the built-in compile()\nfunction.\nAbstract GrammarÂ¶\nThe abstract grammar is currently defined as follows:\n-- ASDL's 4 builtin types are:\n-- identifier, int, string, constant\nmodule Python\n{\nmod = Module(stmt* body, type_ignore* type_ignores)\n| Interactive(stmt* body)\n| Expression(expr body)\n| FunctionType(expr* argtypes, expr returns)\nstmt = FunctionDef(identifier name, arguments args,\nstmt* body, expr* decorator_list, expr? returns,\nstring? type_comment, type_param* type_params)\n| AsyncFunctionDef(identifier name, arguments args,\nstmt* body, expr* decorator_list, expr? returns,\nstring? type_comment, type_param* type_params)\n| ClassDef(identifier name,\nexpr* bases,\nkeyword* keywords,\nstmt* body,\nexpr* decorator_list,\ntype_param* type_params)\n| Return(expr? value)\n| Delete(expr* targets)\n| Assign(expr* targets, expr value, string? type_comment)\n| TypeAlias(expr name, type_param* type_params, expr value)\n| AugAssign(expr target, operator op, expr value)\n-- 'simple' indicates that we annotate simple name without parens\n| AnnAssign(expr target, expr annotation, expr? value, int simple)\n-- use 'orelse' because else is a keyword in target languages\n| For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n| While(expr test, stmt* body, stmt* orelse)\n| If(expr tes"}
{"url": "https://docs.python.org/3/library/calendar.html", "title": "", "text": "calendar\nâ General calendar-related functionsÂ¶\nSource code: Lib/calendar.py\nThis module allows you to output calendars like the Unix cal program,\nand provides additional useful functions related to the calendar. By default,\nthese calendars have Monday as the first day of the week, and Sunday as the last\n(the European convention). Use setfirstweekday()\nto set the first day of\nthe week to Sunday (6) or to any other weekday. Parameters that specify dates\nare given as integers. For related\nfunctionality, see also the datetime\nand time\nmodules.\nThe functions and classes defined in this module use an idealized calendar, the current Gregorian calendar extended indefinitely in both directions. This matches the definition of the âproleptic Gregorianâ calendar in Dershowitz and Reingoldâs book âCalendrical Calculationsâ, where itâs the base calendar for all computations. Zero and negative years are interpreted as prescribed by the ISO 8601 standard. Year 0 is 1 BC, year -1 is 2 BC, and so on.\n- class calendar.Calendar(firstweekday=0)Â¶\nCreates a\nCalendar\nobject. firstweekday is an integer specifying the first day of the week.MONDAY\nis0\n(the default),SUNDAY\nis6\n.A\nCalendar\nobject provides several methods that can be used for preparing the calendar data for formatting. This class doesnât do any formatting itself. This is the job of subclasses.Calendar\ninstances have the following methods and attributes:- firstweekdayÂ¶\nThe first weekday as an integer (0â6).\nThis property can also be set and read using\nsetfirstweekday()\nandgetfirstweekday()\nrespectively.\n- getfirstweekday()Â¶\nReturn an\nint\nfor the current first weekday (0â6).Identical to reading the\nfirstweekday\nproperty.\n- setfirstweekday(firstweekday)Â¶\nSet the first weekday to firstweekday, passed as an\nint\n(0â6)Identical to setting the\nfirstweekday\nproperty.\n- iterweekdays()Â¶\nReturn an iterator for the week day numbers that will be used for one week. The first value from the iterator will be the same as the value of the\nfi"}
{"url": "https://docs.python.org/3/library/math.html", "title": "", "text": "math\nâ Mathematical functionsÂ¶\nThis module provides access to common mathematical functions and constants, including those defined by the C standard.\nThese functions cannot be used with complex numbers; use the functions of the\nsame name from the cmath\nmodule if you require support for complex\nnumbers. The distinction between functions which support complex numbers and\nthose which donât is made since most users do not want to learn quite as much\nmathematics as required to understand complex numbers. Receiving an exception\ninstead of a complex result allows earlier detection of the unexpected complex\nnumber used as a parameter, so that the programmer can determine how and why it\nwas generated in the first place.\nThe following functions are provided by this module. Except when explicitly noted otherwise, all return values are floats.\nNumber-theoretic functions |\n|\nNumber of ways to choose k items from n items without repetition and without order |\n|\nn factorial |\n|\nGreatest common divisor of the integer arguments |\n|\nInteger square root of a nonnegative integer n |\n|\nLeast common multiple of the integer arguments |\n|\nNumber of ways to choose k items from n items without repetition and with order |\n|\nFloating point arithmetic |\n|\nCeiling of x, the smallest integer greater than or equal to x |\n|\nAbsolute value of x |\n|\nFloor of x, the largest integer less than or equal to x |\n|\nFused multiply-add operation: |\n|\nRemainder of division |\n|\nFractional and integer parts of x |\n|\nRemainder of x with respect to y |\n|\nInteger part of x |\n|\nFloating point manipulation functions |\n|\nMagnitude (absolute value) of x with the sign of y |\n|\nMantissa and exponent of x |\n|\nCheck if the values a and b are close to each other |\n|\nCheck if x is neither an infinity nor a NaN |\n|\nCheck if x is a positive or negative infinity |\n|\nCheck if x is a NaN (not a number) |\n|\n|\n|\nFloating-point value steps steps after x towards y |\n|\nValue of the least significant bit of x |\n|\nPower, exponential an"}
{"url": "https://docs.python.org/3/library/binary.html", "title": "", "text": "Binary Data ServicesÂ¶\nThe modules described in this chapter provide some basic services operations for manipulation of binary data. Other operations on binary data, specifically in relation to file formats and network protocols, are described in the relevant sections.\nSome libraries described under Text Processing Services also work with either\nASCII-compatible binary formats (for example, re\n) or all binary data\n(for example, difflib\n).\nIn addition, see the documentation for Pythonâs built-in binary data types in Binary Sequence Types â bytes, bytearray, memoryview.\nstruct\nâ Interpret bytes as packed binary datacodecs\nâ Codec registry and base classes"}
{"url": "https://docs.python.org/3/library/markup.html", "title": "", "text": "Structured Markup Processing ToolsÂ¶\nPython supports a variety of modules to work with various forms of structured data markup. This includes modules to work with the Standard Generalized Markup Language (SGML) and the Hypertext Markup Language (HTML), and several interfaces for working with the Extensible Markup Language (XML).\nhtml\nâ HyperText Markup Language supporthtml.parser\nâ Simple HTML and XHTML parserhtml.entities\nâ Definitions of HTML general entities- XML Processing Modules\nxml.etree.ElementTree\nâ The ElementTree XML APIxml.dom\nâ The Document Object Model APIxml.dom.minidom\nâ Minimal DOM implementationxml.dom.pulldom\nâ Support for building partial DOM treesxml.sax\nâ Support for SAX2 parsersxml.sax.handler\nâ Base classes for SAX handlersxml.sax.saxutils\nâ SAX Utilitiesxml.sax.xmlreader\nâ Interface for XML parsersxml.parsers.expat\nâ Fast XML parsing using Expat"}
{"url": "https://docs.python.org/3/library/pydoc.html", "title": "", "text": "pydoc\nâ Documentation generator and online help systemÂ¶\nSource code: Lib/pydoc.py\nThe pydoc\nmodule automatically generates documentation from Python\nmodules. The documentation can be presented as pages of text on the console,\nserved to a web browser, or saved to HTML files.\nFor modules, classes, functions and methods, the displayed documentation is\nderived from the docstring (i.e. the __doc__\nattribute) of the object,\nand recursively of its documentable members. If there is no docstring,\npydoc\ntries to obtain a description from the block of comment lines just\nabove the definition of the class, function or method in the source file, or at\nthe top of the module (see inspect.getcomments()\n).\nThe built-in function help()\ninvokes the online help system in the\ninteractive interpreter, which uses pydoc\nto generate its documentation\nas text on the console. The same text documentation can also be viewed from\noutside the Python interpreter by running pydoc as a script at the\noperating systemâs command prompt. For example, running\npython -m pydoc sys\nat a shell prompt will display documentation on the sys\nmodule, in a\nstyle similar to the manual pages shown by the Unix man command. The\nargument to pydoc can be the name of a function, module, or package,\nor a dotted reference to a class, method, or function within a module or module\nin a package. If the argument to pydoc looks like a path (that is,\nit contains the path separator for your operating system, such as a slash in\nUnix), and refers to an existing Python source file, then documentation is\nproduced for that file.\nNote\nIn order to find objects and their documentation, pydoc\nimports the\nmodule(s) to be documented. Therefore, any code on module level will be\nexecuted on that occasion. Use an if __name__ == '__main__':\nguard to\nonly execute code when a file is invoked as a script and not just imported.\nWhen printing output to the console, pydoc attempts to paginate the\noutput for easier reading. If either the MANPAGER\nor t"}
{"url": "https://docs.python.org/3/library/faulthandler.html", "title": "", "text": "faulthandler\nâ Dump the Python tracebackÂ¶\nAdded in version 3.3.\nThis module contains functions to dump Python tracebacks explicitly, on a fault,\nafter a timeout, or on a user signal. Call faulthandler.enable()\nto\ninstall fault handlers for the SIGSEGV\n,\nSIGFPE\n, SIGABRT\n, SIGBUS\n, and\nSIGILL\nsignals. You can also\nenable them at startup by setting the PYTHONFAULTHANDLER\nenvironment\nvariable or by using the -X\nfaulthandler\ncommand line option.\nThe fault handler is compatible with system fault handlers like Apport or the\nWindows fault handler. The module uses an alternative stack for signal handlers\nif the sigaltstack()\nfunction is available. This allows it to dump the\ntraceback even on a stack overflow.\nThe fault handler is called on catastrophic cases and therefore can only use signal-safe functions (e.g. it cannot allocate memory on the heap). Because of this limitation traceback dumping is minimal compared to normal Python tracebacks:\nOnly ASCII is supported. The\nbackslashreplace\nerror handler is used on encoding.Each string is limited to 500 characters.\nOnly the filename, the function name and the line number are displayed. (no source code)\nIt is limited to 100 frames and 100 threads.\nThe order is reversed: the most recent call is shown first.\nBy default, the Python traceback is written to sys.stderr\n. To see\ntracebacks, applications must be run in the terminal. A log file can\nalternatively be passed to faulthandler.enable()\n.\nThe module is implemented in C, so tracebacks can be dumped on a crash or when Python is deadlocked.\nThe Python Development Mode calls faulthandler.enable()\nat Python startup.\nSee also\nDumping the tracebackÂ¶\n- faulthandler.dump_traceback(file=sys.stderr, all_threads=True)Â¶\nDump the tracebacks of all threads into file. If all_threads is\nFalse\n, dump only the current thread.See also\ntraceback.print_tb()\n, which can be used to print a traceback object.Changed in version 3.5: Added support for passing file descriptor to this function.\nFault h"}
{"url": "https://docs.python.org/3/library/urllib.robotparser.html", "title": "", "text": "urllib.robotparser\nâ Parser for robots.txtÂ¶\nSource code: Lib/urllib/robotparser.py\nThis module provides a single class, RobotFileParser\n, which answers\nquestions about whether or not a particular user agent can fetch a URL on the\nweb site that published the robots.txt\nfile. For more details on the\nstructure of robots.txt\nfiles, see http://www.robotstxt.org/orig.html.\n- class urllib.robotparser.RobotFileParser(url='')Â¶\nThis class provides methods to read, parse and answer questions about the\nrobots.txt\nfile at url.- set_url(url)Â¶\nSets the URL referring to a\nrobots.txt\nfile.\n- read()Â¶\nReads the\nrobots.txt\nURL and feeds it to the parser.\n- parse(lines)Â¶\nParses the lines argument.\n- can_fetch(useragent, url)Â¶\nReturns\nTrue\nif the useragent is allowed to fetch the url according to the rules contained in the parsedrobots.txt\nfile.\n- mtime()Â¶\nReturns the time the\nrobots.txt\nfile was last fetched. This is useful for long-running web spiders that need to check for newrobots.txt\nfiles periodically.\n- modified()Â¶\nSets the time the\nrobots.txt\nfile was last fetched to the current time.\n- crawl_delay(useragent)Â¶\nReturns the value of the\nCrawl-delay\nparameter fromrobots.txt\nfor the useragent in question. If there is no such parameter or it doesnât apply to the useragent specified or therobots.txt\nentry for this parameter has invalid syntax, returnNone\n.Added in version 3.6.\n- request_rate(useragent)Â¶\nReturns the contents of the\nRequest-rate\nparameter fromrobots.txt\nas a named tupleRequestRate(requests, seconds)\n. If there is no such parameter or it doesnât apply to the useragent specified or therobots.txt\nentry for this parameter has invalid syntax, returnNone\n.Added in version 3.6.\nThe following example demonstrates basic use of the RobotFileParser\nclass:\n>>> import urllib.robotparser\n>>> rp = urllib.robotparser.RobotFileParser()\n>>> rp.set_url(\"http://www.musi-cal.com/robots.txt\")\n>>> rp.read()\n>>> rrate = rp.request_rate(\"*\")\n>>> rrate.requests\n3\n>>> rrate.seconds\n20\n>"}
{"url": "https://docs.python.org/3/library/fnmatch.html", "title": "", "text": "fnmatch\nâ Unix filename pattern matchingÂ¶\nSource code: Lib/fnmatch.py\nThis module provides support for Unix shell-style wildcards, which are not the\nsame as regular expressions (which are documented in the re\nmodule). The\nspecial characters used in shell-style wildcards are:\nPattern |\nMeaning |\n|---|---|\n|\nmatches everything |\n|\nmatches any single character |\n|\nmatches any character in seq |\n|\nmatches any character not in seq |\nFor a literal match, wrap the meta-characters in brackets.\nFor example, '[?]'\nmatches the character '?'\n.\nNote that the filename separator ('/'\non Unix) is not special to this\nmodule. See module glob\nfor pathname expansion (glob\nuses\nfilter()\nto match pathname segments). Similarly, filenames starting with\na period are not special for this module, and are matched by the *\nand ?\npatterns.\nUnless stated otherwise, âfilename stringâ and âpattern stringâ either refer to\nstr\nor ISO-8859-1\nencoded bytes\nobjects. Note that the\nfunctions documented below do not allow to mix a bytes\npattern with\na str\nfilename, and vice-versa.\nFinally, note that functools.lru_cache()\nwith a maxsize of 32768\nis used to cache the (typed) compiled regex patterns in the following\nfunctions: fnmatch()\n, fnmatchcase()\n, filter()\n.\n- fnmatch.fnmatch(name, pat)Â¶\nTest whether the filename string name matches the pattern string pat, returning\nTrue\norFalse\n. Both parameters are case-normalized usingos.path.normcase()\n.fnmatchcase()\ncan be used to perform a case-sensitive comparison, regardless of whether thatâs standard for the operating system.This example will print all file names in the current directory with the extension\n.txt\n:import fnmatch import os for file in os.listdir('.'): if fnmatch.fnmatch(file, '*.txt'): print(file)\n- fnmatch.fnmatchcase(name, pat)Â¶\nTest whether the filename string name matches the pattern string pat, returning\nTrue\norFalse\n; the comparison is case-sensitive and does not applyos.path.normcase()\n.\n- fnmatch.filter(names, pat)Â¶\nConstruct a list f"}
{"url": "https://docs.python.org/3/library/pty.html", "title": "", "text": "pty\nâ Pseudo-terminal utilitiesÂ¶\nSource code: Lib/pty.py\nThe pty\nmodule defines operations for handling the pseudo-terminal\nconcept: starting another process and being able to write to and read from its\ncontrolling terminal programmatically.\nAvailability: Unix.\nPseudo-terminal handling is highly platform dependent. This code is mainly tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX platforms but itâs not been thoroughly tested).\nThe pty\nmodule defines the following functions:\n- pty.fork()Â¶\nFork. Connect the childâs controlling terminal to a pseudo-terminal. Return value is\n(pid, fd)\n. Note that the child gets pid 0, and the fd is invalid. The parentâs return value is the pid of the child, and fd is a file descriptor connected to the childâs controlling terminal (and also to the childâs standard input and output).Warning\nOn macOS the use of this function is unsafe when mixed with using higher-level system APIs, and that includes using\nurllib.request\n.\n- pty.openpty()Â¶\nOpen a new pseudo-terminal pair, using\nos.openpty()\nif possible, or emulation code for generic Unix systems. Return a pair of file descriptors(master, slave)\n, for the master and the slave end, respectively.\n- pty.spawn(argv[, master_read[, stdin_read]])Â¶\nSpawn a process, and connect its controlling terminal with the current processâs standard io. This is often used to baffle programs which insist on reading from the controlling terminal. It is expected that the process spawned behind the pty will eventually terminate, and when it does spawn will return.\nA loop copies STDIN of the current process to the child and data received from the child to STDOUT of the current process. It is not signaled to the child if STDIN of the current process closes down.\nThe functions master_read and stdin_read are passed a file descriptor which they should read from, and they should always return a byte string. In order to force spawn to return before the child process exits an empty byte arr"}
{"url": "https://docs.python.org/3/library/ftplib.html", "title": "", "text": "ftplib\nâ FTP protocol clientÂ¶\nSource code: Lib/ftplib.py\nThis module defines the class FTP\nand a few related items. The\nFTP\nclass implements the client side of the FTP protocol. You can use\nthis to write Python programs that perform a variety of automated FTP jobs, such\nas mirroring other FTP servers. It is also used by the module\nurllib.request\nto handle URLs that use FTP. For more information on FTP\n(File Transfer Protocol), see internet RFC 959.\nThe default encoding is UTF-8, following RFC 2640.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nHereâs a sample session using the ftplib\nmodule:\n>>> from ftplib import FTP\n>>> ftp = FTP('ftp.us.debian.org') # connect to host, default port\n>>> ftp.login() # user anonymous, passwd anonymous@\n'230 Login successful.'\n>>> ftp.cwd('debian') # change into \"debian\" directory\n'250 Directory successfully changed.'\n>>> ftp.retrlines('LIST') # list directory contents\n-rw-rw-r-- 1 1176 1176 1063 Jun 15 10:18 README\n...\ndrwxr-sr-x 5 1176 1176 4096 Dec 19 2000 pool\ndrwxr-sr-x 4 1176 1176 4096 Nov 17 2008 project\ndrwxr-xr-x 3 1176 1176 4096 Oct 10 2012 tools\n'226 Directory send OK.'\n>>> with open('README', 'wb') as fp:\n>>> ftp.retrbinary('RETR README', fp.write)\n'226 Transfer complete.'\n>>> ftp.quit()\n'221 Goodbye.'\nReferenceÂ¶\nFTP objectsÂ¶\n- class ftplib.FTP(host='', user='', passwd='', acct='', timeout=None, source_address=None, *, encoding='utf-8')Â¶\nReturn a new instance of the\nFTP\nclass.- Parameters:\nhost (str) â The hostname to connect to. If given,\nconnect(host)\nis implicitly called by the constructor.user (str) â The username to log in with (default:\n'anonymous'\n). If given,login(host, passwd, acct)\nis implicitly called by the constructor.passwd (str) â The password to use when logging in. If not given, and if passwd is the empty string or\n\"-\"\n, a password will be automatically generated.acct (str) â Account information to be used for the\nA"}
{"url": "https://docs.python.org/3/library/abc.html", "title": "", "text": "abc\nâ Abstract Base ClassesÂ¶\nSource code: Lib/abc.py\nThis module provides the infrastructure for defining abstract base\nclasses (ABCs) in Python, as outlined in PEP 3119;\nsee the PEP for why this was added to Python. (See also PEP 3141 and the\nnumbers\nmodule regarding a type hierarchy for numbers based on ABCs.)\nThe collections\nmodule has some concrete classes that derive from\nABCs; these can, of course, be further derived. In addition, the\ncollections.abc\nsubmodule has some ABCs that can be used to test whether\na class or instance provides a particular interface, for example, if it is\nhashable or if it is a mapping.\nThis module provides the metaclass ABCMeta\nfor defining ABCs and\na helper class ABC\nto alternatively define ABCs through inheritance:\n- class abc.ABCÂ¶\nA helper class that has\nABCMeta\nas its metaclass. With this class, an abstract base class can be created by simply deriving fromABC\navoiding sometimes confusing metaclass usage, for example:from abc import ABC class MyABC(ABC): pass\nNote that the type of\nABC\nis stillABCMeta\n, therefore inheriting fromABC\nrequires the usual precautions regarding metaclass usage, as multiple inheritance may lead to metaclass conflicts. One may also define an abstract base class by passing the metaclass keyword and usingABCMeta\ndirectly, for example:from abc import ABCMeta class MyABC(metaclass=ABCMeta): pass\nAdded in version 3.4.\n- class abc.ABCMetaÂ¶\nMetaclass for defining Abstract Base Classes (ABCs).\nUse this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as âvirtual subclassesâ â these and their descendants will be considered subclasses of the registering ABC by the built-in\nissubclass()\nfunction, but the registering ABC wonât show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even viasuper()\n). [1]Classe"}
{"url": "https://docs.python.org/3/library/select.html", "title": "", "text": "select\nâ Waiting for I/O completionÂ¶\nThis module provides access to the select()\nand poll()\nfunctions\navailable in most operating systems, devpoll()\navailable on\nSolaris and derivatives, epoll()\navailable on Linux 2.5+ and\nkqueue()\navailable on most BSD.\nNote that on Windows, it only works for sockets; on other operating systems,\nit also works for other file types (in particular, on Unix, it works on pipes).\nIt cannot be used on regular files to determine whether a file has grown since\nit was last read.\nNote\nThe selectors\nmodule allows high-level and efficient I/O\nmultiplexing, built upon the select\nmodule primitives. Users are\nencouraged to use the selectors\nmodule instead, unless they want\nprecise control over the OS-level primitives used.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe module defines the following:\n- select.devpoll()Â¶\n(Only supported on Solaris and derivatives.) Returns a\n/dev/poll\npolling object; see section /dev/poll Polling Objects below for the methods supported by devpoll objects.devpoll()\nobjects are linked to the number of file descriptors allowed at the time of instantiation. If your program reduces this value,devpoll()\nwill fail. If your program increases this value,devpoll()\nmay return an incomplete list of active file descriptors.The new file descriptor is non-inheritable.\nAdded in version 3.3.\nChanged in version 3.4: The new file descriptor is now non-inheritable.\n- select.epoll(sizehint=-1, flags=0)Â¶\n(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, which can be used as Edge or Level Triggered interface for I/O events.\nsizehint informs epoll about the expected number of events to be registered. It must be positive, or\n-1\nto use the default. It is only used on older systems whereepoll_create1()\nis not available; otherwise it has no effect (though its value is still checked).flags is deprecated and completely ignored. H"}
{"url": "https://docs.python.org/3/library/sys_path_init.html", "title": "", "text": "The initialization of the sys.path\nmodule search pathÂ¶\nA module search path is initialized when Python starts. This module search path\nmay be accessed at sys.path\n.\nThe first entry in the module search path is the directory that contains the\ninput script, if there is one. Otherwise, the first entry is the current\ndirectory, which is the case when executing the interactive shell, a -c\ncommand, or -m\nmodule.\nThe PYTHONPATH\nenvironment variable is often used to add directories\nto the search path. If this environment variable is found then the contents are\nadded to the module search path.\nNote\nPYTHONPATH\nwill affect all installed Python versions/environments.\nBe wary of setting this in your shell profile or global environment variables.\nThe site\nmodule offers more nuanced techniques as mentioned below.\nThe next items added are the directories containing standard Python modules as\nwell as any extension modules that these modules depend on. Extension\nmodules are .pyd\nfiles on Windows and .so\nfiles on other platforms. The\ndirectory with the platform-independent Python modules is called prefix\n.\nThe directory with the extension modules is called exec_prefix\n.\nThe PYTHONHOME\nenvironment variable may be used to set the prefix\nand exec_prefix\nlocations. Otherwise these directories are found by using\nthe Python executable as a starting point and then looking for various âlandmarkâ\nfiles and directories. Note that any symbolic links are followed so the real\nPython executable location is used as the search starting point. The Python\nexecutable location is called home\n.\nOnce home\nis determined, the prefix\ndirectory is found by first looking\nfor pythonmajorversionminorversion.zip\n(python311.zip\n). On Windows\nthe zip archive is searched for in home\nand on Unix the archive is expected\nto be in lib\n. Note that the expected zip archive location is added to the\nmodule search path even if the archive does not exist. If no archive was found,\nPython on Windows will continue the search for"}
{"url": "https://docs.python.org/3/library/syslog.html", "title": "", "text": "syslog\nâ Unix syslog library routinesÂ¶\nThis module provides an interface to the Unix syslog\nlibrary routines.\nRefer to the Unix manual pages for a detailed description of the syslog\nfacility.\nAvailability: Unix, not WASI, not iOS.\nThis module wraps the system syslog\nfamily of routines. A pure Python\nlibrary that can speak to a syslog server is available in the\nlogging.handlers\nmodule as SysLogHandler\n.\nThe module defines the following functions:\n- syslog.syslog(message)Â¶\n- syslog.syslog(priority, message)\nSend the string message to the system logger. A trailing newline is added if necessary. Each message is tagged with a priority composed of a facility and a level. The optional priority argument, which defaults to\nLOG_INFO\n, determines the message priority. If the facility is not encoded in priority using logical-or (LOG_INFO | LOG_USER\n), the value given in theopenlog()\ncall is used.If\nopenlog()\nhas not been called prior to the call tosyslog()\n,openlog()\nwill be called with no arguments.Raises an auditing event\nsyslog.syslog\nwith argumentspriority\n,message\n.Changed in version 3.2: In previous versions,\nopenlog()\nwould not be called automatically if it wasnât called prior to the call tosyslog()\n, deferring to the syslog implementation to callopenlog()\n.Changed in version 3.12: This function is restricted in subinterpreters. (Only code that runs in multiple interpreters is affected and the restriction is not relevant for most users.)\nopenlog()\nmust be called in the main interpreter beforesyslog()\nmay be used in a subinterpreter. Otherwise it will raiseRuntimeError\n.\n- syslog.openlog([ident[, logoption[, facility]]])Â¶\nLogging options of subsequent\nsyslog()\ncalls can be set by callingopenlog()\n.syslog()\nwill callopenlog()\nwith no arguments if the log is not currently open.The optional ident keyword argument is a string which is prepended to every message, and defaults to\nsys.argv[0]\nwith leading path components stripped. The optional logoption keyword argument (defa"}
{"url": "https://docs.python.org/3/library/crypto.html", "title": "", "text": "Cryptographic ServicesÂ¶\nThe modules described in this chapter implement various algorithms of a cryptographic nature. They are available at the discretion of the installation. Hereâs an overview:\nThe modules described in this chapter implement various algorithms of a cryptographic nature. They are available at the discretion of the installation. Hereâs an overview:"}
{"url": "https://docs.python.org/3/library/zipfile.html", "title": "", "text": "zipfile\nâ Work with ZIP archivesÂ¶\nSource code: Lib/zipfile/\nThe ZIP file format is a common archive and compression standard. This module provides tools to create, read, write, append, and list a ZIP file. Any advanced use of this module will require an understanding of the format, as defined in PKZIP Application Note.\nThis module does not currently handle multi-disk ZIP files. It can handle ZIP files that use the ZIP64 extensions (that is ZIP files that are more than 4 GiB in size). It supports decryption of encrypted files in ZIP archives, but it currently cannot create an encrypted file. Decryption is extremely slow as it is implemented in native Python rather than C.\nThe module defines the following items:\n- exception zipfile.BadZipFileÂ¶\nThe error raised for bad ZIP files.\nAdded in version 3.2.\n- exception zipfile.BadZipfileÂ¶\nAlias of\nBadZipFile\n, for compatibility with older Python versions.Deprecated since version 3.2.\n- exception zipfile.LargeZipFileÂ¶\nThe error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.\n- class zipfile.ZipFile\nThe class for reading and writing ZIP files. See section ZipFile Objects for constructor details.\n- class zipfile.Path\nClass that implements a subset of the interface provided by\npathlib.Path\n, including the fullimportlib.resources.abc.Traversable\ninterface.Added in version 3.8.\n- class zipfile.PyZipFile\nClass for creating ZIP archives containing Python libraries.\n- class zipfile.ZipInfo(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))Â¶\nClass used to represent information about a member of an archive. Instances of this class are returned by the\ngetinfo()\nandinfolist()\nmethods ofZipFile\nobjects. Most users of thezipfile\nmodule will not need to create these, but only use those created by this module. filename should be the full name of the archive member, and date_time should be a tuple containing six fields which describe the time of the last modification to the file; the fields are de"}
{"url": "https://docs.python.org/3/library/pyexpat.html", "title": "", "text": "xml.parsers.expat\nâ Fast XML parsing using ExpatÂ¶\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nThe xml.parsers.expat\nmodule is a Python interface to the Expat\nnon-validating XML parser. The module provides a single extension type,\nxmlparser\n, that represents the current state of an XML parser. After\nan xmlparser\nobject has been created, various attributes of the object\ncan be set to handler functions. When an XML document is then fed to the\nparser, the handler functions are called for the character data and markup in\nthe XML document.\nThis module uses the pyexpat\nmodule to provide access to the Expat\nparser. Direct use of the pyexpat\nmodule is deprecated.\nThis module provides one exception and one type object:\n- exception xml.parsers.expat.ExpatErrorÂ¶\nThe exception raised when Expat reports an error. See section ExpatError Exceptions for more information on interpreting Expat errors.\n- exception xml.parsers.expat.errorÂ¶\nAlias for\nExpatError\n.\n- xml.parsers.expat.XMLParserTypeÂ¶\nThe type of the return values from the\nParserCreate()\nfunction.\nThe xml.parsers.expat\nmodule contains two functions:\n- xml.parsers.expat.ErrorString(errno)Â¶\nReturns an explanatory string for a given error number errno.\n- xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)Â¶\nCreates and returns a new\nxmlparser\nobject. encoding, if specified, must be a string naming the encoding used by the XML data. Expat doesnât support as many encodings as Python does, and its repertoire of encodings canât be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII. If encoding [1] is given it will override the implicit or explicit encoding of the document.Expat can optionally do XML namespace processing for you, enabled by providing a value for namespace_separator. The value must be a one-character string; a\nValueError\nwill be raised if the string has an illegal length (None\nis considered the same as omission). When namespace processing is"}
{"url": "https://docs.python.org/3/library/pkgutil.html", "title": "", "text": "pkgutil\nâ Package extension utilityÂ¶\nSource code: Lib/pkgutil.py\nThis module provides utilities for the import system, in particular package support.\n- class pkgutil.ModuleInfo(module_finder, name, ispkg)Â¶\nA namedtuple that holds a brief summary of a moduleâs info.\nAdded in version 3.6.\n- pkgutil.extend_path(path, name)Â¶\nExtend the search path for the modules which comprise a package. Intended use is to place the following code in a packageâs\n__init__.py\n:from pkgutil import extend_path __path__ = extend_path(__path__, __name__)\nFor each directory on\nsys.path\nthat has a subdirectory that matches the package name, add the subdirectory to the packageâs__path__\n. This is useful if one wants to distribute different parts of a single logical package as multiple directories.It also looks for\n*.pkg\nfiles beginning where*\nmatches the name argument. This feature is similar to*.pth\nfiles (see thesite\nmodule for more information), except that it doesnât special-case lines starting withimport\n. A*.pkg\nfile is trusted at face value: apart from skipping blank lines and ignoring comments, all entries found in a*.pkg\nfile are added to the path, regardless of whether they exist on the filesystem (this is a feature).If the input path is not a list (as is the case for frozen packages) it is returned unchanged. The input path is not modified; an extended copy is returned. Items are only appended to the copy at the end.\nIt is assumed that\nsys.path\nis a sequence. Items ofsys.path\nthat are not strings referring to existing directories are ignored. Unicode items onsys.path\nthat cause errors when used as filenames may cause this function to raise an exception (in line withos.path.isdir()\nbehavior).\n- pkgutil.find_loader(fullname)Â¶\nRetrieve a module loader for the given fullname.\nThis is a backwards compatibility wrapper around\nimportlib.util.find_spec()\nthat converts most failures toImportError\nand only returns the loader rather than the fullimportlib.machinery.ModuleSpec\n.Changed in ve"}
{"url": "https://docs.python.org/3/library/atexit.html", "title": "", "text": "atexit\nâ Exit handlersÂ¶\nThe atexit\nmodule defines functions to register and unregister cleanup\nfunctions. Functions thus registered are automatically executed upon normal\ninterpreter termination. atexit\nruns these functions in the reverse\norder in which they were registered; if you register A\n, B\n, and C\n,\nat interpreter termination time they will be run in the order C\n, B\n,\nA\n.\nNote: The functions registered via this module are not called when the\nprogram is killed by a signal not handled by Python, when a Python fatal\ninternal error is detected, or when os._exit()\nis called.\nNote: The effect of registering or unregistering functions from within a cleanup function is undefined.\nChanged in version 3.7: When used with C-API subinterpreters, registered functions are local to the interpreter they were registered in.\n- atexit.register(func, *args, **kwargs)Â¶\nRegister func as a function to be executed at termination. Any optional arguments that are to be passed to func must be passed as arguments to\nregister()\n. It is possible to register the same function and arguments more than once.At normal program termination (for instance, if\nsys.exit()\nis called or the main moduleâs execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.If an exception is raised during execution of the exit handlers, a traceback is printed (unless\nSystemExit\nis raised) and the exception information is saved. After all exit handlers have had a chance to run, the last exception to be raised is re-raised.This function returns func, which makes it possible to use it as a decorator.\nWarning\nStarting new threads or calling\nos.fork()\nfrom a registered function can lead to race condition between the main Python runtime thread freeing thread states while internalthreading\nroutines or the new process try to use that state. This can lead to crash"}
{"url": "https://docs.python.org/3/library/quopri.html", "title": "", "text": "quopri\nâ Encode and decode MIME quoted-printable dataÂ¶\nSource code: Lib/quopri.py\nThis module performs quoted-printable transport encoding and decoding, as\ndefined in RFC 1521: âMIME (Multipurpose Internet Mail Extensions) Part One:\nMechanisms for Specifying and Describing the Format of Internet Message Bodiesâ.\nThe quoted-printable encoding is designed for data where there are relatively\nfew nonprintable characters; the base64 encoding scheme available via the\nbase64\nmodule is more compact if there are many such characters, as when\nsending a graphics file.\n- quopri.decode(input, output, header=False)Â¶\nDecode the contents of the input file and write the resulting decoded binary data to the output file. input and output must be binary file objects. If the optional argument header is present and true, underscore will be decoded as space. This is used to decode âQâ-encoded headers as described in RFC 1522: âMIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Textâ.\n- quopri.encode(input, output, quotetabs, header=False)Â¶\nEncode the contents of the input file and write the resulting quoted-printable data to the output file. input and output must be binary file objects. quotetabs, a non-optional flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded. Note that spaces and tabs appearing at the end of lines are always encoded, as per RFC 1521. header is a flag which controls if spaces are encoded as underscores as per RFC 1522.\n- quopri.decodestring(s, header=False)Â¶\nLike\ndecode()\n, except that it accepts a sourcebytes\nand returns the corresponding decodedbytes\n.\n- quopri.encodestring(s, quotetabs=False, header=False)Â¶\nLike\nencode()\n, except that it accepts a sourcebytes\nand returns the corresponding encodedbytes\n. By default, it sends aFalse\nvalue to quotetabs parameter of theencode()\nfunction.\nSee also\n- Module\nbase64\nEncode and "}
{"url": "https://docs.python.org/3/library/linecache.html", "title": "", "text": "linecache\nâ Random access to text linesÂ¶\nSource code: Lib/linecache.py\nThe linecache\nmodule allows one to get any line from a Python source file, while\nattempting to optimize internally, using a cache, the common case where many\nlines are read from a single file. This is used by the traceback\nmodule\nto retrieve source lines for inclusion in the formatted traceback.\nThe tokenize.open()\nfunction is used to open files. This\nfunction uses tokenize.detect_encoding()\nto get the encoding of the\nfile; in the absence of an encoding token, the file encoding defaults to UTF-8.\nThe linecache\nmodule defines the following functions:\n- linecache.getline(filename, lineno, module_globals=None)Â¶\nGet line lineno from file named filename. This function will never raise an exception â it will return\n''\non errors (the terminating newline character will be included for lines that are found).If a file named filename is not found, the function first checks for a PEP 302\n__loader__\nin module_globals. If there is such a loader and it defines aget_source\nmethod, then that determines the source lines (ifget_source()\nreturnsNone\n, then''\nis returned). Finally, if filename is a relative filename, it is looked up relative to the entries in the module search path,sys.path\n.\n- linecache.clearcache()Â¶\nClear the cache. Use this function if you no longer need lines from files previously read using\ngetline()\n.\n- linecache.checkcache(filename=None)Â¶\nCheck the cache for validity. Use this function if files in the cache may have changed on disk, and you require the updated version. If filename is omitted, it will check all the entries in the cache.\n- linecache.lazycache(filename, module_globals)Â¶\nCapture enough detail about a non-file-based module to permit getting its lines later via\ngetline()\neven if module_globals isNone\nin the later call. This avoids doing I/O until a line is actually needed, without having to carry the module globals around indefinitely.Added in version 3.5.\nExample:\n>>> import l"}
{"url": "https://docs.python.org/3/library/re.html", "title": "", "text": "re\nâ Regular expression operationsÂ¶\nSource code: Lib/re/\nThis module provides regular expression matching operations similar to those found in Perl.\nBoth patterns and strings to be searched can be Unicode strings (str\n)\nas well as 8-bit strings (bytes\n).\nHowever, Unicode strings and 8-bit strings cannot be mixed:\nthat is, you cannot match a Unicode string with a bytes pattern or\nvice-versa; similarly, when asking for a substitution, the replacement\nstring must be of the same type as both the pattern and the search string.\nRegular expressions use the backslash character ('\\'\n) to indicate\nspecial forms or to allow special characters to be used without invoking\ntheir special meaning. This collides with Pythonâs usage of the same\ncharacter for the same purpose in string literals; for example, to match\na literal backslash, one might have to write '\\\\\\\\'\nas the pattern\nstring, because the regular expression must be \\\\\n, and each\nbackslash must be expressed as \\\\\ninside a regular Python string\nliteral. Also, please note that any invalid escape sequences in Pythonâs\nusage of the backslash in string literals now generate a SyntaxWarning\nand in the future this will become a SyntaxError\n. This behaviour\nwill happen even if it is a valid escape sequence for a regular expression.\nThe solution is to use Pythonâs raw string notation for regular expression\npatterns; backslashes are not handled in any special way in a string literal\nprefixed with 'r'\n. So r\"\\n\"\nis a two-character string containing\n'\\'\nand 'n'\n, while \"\\n\"\nis a one-character string containing a\nnewline. Usually patterns will be expressed in Python code using this raw\nstring notation.\nIt is important to note that most regular expression operations are available as module-level functions and methods on compiled regular expressions. The functions are shortcuts that donât require you to compile a regex object first, but miss some fine-tuning parameters.\nSee also\nThe third-party regex module,\nwhich has an API compatible"}
{"url": "https://docs.python.org/3/library/threading.html", "title": "", "text": "threading\nâ Thread-based parallelismÂ¶\nSource code: Lib/threading.py\nThis module constructs higher-level threading interfaces on top of the lower\nlevel _thread\nmodule.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nIntroductionÂ¶\nThe threading\nmodule provides a way to run multiple threads (smaller\nunits of a process) concurrently within a single process. It allows for the\ncreation and management of threads, making it possible to execute tasks in\nparallel, sharing memory space. Threads are particularly useful when tasks are\nI/O bound, such as file operations or making network requests,\nwhere much of the time is spent waiting for external resources.\nA typical use case for threading\nincludes managing a pool of worker\nthreads that can process multiple tasks concurrently. Hereâs a basic example of\ncreating and starting threads using Thread\n:\nimport threading\nimport time\ndef crawl(link, delay=3):\nprint(f\"crawl started for {link}\")\ntime.sleep(delay) # Blocking I/O (simulating a network request)\nprint(f\"crawl ended for {link}\")\nlinks = [\n\"https://python.org\",\n\"https://docs.python.org\",\n\"https://peps.python.org\",\n]\n# Start threads for each link\nthreads = []\nfor link in links:\n# Using `args` to pass positional arguments and `kwargs` for keyword arguments\nt = threading.Thread(target=crawl, args=(link,), kwargs={\"delay\": 2})\nthreads.append(t)\n# Start each thread\nfor t in threads:\nt.start()\n# Wait for all threads to finish\nfor t in threads:\nt.join()\nChanged in version 3.7: This module used to be optional, it is now always available.\nSee also\nconcurrent.futures.ThreadPoolExecutor\noffers a higher level interface\nto push tasks to a background thread without blocking execution of the\ncalling thread, while still being able to retrieve their results when needed.\nqueue\nprovides a thread-safe interface for exchanging data between\nrunning threads.\nasyncio\noffers an alternative approach to achieving tas"}
{"url": "https://docs.python.org/3/library/signal.html", "title": "", "text": "signal\nâ Set handlers for asynchronous eventsÂ¶\nSource code: Lib/signal.py\nThis module provides mechanisms to use signal handlers in Python.\nGeneral rulesÂ¶\nThe signal.signal()\nfunction allows defining custom handlers to be\nexecuted when a signal is received. A small number of default handlers are\ninstalled: SIGPIPE\nis ignored (so write errors on pipes and sockets\ncan be reported as ordinary Python exceptions) and SIGINT\nis\ntranslated into a KeyboardInterrupt\nexception if the parent process\nhas not changed it.\nA handler for a particular signal, once set, remains installed until it is\nexplicitly reset (Python emulates the BSD style interface regardless of the\nunderlying implementation), with the exception of the handler for\nSIGCHLD\n, which follows the underlying implementation.\nOn WebAssembly platforms, signals are emulated and therefore behave differently. Several functions and signals are not available on these platforms.\nExecution of Python signal handlersÂ¶\nA Python signal handler does not get executed inside the low-level (C) signal handler. Instead, the low-level signal handler sets a flag which tells the virtual machine to execute the corresponding Python signal handler at a later point(for example at the next bytecode instruction). This has consequences:\nIt makes little sense to catch synchronous errors like\nSIGFPE\norSIGSEGV\nthat are caused by an invalid operation in C code. Python will return from the signal handler to the C code, which is likely to raise the same signal again, causing Python to apparently hang. From Python 3.3 onwards, you can use thefaulthandler\nmodule to report on synchronous errors.A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes.\nIf the handler raises an exception, it will be raised âout of thin airâ in the main t"}
{"url": "https://docs.python.org/3/library/tkinter.dnd.html", "title": "", "text": "tkinter.dnd\nâ Drag and drop supportÂ¶\nSource code: Lib/tkinter/dnd.py\nNote\nThis is experimental and due to be deprecated when it is replaced with the Tk DND.\nThe tkinter.dnd\nmodule provides drag-and-drop support for objects within\na single application, within the same window or between windows. To enable an\nobject to be dragged, you must create an event binding for it that starts the\ndrag-and-drop process. Typically, you bind a ButtonPress event to a callback\nfunction that you write (see Bindings and Events). The function should\ncall dnd_start()\n, where âsourceâ is the object to be dragged, and âeventâ\nis the event that invoked the call (the argument to your callback function).\nSelection of a target object occurs as follows:\nTop-down search of area under mouse for target widget\nTarget widget should have a callable dnd_accept attribute\nIf dnd_accept is not present or returns\nNone\n, search moves to parent widgetIf no target widget is found, then the target object is\nNone\nCall to <old_target>.dnd_leave(source, event)\nCall to <new_target>.dnd_enter(source, event)\nCall to <target>.dnd_commit(source, event) to notify of drop\nCall to <source>.dnd_end(target, event) to signal end of drag-and-drop\n- class tkinter.dnd.DndHandler(source, event)Â¶\nThe DndHandler class handles drag-and-drop events tracking Motion and ButtonRelease events on the root of the event widget.\n- cancel(event=None)Â¶\nCancel the drag-and-drop process.\n- finish(event, commit=0)Â¶\nExecute end of drag-and-drop functions.\n- on_motion(event)Â¶\nInspect area below mouse for target objects while drag is performed.\n- on_release(event)Â¶\nSignal end of drag when the release pattern is triggered.\n- tkinter.dnd.dnd_start(source, event)Â¶\nFactory function for drag-and-drop process.\nSee also"}
{"url": "https://docs.python.org/3/library/custominterp.html", "title": "", "text": "Custom Python InterpretersÂ¶\nThe modules described in this chapter allow writing interfaces similar to\nPythonâs interactive interpreter. If you want a Python interpreter that\nsupports some special feature in addition to the Python language, you should\nlook at the code\nmodule. (The codeop\nmodule is lower-level, used\nto support compiling a possibly incomplete chunk of Python code.)\nThe full list of modules described in this chapter is:"}
{"url": "https://docs.python.org/3/library/xmlrpc.html", "title": "", "text": "xmlrpc\nâ XMLRPC server and client modulesÂ¶\nXML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.\nxmlrpc\nis a package that collects server and client modules implementing\nXML-RPC. The modules are:"}
{"url": "https://docs.python.org/3/library/token.html", "title": "", "text": "token\nâ Constants used with Python parse treesÂ¶\nSource code: Lib/token.py\nThis module provides constants which represent the numeric values of leaf nodes\nof the parse tree (terminal tokens). Refer to the file Grammar/Tokens\nin the Python distribution for the definitions of the names in the context of\nthe language grammar. The specific numeric values which the names map to may\nchange between Python versions.\nThe module also provides a mapping from numeric codes to names and some functions. The functions mirror definitions in the Python C header files.\nNote that a tokenâs value may depend on tokenizer options. For example, a\n\"+\"\ntoken may be reported as either PLUS\nor OP\n, or\na \"match\"\ntoken may be either NAME\nor SOFT_KEYWORD\n.\n- token.tok_nameÂ¶\nDictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.\n- token.ISTERMINAL(x)Â¶\nReturn\nTrue\nfor terminal token values.\n- token.ISNONTERMINAL(x)Â¶\nReturn\nTrue\nfor non-terminal token values.\n- token.ISEOF(x)Â¶\nReturn\nTrue\nif x is the marker indicating the end of input.\nThe token constants are:\n- token.NAMEÂ¶\nToken value that indicates an identifier. Note that keywords are also initially tokenized as\nNAME\ntokens.\n- token.NUMBERÂ¶\nToken value that indicates a numeric literal\n- token.STRINGÂ¶\nToken value that indicates a string or byte literal, excluding formatted string literals. The token string is not interpreted: it includes the surrounding quotation marks and the prefix (if given); backslashes are included literally, without processing escape sequences.\n- token.OPÂ¶\nA generic token value that indicates an operator or delimiter.\nCPython implementation detail: This value is only reported by the\ntokenize\nmodule. Internally, the tokenizer uses exact token types instead.\n- token.COMMENTÂ¶\nToken value used to indicate a comment. The parser ignores\nCOMMENT\ntokens.\n- token.NEWLINEÂ¶\nToken value that indicates the e"}
{"url": "https://docs.python.org/3/library/getpass.html", "title": "", "text": "getpass\nâ Portable password inputÂ¶\nSource code: Lib/getpass.py\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe getpass\nmodule provides two functions:\n- getpass.getpass(prompt='Password: ', stream=None)Â¶\nPrompt the user for a password without echoing. The user is prompted using the string prompt, which defaults to\n'Password: '\n. On Unix, the prompt is written to the file-like object stream using the replace error handler if needed. stream defaults to the controlling terminal (/dev/tty\n) or if that is unavailable tosys.stderr\n(this argument is ignored on Windows).If echo free input is unavailable getpass() falls back to printing a warning message to stream and reading from\nsys.stdin\nand issuing aGetPassWarning\n.Note\nIf you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself.\n- exception getpass.GetPassWarningÂ¶\nA\nUserWarning\nsubclass issued when password input may be echoed.\n- getpass.getuser()Â¶\nReturn the âlogin nameâ of the user.\nThis function checks the environment variables\nLOGNAME\n,USER\n,LNAME\nandUSERNAME\n, in order, and returns the value of the first one which is set to a non-empty string. If none are set, the login name from the password database is returned on systems which support thepwd\nmodule, otherwise, anOSError\nis raised.In general, this function should be preferred over\nos.getlogin()\n.Changed in version 3.13: Previously, various exceptions beyond just\nOSError\nwere raised."}
{"url": "https://docs.python.org/3/library/gzip.html", "title": "", "text": "gzip\nâ Support for gzip filesÂ¶\nSource code: Lib/gzip.py\nThis module provides a simple interface to compress and decompress files just like the GNU programs gzip and gunzip would.\nThe data compression is provided by the zlib\nmodule.\nThe gzip\nmodule provides the GzipFile\nclass, as well as the\nopen()\n, compress()\nand decompress()\nconvenience functions.\nThe GzipFile\nclass reads and writes gzip-format files,\nautomatically compressing or decompressing the data so that it looks like an\nordinary file object.\nNote that additional file formats which can be decompressed by the gzip and gunzip programs, such as those produced by compress and pack, are not supported by this module.\nThe module defines the following items:\n- gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)Â¶\nOpen a gzip-compressed file in binary or text mode, returning a file object.\nThe filename argument can be an actual filename (a\nstr\norbytes\nobject), or an existing file object to read from or write to.The mode argument can be any of\n'r'\n,'rb'\n,'a'\n,'ab'\n,'w'\n,'wb'\n,'x'\nor'xb'\nfor binary mode, or'rt'\n,'at'\n,'wt'\n, or'xt'\nfor text mode. The default is'rb'\n.The compresslevel argument is an integer from 0 to 9, as for the\nGzipFile\nconstructor.For binary mode, this function is equivalent to the\nGzipFile\nconstructor:GzipFile(filename, mode, compresslevel)\n. In this case, the encoding, errors and newline arguments must not be provided.For text mode, a\nGzipFile\nobject is created, and wrapped in anio.TextIOWrapper\ninstance with the specified encoding, error handling behavior, and line ending(s).Changed in version 3.3: Added support for filename being a file object, support for text mode, and the encoding, errors and newline arguments.\nChanged in version 3.4: Added support for the\n'x'\n,'xb'\nand'xt'\nmodes.Changed in version 3.6: Accepts a path-like object.\n- exception gzip.BadGzipFileÂ¶\nAn exception raised for invalid gzip files. It inherits from\nOSError\n.EOFError\nandzlib.error\nc"}
{"url": "https://docs.python.org/3/library/sysconfig.html", "title": "", "text": "sysconfig\nâ Provide access to Pythonâs configuration informationÂ¶\nAdded in version 3.2.\nSource code: Lib/sysconfig\nThe sysconfig\nmodule provides access to Pythonâs configuration\ninformation like the list of installation paths and the configuration variables\nrelevant for the current platform.\nConfiguration variablesÂ¶\nA Python distribution contains a Makefile\nand a pyconfig.h\nheader file that are necessary to build both the Python binary itself and\nthird-party C extensions compiled using setuptools\n.\nsysconfig\nputs all variables found in these files in a dictionary that\ncan be accessed using get_config_vars()\nor get_config_var()\n.\nNotice that on Windows, itâs a much smaller set.\n- sysconfig.get_config_vars(*args)Â¶\nWith no arguments, return a dictionary of all configuration variables relevant for the current platform.\nWith arguments, return a list of values that result from looking up each argument in the configuration variable dictionary.\nFor each argument, if the value is not found, return\nNone\n.\n- sysconfig.get_config_var(name)Â¶\nReturn the value of a single variable name. Equivalent to\nget_config_vars().get(name)\n.If name is not found, return\nNone\n.\nExample of usage:\n>>> import sysconfig\n>>> sysconfig.get_config_var('Py_ENABLE_SHARED')\n0\n>>> sysconfig.get_config_var('LIBDIR')\n'/usr/local/lib'\n>>> sysconfig.get_config_vars('AR', 'CXX')\n['ar', 'g++']\nInstallation pathsÂ¶\nPython uses an installation scheme that differs depending on the platform and on\nthe installation options. These schemes are stored in sysconfig\nunder\nunique identifiers based on the value returned by os.name\n.\nThe schemes are used by package installers to determine where to copy files to.\nPython currently supports nine schemes:\nposix_prefix: scheme for POSIX platforms like Linux or macOS. This is the default scheme used when Python or a component is installed.\nposix_home: scheme for POSIX platforms, when the home option is used. This scheme defines paths located under a specific home prefix.\nposi"}
{"url": "https://docs.python.org/3/library/winreg.html", "title": "", "text": "winreg\nâ Windows registry accessÂ¶\nThese functions expose the Windows registry API to Python. Instead of using an integer as the registry handle, a handle object is used to ensure that the handles are closed correctly, even if the programmer neglects to explicitly close them.\nChanged in version 3.3: Several functions in this module used to raise a\nWindowsError\n, which is now an alias of OSError\n.\nFunctionsÂ¶\nThis module offers the following functions:\n- winreg.CloseKey(hkey)Â¶\nCloses a previously opened registry key. The hkey argument specifies a previously opened key.\nNote\nIf hkey is not closed using this method (or via\nhkey.Close()\n), it is closed when the hkey object is destroyed by Python.\n- winreg.ConnectRegistry(computer_name, key)Â¶\nEstablishes a connection to a predefined registry handle on another computer, and returns a handle object.\ncomputer_name is the name of the remote computer, of the form\nr\"\\\\computername\"\n. IfNone\n, the local computer is used.key is the predefined handle to connect to.\nThe return value is the handle of the opened key. If the function fails, an\nOSError\nexception is raised.Raises an auditing event\nwinreg.ConnectRegistry\nwith argumentscomputer_name\n,key\n.Changed in version 3.3: See above.\n- winreg.CreateKey(key, sub_key)Â¶\nCreates or opens the specified key, returning a handle object.\nkey is an already open key, or one of the predefined HKEY_* constants.\nsub_key is a string that names the key this method opens or creates.\nIf key is one of the predefined keys, sub_key may be\nNone\n. In that case, the handle returned is the same key handle passed in to the function.If the key already exists, this function opens the existing key.\nThe return value is the handle of the opened key. If the function fails, an\nOSError\nexception is raised.Raises an auditing event\nwinreg.CreateKey\nwith argumentskey\n,sub_key\n,access\n.Raises an auditing event\nwinreg.OpenKey/result\nwith argumentkey\n.Changed in version 3.3: See above.\n- winreg.CreateKeyEx(key, sub_ke"}
{"url": "https://docs.python.org/3/library/xml.sax.reader.html", "title": "", "text": "xml.sax.xmlreader\nâ Interface for XML parsersÂ¶\nSource code: Lib/xml/sax/xmlreader.py\nSAX parsers implement the XMLReader\ninterface. They are implemented in\na Python module, which must provide a function create_parser()\n. This\nfunction is invoked by xml.sax.make_parser()\nwith no arguments to create\na new parser object.\n- class xml.sax.xmlreader.XMLReaderÂ¶\nBase class which can be inherited by SAX parsers.\n- class xml.sax.xmlreader.IncrementalParserÂ¶\nIn some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still\nparse()\nwonât return until the entire document is processed. So these interfaces should be used if the blocking behaviour ofparse()\nis not desirable.When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method.\nNote that these methods must not be called during parsing, that is, after parse has been called and before it returns.\nBy default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.\n- class xml.sax.xmlreader.LocatorÂ¶\nInterface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return\nNone\n.\n- class xml.sax.xmlreader.InputSource(system_id=None)Â¶\nEncapsulation of the information needed by the\nXMLReader\nto read entities.This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/o"}
{"url": "https://docs.python.org/3/library/hashlib.html", "title": "", "text": "hashlib\nâ Secure hashes and message digestsÂ¶\nSource code: Lib/hashlib.py\nThis module implements a common interface to many different hash algorithms. Included are the FIPS secure hash algorithms SHA224, SHA256, SHA384, SHA512, (defined in the FIPS 180-4 standard), the SHA-3 series (defined in the FIPS 202 standard) as well as the legacy algorithms SHA1 (formerly part of FIPS) and the MD5 algorithm (defined in internet RFC 1321).\nNote\nIf you want the adler32 or crc32 hash functions, they are available in\nthe zlib\nmodule.\nHash algorithmsÂ¶\nThere is one constructor method named for each type of hash. All return\na hash object with the same simple interface. For example: use sha256()\nto create a SHA-256 hash object. You can now feed this object with\nbytes-like objects (normally bytes\n) using\nthe update\nmethod. At any point you can ask it for the\ndigest of the concatenation of the data fed to it so far using the\ndigest()\nor hexdigest()\nmethods.\nTo allow multithreading, the Python GIL is released while computing a\nhash supplied more than 2047 bytes of data at once in its constructor or\n.update\nmethod.\nConstructors for hash algorithms that are always present in this module are\nsha1()\n, sha224()\n, sha256()\n, sha384()\n, sha512()\n,\nsha3_224()\n, sha3_256()\n, sha3_384()\n, sha3_512()\n,\nshake_128()\n, shake_256()\n, blake2b()\n, and blake2s()\n.\nmd5()\nis normally available as well, though it may be missing or blocked\nif you are using a rare âFIPS compliantâ build of Python.\nThese correspond to algorithms_guaranteed\n.\nAdditional algorithms may also be available if your Python distributionâs\nhashlib\nwas linked against a build of OpenSSL that provides others.\nOthers are not guaranteed available on all installations and will only be\naccessible by name via new()\n. See algorithms_available\n.\nWarning\nSome algorithms have known hash collision weaknesses (including MD5 and SHA1). Refer to Attacks on cryptographic hash algorithms and the hashlib-seealso section at the end of this document.\nAdd"}
{"url": "https://docs.python.org/3/library/bdb.html", "title": "", "text": "bdb\nâ Debugger frameworkÂ¶\nSource code: Lib/bdb.py\nThe bdb\nmodule handles basic debugger functions, like setting breakpoints\nor managing execution via the debugger.\nThe following exception is defined:\nThe bdb\nmodule also defines two classes:\n- class bdb.Breakpoint(self, file, line, temporary=False, cond=None, funcname=None)Â¶\nThis class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals.\nBreakpoints are indexed by number through a list called\nbpbynumber\nand by(file, line)\npairs throughbplist\n. The former points to a single instance of classBreakpoint\n. The latter points to a list of such instances since there may be more than one breakpoint per line.When creating a breakpoint, its associated\nfile name\nshould be in canonical form. If afuncname\nis defined, a breakpointhit\nwill be counted when the first line of that function is executed. Aconditional\nbreakpoint always counts ahit\n.Breakpoint\ninstances have the following methods:- deleteMe()Â¶\nDelete the breakpoint from the list associated to a file/line. If it is the last breakpoint in that position, it also deletes the entry for the file/line.\n- enable()Â¶\nMark the breakpoint as enabled.\n- disable()Â¶\nMark the breakpoint as disabled.\n- bpformat()Â¶\nReturn a string with all the information about the breakpoint, nicely formatted:\nBreakpoint number.\nTemporary status (del or keep).\nFile/line position.\nBreak condition.\nNumber of times to ignore.\nNumber of times hit.\nAdded in version 3.2.\n- bpprint(out=None)Â¶\nPrint the output of\nbpformat()\nto the file out, or if it isNone\n, to standard output.\nBreakpoint\ninstances have the following attributes:- fileÂ¶\nFile name of the\nBreakpoint\n.\n- lineÂ¶\nLine number of the\nBreakpoint\nwithinfile\n.\n- temporaryÂ¶\nTrue\nif aBreakpoint\nat (file, line) is temporary.\n- condÂ¶\nCondition for evaluating a\nBreakpoint\nat (file, line).\n- funcnameÂ¶\nFunction name that defines whether a\nBreakpoint\nis hit upon entering the function.\n- enabledÂ¶\nTrue\nifBreakpoi"}
{"url": "https://docs.python.org/3/library/xml.sax.html", "title": "", "text": "xml.sax\nâ Support for SAX2 parsersÂ¶\nSource code: Lib/xml/sax/__init__.py\nThe xml.sax\npackage provides a number of modules which implement the\nSimple API for XML (SAX) interface for Python. The package itself provides the\nSAX exceptions and the convenience functions which will be most used by users of\nthe SAX API.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nChanged in version 3.7.1: The SAX parser no longer processes general external entities by default\nto increase security. Before, the parser created network connections\nto fetch remote files or loaded local files from the file\nsystem for DTD and entities. The feature can be enabled again with method\nsetFeature()\non the parser object\nand argument feature_external_ges\n.\nThe convenience functions are:\n- xml.sax.make_parser(parser_list=[])Â¶\nCreate and return a SAX\nXMLReader\nobject. The first parser found will be used. If parser_list is provided, it must be an iterable of strings which name modules that have a function namedcreate_parser()\n. Modules listed in parser_list will be used before modules in the default list of parsers.Changed in version 3.8: The parser_list argument can be any iterable, not just a list.\n- xml.sax.parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())Â¶\nCreate a SAX parser and use it to parse a document. The document, passed in as filename_or_stream, can be a filename or a file object. The handler parameter needs to be a SAX\nContentHandler\ninstance. If error_handler is given, it must be a SAXErrorHandler\ninstance; if omitted,SAXParseException\nwill be raised on all errors. There is no return value; all work must be done by the handler passed in.\n- xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())Â¶\nSimilar to\nparse()\n, but parses from a buffer string received as a parameter. string must be astr\ninstance or a bytes-like object.Changed in version 3.5: Added support of\nstr\ninstances.\nA typical SAX application uses three"}
{"url": "https://docs.python.org/3/library/textwrap.html", "title": "", "text": "textwrap\nâ Text wrapping and fillingÂ¶\nSource code: Lib/textwrap.py\nThe textwrap\nmodule provides some convenience functions,\nas well as TextWrapper\n, the class that does all the work.\nIf youâre just wrapping or filling one or two text strings, the convenience\nfunctions should be good enough; otherwise, you should use an instance of\nTextWrapper\nfor efficiency.\n- textwrap.wrap(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=' [...]')Â¶\nWraps the single paragraph in text (a string) so every line is at most width characters long. Returns a list of output lines, without final newlines.\nOptional keyword arguments correspond to the instance attributes of\nTextWrapper\n, documented below.See the\nTextWrapper.wrap()\nmethod for additional details on howwrap()\nbehaves.\n- textwrap.fill(text, width=70, *, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=' [...]')Â¶\nWraps the single paragraph in text, and returns a single string containing the wrapped paragraph.\nfill()\nis shorthand for\"\\n\".join(wrap(text, ...))\nIn particular,\nfill()\naccepts exactly the same keyword arguments aswrap()\n.\n- textwrap.shorten(text, width, *, fix_sentence_endings=False, break_long_words=True, break_on_hyphens=True, placeholder=' [...]')Â¶\nCollapse and truncate the given text to fit in the given width.\nFirst the whitespace in text is collapsed (all whitespace is replaced by single spaces). If the result fits in the width, it is returned. Otherwise, enough words are dropped from the end so that the remaining words plus the placeholder fit within width:\n>>> textwrap.shorten(\"Hello world!\", width=12) 'Hello world!' >>> textwrap.shorten(\"Hello world!\", widt"}
{"url": "https://docs.python.org/3/library/heapq.html", "title": "", "text": "heapq\nâ Heap queue algorithmÂ¶\nSource code: Lib/heapq.py\nThis module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.\nHeaps are binary trees for which every parent node has a value less than or equal to any of its children. We refer to this condition as the heap invariant.\nThis implementation uses arrays for which\nheap[k] <= heap[2*k+1]\nand heap[k] <= heap[2*k+2]\nfor all k, counting\nelements from zero. For the sake of comparison, non-existing elements are\nconsidered to be infinite. The interesting property of a heap is that its\nsmallest element is always the root, heap[0]\n.\nThe API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing. This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) Our pop method returns the smallest item, not the largest (called a âmin heapâ in textbooks; a âmax heapâ is more common in texts because of its suitability for in-place sorting).\nThese two make it possible to view the heap as a regular Python list without\nsurprises: heap[0]\nis the smallest item, and heap.sort()\nmaintains the\nheap invariant!\nTo create a heap, use a list initialized to []\n, or you can transform a\npopulated list into a heap via function heapify()\n.\nThe following functions are provided:\n- heapq.heappush(heap, item)Â¶\nPush the value item onto the heap, maintaining the heap invariant.\n- heapq.heappop(heap)Â¶\nPop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty,\nIndexError\nis raised. To access the smallest item without popping it, useheap[0]\n.\n- heapq.heappushpop(heap, item)Â¶\nPush item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than\nheappush()\nfollowed by a separate call toheappop()\n.\n- heapq.heapify(x)Â¶\nTransform list x into a heap, in-place, in line"}
{"url": "https://docs.python.org/3/library/__future__.html", "title": "", "text": "__future__\nâ Future statement definitionsÂ¶\nSource code: Lib/__future__.py\nImports of the form from __future__ import feature\nare called\nfuture statements. These are special-cased by the Python compiler\nto allow the use of new Python features in modules containing the future statement\nbefore the release in which the feature becomes standard.\nWhile these future statements are given additional special meaning by the\nPython compiler, they are still executed like any other import statement and\nthe __future__\nexists and is handled by the import system the same way\nany other Python module would be. This design serves three purposes:\nTo avoid confusing existing tools that analyze import statements and expect to find the modules theyâre importing.\nTo document when incompatible changes were introduced, and when they will be â or were â made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing\n__future__\nand examining its contents.To ensure that future statements run under releases prior to Python 2.1 at least yield runtime exceptions (the import of\n__future__\nwill fail, because there was no module of that name prior to 2.1).\nModule ContentsÂ¶\nNo feature description will ever be deleted from __future__\n. Since its\nintroduction in Python 2.1 the following features have found their way into the\nlanguage using this mechanism:\nfeature |\noptional in |\nmandatory in |\neffect |\n|---|---|---|---|\n|\n2.1.0b1 |\n2.2 |\nPEP 227: Statically Nested Scopes |\n|\n2.2.0a1 |\n2.3 |\nPEP 255: Simple Generators |\n|\n2.2.0a2 |\n3.0 |\nPEP 238: Changing the Division Operator |\n|\n2.5.0a1 |\n3.0 |\nPEP 328: Imports: Multi-Line and Absolute/Relative |\n|\n2.5.0a1 |\n2.6 |\nPEP 343: The âwithâ Statement |\n|\n2.6.0a2 |\n3.0 |\nPEP 3105: Make print a function |\n|\n2.6.0a2 |\n3.0 |\nPEP 3112: Bytes literals in Python 3000 |\n|\n3.5.0b1 |\n3.7 |\nPEP 479: StopIteration handling inside generators |\n|\n3.7.0b1 |\nNever [1] |\nPEP 563: Postponed evaluation of annotations |\n- class __"}
{"url": "https://docs.python.org/3/library/xml.dom.minidom.html", "title": "", "text": "xml.dom.minidom\nâ Minimal DOM implementationÂ¶\nSource code: Lib/xml/dom/minidom.py\nxml.dom.minidom\nis a minimal implementation of the Document Object\nModel interface, with an API similar to that in other languages. It is intended\nto be simpler than the full DOM and also significantly smaller. Users who are\nnot already proficient with the DOM should consider using the\nxml.etree.ElementTree\nmodule for their XML processing instead.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nDOM applications typically start by parsing some XML into a DOM. With\nxml.dom.minidom\n, this is done through the parse functions:\nfrom xml.dom.minidom import parse, parseString\ndom1 = parse('c:\\\\temp\\\\mydata.xml') # parse an XML file by name\ndatasource = open('c:\\\\temp\\\\mydata.xml')\ndom2 = parse(datasource) # parse an open file\ndom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')\nThe parse()\nfunction can take either a filename or an open file object.\n- xml.dom.minidom.parse(filename_or_file, parser=None, bufsize=None)Â¶\nReturn a\nDocument\nfrom the given input. filename_or_file may be either a file name, or a file-like object. parser, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.\nIf you have XML in a string, you can use the parseString()\nfunction\ninstead:\n- xml.dom.minidom.parseString(string, parser=None)Â¶\nReturn a\nDocument\nthat represents the string. This method creates anio.StringIO\nobject for the string and passes that on toparse()\n.\nBoth functions return a Document\nobject representing the content of the\ndocument.\nWhat the parse()\nand parseString()\nfunctions do is connect an XML\nparser with a âDOM builderâ that can accept parse events from any SAX parser and\nconvert them into a DOM tree. The name of the functions are perhaps misleading,\nbut are easy to grasp when learn"}
{"url": "https://docs.python.org/3/library/keyword.html", "title": "", "text": "keyword\nâ Testing for Python keywordsÂ¶\nSource code: Lib/keyword.py\nThis module allows a Python program to determine if a string is a keyword or soft keyword.\n- keyword.kwlistÂ¶\nSequence containing all the keywords defined for the interpreter. If any keywords are defined to only be active when particular\n__future__\nstatements are in effect, these will be included as well.\n- keyword.issoftkeyword(s)Â¶\nReturn\nTrue\nif s is a Python soft keyword.Added in version 3.9.\n- keyword.softkwlistÂ¶\nSequence containing all the soft keywords defined for the interpreter. If any soft keywords are defined to only be active when particular\n__future__\nstatements are in effect, these will be included as well.Added in version 3.9."}
{"url": "https://docs.python.org/3/library/errno.html", "title": "", "text": "errno\nâ Standard errno system symbolsÂ¶\nThis module makes available standard errno\nsystem symbols. The value of each\nsymbol is the corresponding integer value. The names and descriptions are\nborrowed from linux/include/errno.h\n, which should be\nall-inclusive.\n- errno.errorcodeÂ¶\nDictionary providing a mapping from the errno value to the string name in the underlying system. For instance,\nerrno.errorcode[errno.EPERM]\nmaps to'EPERM'\n.\nTo translate a numeric error code to an error message, use os.strerror()\n.\nOf the following list, symbols that are not used on the current platform are not\ndefined by the module. The specific list of defined symbols is available as\nerrno.errorcode.keys()\n. Symbols available can include:\n- errno.EPERMÂ¶\nOperation not permitted. This error is mapped to the exception\nPermissionError\n.\n- errno.ENOENTÂ¶\nNo such file or directory. This error is mapped to the exception\nFileNotFoundError\n.\n- errno.ESRCHÂ¶\nNo such process. This error is mapped to the exception\nProcessLookupError\n.\n- errno.EINTRÂ¶\nInterrupted system call. This error is mapped to the exception\nInterruptedError\n.\n- errno.EIOÂ¶\nI/O error\n- errno.ENXIOÂ¶\nNo such device or address\n- errno.E2BIGÂ¶\nArg list too long\n- errno.ENOEXECÂ¶\nExec format error\n- errno.EBADFÂ¶\nBad file number\n- errno.ECHILDÂ¶\nNo child processes. This error is mapped to the exception\nChildProcessError\n.\n- errno.EAGAINÂ¶\nTry again. This error is mapped to the exception\nBlockingIOError\n.\n- errno.ENOMEMÂ¶\nOut of memory\n- errno.EACCESÂ¶\nPermission denied. This error is mapped to the exception\nPermissionError\n.\n- errno.EFAULTÂ¶\nBad address\n- errno.ENOTBLKÂ¶\nBlock device required\n- errno.EBUSYÂ¶\nDevice or resource busy\n- errno.EEXISTÂ¶\nFile exists. This error is mapped to the exception\nFileExistsError\n.\n- errno.EXDEVÂ¶\nCross-device link\n- errno.ENODEVÂ¶\nNo such device\n- errno.ENOTDIRÂ¶\nNot a directory. This error is mapped to the exception\nNotADirectoryError\n.\n- errno.EISDIRÂ¶\nIs a directory. This error is mapped to the "}
{"url": "https://docs.python.org/3/library/os.path.html", "title": "", "text": "os.path\nâ Common pathname manipulationsÂ¶\nSource code: Lib/genericpath.py, Lib/posixpath.py (for POSIX) and Lib/ntpath.py (for Windows).\nThis module implements some useful functions on pathnames. To read or write\nfiles see open()\n, and for accessing the filesystem see the os\nmodule. The path parameters can be passed as strings, or bytes, or any object\nimplementing the os.PathLike\nprotocol.\nUnlike a Unix shell, Python does not do any automatic path expansions.\nFunctions such as expanduser()\nand expandvars()\ncan be invoked\nexplicitly when an application desires shell-like path expansion. (See also\nthe glob\nmodule.)\nSee also\nThe pathlib\nmodule offers high-level path objects.\nNote\nAll of these functions accept either only bytes or only string objects as their parameters. The result is an object of the same type, if a path or file name is returned.\nNote\nSince different operating systems have different path name conventions, there\nare several versions of this module in the standard library. The\nos.path\nmodule is always the path module suitable for the operating\nsystem Python is running on, and therefore usable for local paths. However,\nyou can also import and use the individual modules if you want to manipulate\na path that is always in one of the different formats. They all have the\nsame interface:\nposixpath\nfor UNIX-style pathsntpath\nfor Windows paths\nChanged in version 3.8: exists()\n, lexists()\n, isdir()\n, isfile()\n,\nislink()\n, and ismount()\nnow return False\ninstead of\nraising an exception for paths that contain characters or bytes\nunrepresentable at the OS level.\n- os.path.abspath(path)Â¶\nReturn a normalized absolutized version of the pathname path. On most platforms, this is equivalent to calling the function\nnormpath()\nas follows:normpath(join(os.getcwd(), path))\n.Changed in version 3.6: Accepts a path-like object.\n- os.path.basename(path, /)Â¶\nReturn the base name of pathname path. This is the second element of the pair returned by passing path to the function\nsplit"}
{"url": "https://docs.python.org/3/library/pprint.html", "title": "", "text": "pprint\nâ Data pretty printerÂ¶\nSource code: Lib/pprint.py\nThe pprint\nmodule provides a capability to âpretty-printâ arbitrary\nPython data structures in a form which can be used as input to the interpreter.\nIf the formatted structures include objects which are not fundamental Python\ntypes, the representation may not be loadable. This may be the case if objects\nsuch as files, sockets or classes are included, as well as many other\nobjects which are not representable as Python literals.\nThe formatted representation keeps objects on a single line if it can, and breaks them onto multiple lines if they donât fit within the allowed width, adjustable by the width parameter defaulting to 80 characters.\nDictionaries are sorted by key before the display is computed.\nChanged in version 3.9: Added support for pretty-printing types.SimpleNamespace\n.\nChanged in version 3.10: Added support for pretty-printing dataclasses.dataclass\n.\nFunctionsÂ¶\n- pprint.pp(object, stream=None, indent=1, width=80, depth=None, *, compact=False, sort_dicts=False, underscore_numbers=False)Â¶\nPrints the formatted representation of object, followed by a newline. This function may be used in the interactive interpreter instead of the\nprint()\nfunction for inspecting values. Tip: you can reassignprint = pprint.pp\nfor use within a scope.- Parameters:\nobject â The object to be printed.\nstream (file-like object | None) â A file-like object to which the output will be written by calling its\nwrite()\nmethod. IfNone\n(the default),sys.stdout\nis used.indent (int) â The amount of indentation added for each nesting level.\nwidth (int) â The desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made.\ndepth (int | None) â The number of nesting levels which may be printed. If the data structure being printed is too deep, the next contained level is replaced by\n...\n. IfNone\n(the default), there is no constraint on the depth of the o"}
{"url": "https://docs.python.org/3/library/zipapp.html", "title": "", "text": "zipapp\nâ Manage executable Python zip archivesÂ¶\nAdded in version 3.5.\nSource code: Lib/zipapp.py\nThis module provides tools to manage the creation of zip files containing Python code, which can be executed directly by the Python interpreter. The module provides both a Command-Line Interface and a Python API.\nBasic ExampleÂ¶\nThe following example shows how the Command-Line Interface\ncan be used to create an executable archive from a directory containing\nPython code. When run, the archive will execute the main\nfunction from\nthe module myapp\nin the archive.\n$ python -m zipapp myapp -m \"myapp:main\"\n$ python myapp.pyz\n<output from myapp>\nCommand-Line InterfaceÂ¶\nWhen called as a program from the command line, the following form is used:\n$ python -m zipapp source [options]\nIf source is a directory, this will create an archive from the contents of source. If source is a file, it should be an archive, and it will be copied to the target archive (or the contents of its shebang line will be displayed if the âinfo option is specified).\nThe following options are understood:\n- -o <output>, --output=<output>Â¶\nWrite the output to a file named output. If this option is not specified, the output filename will be the same as the input source, with the extension\n.pyz\nadded. If an explicit filename is given, it is used as is (so a.pyz\nextension should be included if required).An output filename must be specified if the source is an archive (and in that case, output must not be the same as source).\n- -p <interpreter>, --python=<interpreter>Â¶\nAdd a\n#!\nline to the archive specifying interpreter as the command to run. Also, on POSIX, make the archive executable. The default is to write no#!\nline, and not make the file executable.\n- -m <mainfn>, --main=<mainfn>Â¶\nWrite a\n__main__.py\nfile to the archive that executes mainfn. The mainfn argument should have the form âpkg.mod:fnâ, where âpkg.modâ is a package/module in the archive, and âfnâ is a callable in the given module. The__main__.py\n"}
{"url": "https://docs.python.org/3/library/readline.html", "title": "", "text": "readline\nâ GNU readline interfaceÂ¶\nThe readline\nmodule defines a number of functions to facilitate\ncompletion and reading/writing of history files from the Python interpreter.\nThis module can be used directly, or via the rlcompleter\nmodule, which\nsupports completion of Python identifiers at the interactive prompt. Settings\nmade using this module affect the behaviour of both the interpreterâs\ninteractive prompt and the prompts offered by the built-in input()\nfunction.\nReadline keybindings may be configured via an initialization file, typically\n.inputrc\nin your home directory. See Readline Init File\nin the GNU Readline manual for information about the format and\nallowable constructs of that file, and the capabilities of the\nReadline library in general.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nNote\nThe underlying Readline library API may be implemented by\nthe editline\n(libedit\n) library instead of GNU readline.\nOn macOS the readline\nmodule detects which library is being used\nat run time.\nThe configuration file for editline\nis different from that\nof GNU readline. If you programmatically load configuration strings\nyou can use backend\nto determine which library is being used.\nIf you use editline\n/libedit\nreadline emulation on macOS, the\ninitialization file located in your home directory is named\n.editrc\n. For example, the following content in ~/.editrc\nwill\nturn ON vi keybindings and TAB completion:\npython:bind -v\npython:bind ^I rl_complete\nAlso note that different libraries may use different history file formats. When switching the underlying library, existing history files may become unusable.\n- readline.backendÂ¶\nThe name of the underlying Readline library being used, either\n\"readline\"\nor\"editline\"\n.Added in version 3.13.\nInit fileÂ¶\nThe following functions relate to the init file and user configuration:\n- readline.parse_and_bind(string)Â¶\nExecute the init line provided in the string argum"}
{"url": "https://docs.python.org/3/library/plistlib.html", "title": "", "text": "plistlib\nâ Generate and parse Apple .plist\nfilesÂ¶\nSource code: Lib/plistlib.py\nThis module provides an interface for reading and writing the âproperty listâ files used by Apple, primarily on macOS and iOS. This module supports both binary and XML plist files.\nThe property list (.plist\n) file format is a simple serialization supporting\nbasic object types, like dictionaries, lists, numbers and strings. Usually the\ntop level object is a dictionary.\nTo write out and to parse a plist file, use the dump()\nand\nload()\nfunctions.\nTo work with plist data in bytes or string objects, use dumps()\nand loads()\n.\nValues can be strings, integers, floats, booleans, tuples, lists, dictionaries\n(but only with string keys), bytes\n, bytearray\nor datetime.datetime\nobjects.\nChanged in version 3.4: New API, old API deprecated. Support for binary format plists added.\nChanged in version 3.8: Support added for reading and writing UID\ntokens in binary plists as used\nby NSKeyedArchiver and NSKeyedUnarchiver.\nChanged in version 3.9: Old API removed.\nSee also\n- PList manual page\nAppleâs documentation of the file format.\nThis module defines the following functions:\n- plistlib.load(fp, *, fmt=None, dict_type=dict, aware_datetime=False)Â¶\nRead a plist file. fp should be a readable and binary file object. Return the unpacked root object (which usually is a dictionary).\nThe fmt is the format of the file and the following values are valid:\nNone\n: Autodetect the file formatFMT_XML\n: XML file formatFMT_BINARY\n: Binary plist format\nThe dict_type is the type used for dictionaries that are read from the plist file.\nWhen aware_datetime is true, fields with type\ndatetime.datetime\nwill be created as aware object, withtzinfo\nasdatetime.UTC\n.XML data for the\nFMT_XML\nformat is parsed using the Expat parser fromxml.parsers.expat\nâ see its documentation for possible exceptions on ill-formed XML. Unknown elements will simply be ignored by the plist parser.The parser raises\nInvalidFileException\nwhen the file cannot b"}
{"url": "https://docs.python.org/3/library/asyncio.html", "title": "", "text": "asyncio\nâ Asynchronous I/OÂ¶\nasyncio is a library to write concurrent code using the async/await syntax.\nasyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc.\nasyncio is often a perfect fit for IO-bound and high-level structured network code.\nSee also\n- A Conceptual Overview of asyncio\nExplanation of the fundamentals of asyncio.\nasyncio provides a set of high-level APIs to:\nrun Python coroutines concurrently and have full control over their execution;\nperform network IO and IPC;\ncontrol subprocesses;\ndistribute tasks via queues;\nsynchronize concurrent code;\nAdditionally, there are low-level APIs for library and framework developers to:\ncreate and manage event loops, which provide asynchronous APIs for networking, running subprocesses, handling OS signals, etc;\nimplement efficient protocols using transports;\nbridge callback-based libraries and code with async/await syntax.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nasyncio REPL\nYou can experiment with an asyncio\nconcurrent context in the REPL:\n$ python -m asyncio\nasyncio REPL ...\nUse \"await\" directly instead of \"asyncio.run()\".\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import asyncio\n>>> await asyncio.sleep(10, result='hello')\n'hello'\nRaises an auditing event cpython.run_stdin\nwith no arguments.\nChanged in version 3.12.5: (also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events.\nChanged in version 3.13: Uses PyREPL if possible, in which case PYTHONSTARTUP\nis\nalso executed. Emits audit events.\nReference\nNote\nThe source code for asyncio can be found in Lib/asyncio/."}
{"url": "https://docs.python.org/3/library/binascii.html", "title": "", "text": "binascii\nâ Convert between binary and ASCIIÂ¶\nThe binascii\nmodule contains a number of methods to convert between\nbinary and various ASCII-encoded binary representations. Normally, you will not\nuse these functions directly but use wrapper modules like\nbase64\ninstead. The binascii\nmodule contains\nlow-level functions written in C for greater speed that are used by the\nhigher-level modules.\nNote\na2b_*\nfunctions accept Unicode strings containing only ASCII characters.\nOther functions only accept bytes-like objects (such as\nbytes\n, bytearray\nand other objects that support the buffer\nprotocol).\nChanged in version 3.3: ASCII-only unicode strings are now accepted by the a2b_*\nfunctions.\nThe binascii\nmodule defines the following functions:\n- binascii.a2b_uu(string)Â¶\nConvert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.\n- binascii.b2a_uu(data, *, backtick=False)Â¶\nConvert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of data should be at most 45. If backtick is true, zeros are represented by\n'`'\ninstead of spaces.Changed in version 3.7: Added the backtick parameter.\n- binascii.a2b_base64(string, /, *, strict_mode=False)Â¶\nConvert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.\nIf strict_mode is true, only valid base64 data will be converted. Invalid base64 data will raise\nbinascii.Error\n.Valid base64:\nConforms to RFC 3548.\nContains only characters from the base64 alphabet.\nContains no excess data after padding (including excess padding, newlines, etc.).\nDoes not start with a padding.\nChanged in version 3.11: Added the strict_mode parameter.\n- binascii.b2a_base64(data, *, newline=True)Â¶\nConvert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a n"}
{"url": "https://docs.python.org/3/library/venv.html", "title": "", "text": "venv\nâ Creation of virtual environmentsÂ¶\nAdded in version 3.3.\nSource code: Lib/venv/\nThe venv\nmodule supports creating lightweight âvirtual environmentsâ,\neach with their own independent set of Python packages installed in\ntheir site\ndirectories.\nA virtual environment is created on top of an existing\nPython installation, known as the virtual environmentâs âbaseâ Python, and by\ndefault is isolated from the packages in the base environment, so\nthat only those explicitly installed in the virtual environment are available.\nWhen used from within a virtual environment, common installation tools such as pip will install Python packages into a virtual environment without needing to be told to do so explicitly.\nA virtual environment is (amongst other things):\nUsed to contain a specific Python interpreter and software libraries and binaries which are needed to support a project (library or application). These are by default isolated from software in other virtual environments and Python interpreters and libraries installed in the operating system.\nContained in a directory, conventionally named\n.venv\norvenv\nin the project directory, or under a container directory for lots of virtual environments, such as~/.virtualenvs\n.Not checked into source control systems such as Git.\nConsidered as disposable â it should be simple to delete and recreate it from scratch. You donât place any project code in the environment.\nNot considered as movable or copyable â you just recreate the same environment in the target location.\nSee PEP 405 for more background on Python virtual environments.\nAvailability: not Android, not iOS, not WASI.\nThis module is not supported on mobile platforms or WebAssembly platforms.\nCreating virtual environmentsÂ¶\nVirtual environments are created by executing the venv\nmodule:\npython -m venv /path/to/new/virtual/environment\nThis creates the target directory (including parent directories as needed)\nand places a pyvenv.cfg\nfile in it with a home\nkey\npointing to the Pyth"}
{"url": "https://docs.python.org/3/library/sys.html", "title": "", "text": "sys\nâ System-specific parameters and functionsÂ¶\nThis module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available. Unless explicitly noted otherwise, all variables are read-only.\n- sys.abiflagsÂ¶\nOn POSIX systems where Python was built with the standard\nconfigure\nscript, this contains the ABI flags as specified by PEP 3149.Added in version 3.2.\nChanged in version 3.8: Default flags became an empty string (\nm\nflag for pymalloc has been removed).Availability: Unix.\n- sys.addaudithook(hook)Â¶\nAppend the callable hook to the list of active auditing hooks for the current (sub)interpreter.\nWhen an auditing event is raised through the\nsys.audit()\nfunction, each hook will be called in the order it was added with the event name and the tuple of arguments. Native hooks added byPySys_AddAuditHook()\nare called first, followed by hooks added in the current (sub)interpreter. Hooks can then log the event, raise an exception to abort the operation, or terminate the process entirely.Note that audit hooks are primarily for collecting information about internal or otherwise unobservable actions, whether by Python or libraries written in Python. They are not suitable for implementing a âsandboxâ. In particular, malicious code can trivially disable or bypass hooks added using this function. At a minimum, any security-sensitive hooks must be added using the C API\nPySys_AddAuditHook()\nbefore initialising the runtime, and any modules allowing arbitrary memory modification (such asctypes\n) should be completely removed or closely monitored.Calling\nsys.addaudithook()\nwill itself raise an auditing event namedsys.addaudithook\nwith no arguments. If any existing hooks raise an exception derived fromRuntimeError\n, the new hook will not be added and the exception suppressed. As a result, callers cannot assume that their hook has been added unless they control all existing hooks.See the audit even"}
{"url": "https://docs.python.org/3/library/xmlrpc.client.html", "title": "", "text": "xmlrpc.client\nâ XML-RPC client accessÂ¶\nSource code: Lib/xmlrpc/client.py\nXML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data. This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire.\nWarning\nThe xmlrpc.client\nmodule is not secure against maliciously\nconstructed data. If you need to parse untrusted or unauthenticated data,\nsee XML security.\nChanged in version 3.5: For HTTPS URIs, xmlrpc.client\nnow performs all the necessary\ncertificate and hostname checks by default.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\n- class xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=(), context=None)Â¶\nA\nServerProxy\ninstance is an object that manages communication with a remote XML-RPC server. The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server. The optional second argument is a transport factory instance; by default it is an internalSafeTransport\ninstance for https: URLs and an internal HTTPTransport\ninstance otherwise. The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag.The following parameters govern the use of the returned proxy instance. If allow_none is true, the Python constant\nNone\nwill be translated into XML; the default behaviour is forNone\nto raise aTypeError\n. This is a commonly used extension to the XML-RPC specification, but isnât supported by all clients and servers; see http://ontosys.com/xml-rpc/extensions.php for a description. The use_builtin_types flag can be used to cause date/time values to be presented"}
{"url": "https://docs.python.org/3/library/tokenize.html", "title": "", "text": "tokenize\nâ Tokenizer for Python sourceÂ¶\nSource code: Lib/tokenize.py\nThe tokenize\nmodule provides a lexical scanner for Python source code,\nimplemented in Python. The scanner in this module returns comments as tokens\nas well, making it useful for implementing âpretty-printersâ, including\ncolorizers for on-screen displays.\nTo simplify token stream handling, all operator and\ndelimiter tokens and Ellipsis\nare returned using\nthe generic OP\ntoken type. The exact\ntype can be determined by checking the exact_type\nproperty on the\nnamed tuple returned from tokenize.tokenize()\n.\nWarning\nNote that the functions in this module are only designed to parse\nsyntactically valid Python code (code that does not raise when parsed\nusing ast.parse()\n). The behavior of the functions in this module is\nundefined when providing invalid Python code and it can change at any\npoint.\nTokenizing InputÂ¶\nThe primary entry point is a generator:\n- tokenize.tokenize(readline)Â¶\nThe\ntokenize()\ngenerator requires one argument, readline, which must be a callable object which provides the same interface as theio.IOBase.readline()\nmethod of file objects. Each call to the function should return one line of input as bytes.The generator produces 5-tuples with these members: the token type; the token string; a 2-tuple\n(srow, scol)\nof ints specifying the row and column where the token begins in the source; a 2-tuple(erow, ecol)\nof ints specifying the row and column where the token ends in the source; and the line on which the token was found. The line passed (the last tuple item) is the physical line. The 5 tuple is returned as a named tuple with the field names:type string start end line\n.The returned named tuple has an additional property named\nexact_type\nthat contains the exact operator type forOP\ntokens. For all other token typesexact_type\nequals the named tupletype\nfield.Changed in version 3.1: Added support for named tuples.\nChanged in version 3.3: Added support for\nexact_type\n.tokenize()\ndetermines the "}
{"url": "https://docs.python.org/3/library/filecmp.html", "title": "", "text": "filecmp\nâ File and Directory ComparisonsÂ¶\nSource code: Lib/filecmp.py\nThe filecmp\nmodule defines functions to compare files and directories,\nwith various optional time/correctness trade-offs. For comparing files,\nsee also the difflib\nmodule.\nThe filecmp\nmodule defines the following functions:\n- filecmp.cmp(f1, f2, shallow=True)Â¶\nCompare the files named f1 and f2, returning\nTrue\nif they seem equal,False\notherwise.If shallow is true and the\nos.stat()\nsignatures (file type, size, and modification time) of both files are identical, the files are taken to be equal.Otherwise, the files are treated as different if their sizes or contents differ.\nNote that no external programs are called from this function, giving it portability and efficiency.\nThis function uses a cache for past comparisons and the results, with cache entries invalidated if the\nos.stat()\ninformation for the file changes. The entire cache may be cleared usingclear_cache()\n.\n- filecmp.cmpfiles(dir1, dir2, common, shallow=True)Â¶\nCompare the files in the two directories dir1 and dir2 whose names are given by common.\nReturns three lists of file names: match, mismatch, errors. match contains the list of files that match, mismatch contains the names of those that donât, and errors lists the names of files which could not be compared. Files are listed in errors if they donât exist in one of the directories, the user lacks permission to read them or if the comparison could not be done for some other reason.\nThe shallow parameter has the same meaning and default value as for\nfilecmp.cmp()\n.For example,\ncmpfiles('a', 'b', ['c', 'd/e'])\nwill comparea/c\nwithb/c\nanda/d/e\nwithb/d/e\n.'c'\nand'd/e'\nwill each be in one of the three returned lists.\n- filecmp.clear_cache()Â¶\nClear the filecmp cache. This may be useful if a file is compared so quickly after it is modified that it is within the mtime resolution of the underlying filesystem.\nAdded in version 3.4.\nThe dircmp\nclassÂ¶\n- class filecmp.dircmp(a, b, ignore=None, hid"}
{"url": "https://docs.python.org/3/library/csv.html", "title": "", "text": "csv\nâ CSV File Reading and WritingÂ¶\nSource code: Lib/csv.py\nThe so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases. CSV format was used for many years prior to attempts to describe the format in a standardized way in RFC 4180. The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications. These differences can make it annoying to process CSV files from multiple sources. Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.\nThe csv\nmodule implements classes to read and write tabular data in CSV\nformat. It allows programmers to say, âwrite this data in the format preferred\nby Excel,â or âread data from this file which was generated by Excel,â without\nknowing the precise details of the CSV format used by Excel. Programmers can\nalso describe the CSV formats understood by other applications or define their\nown special-purpose CSV formats.\nThe csv\nmoduleâs reader\nand writer\nobjects read and\nwrite sequences. Programmers can also read and write data in dictionary form\nusing the DictReader\nand DictWriter\nclasses.\nSee also\n- PEP 305 - CSV File API\nThe Python Enhancement Proposal which proposed this addition to Python.\nModule ContentsÂ¶\nThe csv\nmodule defines the following functions:\n- csv.reader(csvfile, /, dialect='excel', **fmtparams)Â¶\nReturn a reader object that will process lines from the given csvfile. A csvfile must be an iterable of strings, each in the readerâs defined csv format. A csvfile is most commonly a file-like object or list. If csvfile is a file object, it should be opened with\nnewline=''\n. [1] An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect"}
{"url": "https://docs.python.org/3/library/fileinput.html", "title": "", "text": "fileinput\nâ Iterate over lines from multiple input streamsÂ¶\nSource code: Lib/fileinput.py\nThis module implements a helper class and functions to quickly write a\nloop over standard input or a list of files. If you just want to read or\nwrite one file see open()\n.\nThe typical use is:\nimport fileinput\nfor line in fileinput.input(encoding=\"utf-8\"):\nprocess(line)\nThis iterates over the lines of all files listed in sys.argv[1:]\n, defaulting\nto sys.stdin\nif the list is empty. If a filename is '-'\n, it is also\nreplaced by sys.stdin\nand the optional arguments mode and openhook\nare ignored. To specify an alternative list of filenames, pass it as the\nfirst argument to input()\n. A single file name is also allowed.\nAll files are opened in text mode by default, but you can override this by\nspecifying the mode parameter in the call to input()\nor\nFileInput\n. If an I/O error occurs during opening or reading a file,\nOSError\nis raised.\nIf sys.stdin\nis used more than once, the second and further use will return\nno lines, except perhaps for interactive use, or if it has been explicitly reset\n(e.g. using sys.stdin.seek(0)\n).\nEmpty files are opened and immediately closed; the only time their presence in the list of filenames is noticeable at all is when the last file opened is empty.\nLines are returned with any newlines intact, which means that the last line in a file may not have one.\nYou can control how files are opened by providing an opening hook via the\nopenhook parameter to fileinput.input()\nor FileInput()\n. The\nhook must be a function that takes two arguments, filename and mode, and\nreturns an accordingly opened file-like object. If encoding and/or errors\nare specified, they will be passed to the hook as additional keyword arguments.\nThis module provides a hook_compressed()\nto support compressed files.\nThe following function is the primary interface of this module:\n- fileinput.input(files=None, inplace=False, backup='', *, mode='r', openhook=None, encoding=None, errors=None)Â¶\nCrea"}
{"url": "https://docs.python.org/3/library/netdata.html", "title": "", "text": "Internet Data HandlingÂ¶\nThis chapter describes modules which support handling data formats commonly used on the internet.\nemail\nâ An email and MIME handling packageemail.message\n: Representing an email messageemail.parser\n: Parsing email messagesemail.generator\n: Generating MIME documentsemail.policy\n: Policy Objectsemail.errors\n: Exception and Defect classesemail.headerregistry\n: Custom Header Objectsemail.contentmanager\n: Managing MIME Contentemail\n: Examplesemail.message.Message\n: Representing an email message using thecompat32\nAPIemail.mime\n: Creating email and MIME objects from scratchemail.header\n: Internationalized headersemail.charset\n: Representing character setsemail.encoders\n: Encodersemail.utils\n: Miscellaneous utilitiesemail.iterators\n: Iterators\njson\nâ JSON encoder and decodermailbox\nâ Manipulate mailboxes in various formatsmimetypes\nâ Map filenames to MIME typesbase64\nâ Base16, Base32, Base64, Base85 Data Encodingsbinascii\nâ Convert between binary and ASCIIquopri\nâ Encode and decode MIME quoted-printable data"}
{"url": "https://docs.python.org/3/library/poplib.html", "title": "", "text": "poplib\nâ POP3 protocol clientÂ¶\nSource code: Lib/poplib.py\nThis module defines a class, POP3\n, which encapsulates a connection to a\nPOP3 server and implements the protocol as defined in RFC 1939. The\nPOP3\nclass supports both the minimal and optional command sets from\nRFC 1939. The POP3\nclass also supports the STLS\ncommand introduced\nin RFC 2595 to enable encrypted communication on an already established connection.\nAdditionally, this module provides a class POP3_SSL\n, which provides\nsupport for connecting to POP3 servers that use SSL as an underlying protocol\nlayer.\nNote that POP3, though widely supported, is obsolescent. The implementation\nquality of POP3 servers varies widely, and too many are quite poor. If your\nmailserver supports IMAP, you would be better off using the\nimaplib.IMAP4\nclass, as IMAP servers tend to be better implemented.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe poplib\nmodule provides two classes:\n- class poplib.POP3(host, port=POP3_PORT[, timeout])Â¶\nThis class implements the actual POP3 protocol. The connection is created when the instance is initialized. If port is omitted, the standard POP3 port (110) is used. The optional timeout parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).\nRaises an auditing event\npoplib.connect\nwith argumentsself\n,host\n,port\n.All commands will raise an auditing event\npoplib.putline\nwith argumentsself\nandline\n, whereline\nis the bytes about to be sent to the remote host.Changed in version 3.9: If the timeout parameter is set to be zero, it will raise a\nValueError\nto prevent the creation of a non-blocking socket.\n- class poplib.POP3_SSL(host, port=POP3_SSL_PORT, *, timeout=None, context=None)Â¶\nThis is a subclass of\nPOP3\nthat connects to the server over an SSL encrypted socket. If port is not specified, 995, the standard POP3-over-SSL port i"}
{"url": "https://docs.python.org/3/library/locale.html", "title": "", "text": "locale\nâ Internationalization servicesÂ¶\nSource code: Lib/locale.py\nThe locale\nmodule opens access to the POSIX locale database and\nfunctionality. The POSIX locale mechanism allows programmers to deal with\ncertain cultural issues in an application, without requiring the programmer to\nknow all the specifics of each country where the software is executed.\nThe locale\nmodule is implemented on top of the _locale\nmodule,\nwhich in turn uses an ANSI C locale implementation if available.\nThe locale\nmodule defines the following exception and functions:\n- exception locale.ErrorÂ¶\nException raised when the locale passed to\nsetlocale()\nis not recognized.\n- locale.setlocale(category, locale=None)Â¶\nIf locale is given and not\nNone\n,setlocale()\nmodifies the locale setting for the category. The available categories are listed in the data description below. locale may be a string, or a pair, language code and encoding. An empty string specifies the userâs default settings. If the modification of the locale fails, the exceptionError\nis raised. If successful, the new locale setting is returned.If locale is a pair, it is converted to a locale name using the locale aliasing engine. The language code has the same format as a locale name, but without encoding and\n@\n-modifier. The language code and encoding can beNone\n.If locale is omitted or\nNone\n, the current setting for category is returned.setlocale()\nis not thread-safe on most systems. Applications typically start with a call ofimport locale locale.setlocale(locale.LC_ALL, '')\nThis sets the locale for all categories to the userâs default setting (typically specified in the\nLANG\nenvironment variable). If the locale is not changed thereafter, using multithreading should not cause problems.\n- locale.localeconv()Â¶\nReturns the database of the local conventions as a dictionary. This dictionary has the following strings as keys:\nCategory\nKey\nMeaning\n'decimal_point'\nDecimal point character.\n'grouping'\nSequence of numbers specifying which rela"}
{"url": "https://docs.python.org/3/library/dialog.html", "title": "", "text": "Tkinter DialogsÂ¶\ntkinter.simpledialog\nâ Standard Tkinter input dialogsÂ¶\nSource code: Lib/tkinter/simpledialog.py\nThe tkinter.simpledialog\nmodule contains convenience classes and\nfunctions for creating simple modal dialogs to get a value from the user.\n- tkinter.simpledialog.askfloat(title, prompt, **kw)Â¶\n- tkinter.simpledialog.askinteger(title, prompt, **kw)Â¶\n- tkinter.simpledialog.askstring(title, prompt, **kw)Â¶\nThe above three functions provide dialogs that prompt the user to enter a value of the desired type.\n- class tkinter.simpledialog.Dialog(parent, title=None)Â¶\nThe base class for custom dialogs.\n- body(master)Â¶\nOverride to construct the dialogâs interface and return the widget that should have initial focus.\n- buttonbox()Â¶\nDefault behaviour adds OK and Cancel buttons. Override for custom button layouts.\ntkinter.filedialog\nâ File selection dialogsÂ¶\nSource code: Lib/tkinter/filedialog.py\nThe tkinter.filedialog\nmodule provides classes and factory functions for\ncreating file/directory selection windows.\nNative Load/Save DialogsÂ¶\nThe following classes and functions provide file dialog windows that combine a native look-and-feel with configuration options to customize behaviour. The following keyword arguments are applicable to the classes and functions listed below:\nparent - the window to place the dialog on top oftitle - the title of the windowinitialdir - the directory that the dialog starts ininitialfile - the file selected upon opening of the dialogfiletypes - a sequence of (label, pattern) tuples, â*â wildcard is alloweddefaultextension - default extension to append to file (save dialogs)multiple - when true, selection of multiple items is allowed\nStatic factory functions\nThe below functions when called create a modal, native look-and-feel dialog,\nwait for the userâs selection, then return the selected value(s) or None\nto the\ncaller.\n- tkinter.filedialog.askopenfile(mode='r', **options)Â¶\n- tkinter.filedialog.askopenfiles(mode='r', **options)Â¶\nThe "}
{"url": "https://docs.python.org/3/library/wave.html", "title": "", "text": "wave\nâ Read and write WAV filesÂ¶\nSource code: Lib/wave.py\nThe wave\nmodule provides a convenient interface to the Waveform Audio\nâWAVEâ (or âWAVâ) file format. Only uncompressed PCM encoded wave files are\nsupported.\nChanged in version 3.12: Support for WAVE_FORMAT_EXTENSIBLE\nheaders was added, provided that the\nextended format is KSDATAFORMAT_SUBTYPE_PCM\n.\nThe wave\nmodule defines the following function and exception:\n- wave.open(file, mode=None)Â¶\nIf file is a string, open the file by that name, otherwise treat it as a file-like object. mode can be:\n'rb'\nRead only mode.\n'wb'\nWrite only mode.\nNote that it does not allow read/write WAV files.\nA mode of\n'rb'\nreturns aWave_read\nobject, while a mode of'wb'\nreturns aWave_write\nobject. If mode is omitted and a file-like object is passed as file,file.mode\nis used as the default value for mode.If you pass in a file-like object, the wave object will not close it when its\nclose()\nmethod is called; it is the callerâs responsibility to close the file object.The\nopen()\nfunction may be used in awith\nstatement. When thewith\nblock completes, theWave_read.close()\norWave_write.close()\nmethod is called.Changed in version 3.4: Added support for unseekable files.\n- exception wave.ErrorÂ¶\nAn error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.\nWave_read ObjectsÂ¶\n- class wave.Wave_readÂ¶\nRead a WAV file.\nWave_read objects, as returned by\nopen()\n, have the following methods:- close()Â¶\nClose the stream if it was opened by\nwave\n, and make the instance unusable. This is called automatically on object collection.\n- getnchannels()Â¶\nReturns number of audio channels (\n1\nfor mono,2\nfor stereo).\n- getsampwidth()Â¶\nReturns sample width in bytes.\n- getframerate()Â¶\nReturns sampling frequency.\n- getnframes()Â¶\nReturns number of audio frames.\n- getcomptype()Â¶\nReturns compression type (\n'NONE'\nis the only supported type).\n- getcompname()Â¶\nHuman-readable version of\ngetcomptype()\n. U"}
{"url": "https://docs.python.org/3/library/grp.html", "title": "", "text": "grp\nâ The group databaseÂ¶\nThis module provides access to the Unix group database. It is available on all Unix versions.\nAvailability: Unix, not WASI, not Android, not iOS.\nGroup database entries are reported as a tuple-like object, whose attributes\ncorrespond to the members of the group\nstructure (Attribute field below, see\n<grp.h>\n):\nIndex |\nAttribute |\nMeaning |\n|---|---|---|\n0 |\ngr_name |\nthe name of the group |\n1 |\ngr_passwd |\nthe (encrypted) group password; often empty |\n2 |\ngr_gid |\nthe numerical group ID |\n3 |\ngr_mem |\nall the group memberâs user names |\nThe gid is an integer, name and password are strings, and the member list is a\nlist of strings. (Note that most users are not explicitly listed as members of\nthe group they are in according to the password database. Check both databases\nto get complete membership information. Also note that a gr_name\nthat\nstarts with a +\nor -\nis likely to be a YP/NIS reference and may not be\naccessible via getgrnam()\nor getgrgid()\n.)\nIt defines the following items:\n- grp.getgrgid(id)Â¶\nReturn the group database entry for the given numeric group ID.\nKeyError\nis raised if the entry asked for cannot be found.Changed in version 3.10:\nTypeError\nis raised for non-integer arguments like floats or strings.\n- grp.getgrnam(name)Â¶\nReturn the group database entry for the given group name.\nKeyError\nis raised if the entry asked for cannot be found.\n- grp.getgrall()Â¶\nReturn a list of all available group entries, in arbitrary order.\nSee also\n- Module\npwd\nAn interface to the user database, similar to this."}
{"url": "https://docs.python.org/3/library/http.client.html", "title": "", "text": "http.client\nâ HTTP protocol clientÂ¶\nSource code: Lib/http/client.py\nThis module defines classes that implement the client side of the HTTP and\nHTTPS protocols. It is normally not used directly â the module\nurllib.request\nuses it to handle URLs that use HTTP and HTTPS.\nSee also\nThe Requests package is recommended for a higher-level HTTP client interface.\nNote\nHTTPS support is only available if Python was compiled with SSL support\n(through the ssl\nmodule).\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe module provides the following classes:\n- class http.client.HTTPConnection(host, port=None, [timeout, ]source_address=None, blocksize=8192)Â¶\nAn\nHTTPConnection\ninstance represents one transaction with an HTTP server. It should be instantiated by passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the formhost:port\n, else the default HTTP port (80) is used. If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional blocksize parameter sets the buffer size in bytes for sending a file-like message body.For example, the following calls all create instances that connect to the server at the same host and port:\n>>> h1 = http.client.HTTPConnection('www.python.org') >>> h2 = http.client.HTTPConnection('www.python.org:80') >>> h3 = http.client.HTTPConnection('www.python.org', 80) >>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)\nChanged in version 3.2: source_address was added.\nChanged in version 3.4: The strict parameter was removed. HTTP 0.9-style âSimple Responsesâ are no longer supported.\nChanged in version 3.7: bloc"}
{"url": "https://docs.python.org/3/library/colorsys.html", "title": "", "text": "colorsys\nâ Conversions between color systemsÂ¶\nSource code: Lib/colorsys.py\nThe colorsys\nmodule defines bidirectional conversions of color values\nbetween colors expressed in the RGB (Red Green Blue) color space used in\ncomputer monitors and three other coordinate systems: YIQ, HLS (Hue Lightness\nSaturation) and HSV (Hue Saturation Value). Coordinates in all of these color\nspaces are floating-point values. In the YIQ space, the Y coordinate is between\n0 and 1, but the I and Q coordinates can be positive or negative. In all other\nspaces, the coordinates are all between 0 and 1.\nSee also\nMore information about color spaces can be found at https://poynton.ca/ColorFAQ.html and https://www.cambridgeincolour.com/tutorials/color-spaces.htm.\nThe colorsys\nmodule defines the following functions:\n- colorsys.rgb_to_yiq(r, g, b)Â¶\nConvert the color from RGB coordinates to YIQ coordinates.\n- colorsys.yiq_to_rgb(y, i, q)Â¶\nConvert the color from YIQ coordinates to RGB coordinates.\n- colorsys.rgb_to_hls(r, g, b)Â¶\nConvert the color from RGB coordinates to HLS coordinates.\n- colorsys.hls_to_rgb(h, l, s)Â¶\nConvert the color from HLS coordinates to RGB coordinates.\n- colorsys.rgb_to_hsv(r, g, b)Â¶\nConvert the color from RGB coordinates to HSV coordinates.\n- colorsys.hsv_to_rgb(h, s, v)Â¶\nConvert the color from HSV coordinates to RGB coordinates.\nExample:\n>>> import colorsys\n>>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)\n(0.5, 0.5, 0.4)\n>>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)\n(0.2, 0.4, 0.4)"}
{"url": "https://docs.python.org/3/library/symtable.html", "title": "", "text": "symtable\nâ Access to the compilerâs symbol tablesÂ¶\nSource code: Lib/symtable.py\nSymbol tables are generated by the compiler from AST just before bytecode is\ngenerated. The symbol table is responsible for calculating the scope of every\nidentifier in the code. symtable\nprovides an interface to examine these\ntables.\nGenerating Symbol TablesÂ¶\n- symtable.symtable(code, filename, compile_type)Â¶\nReturn the toplevel\nSymbolTable\nfor the Python source code. filename is the name of the file containing the code. compile_type is like the mode argument tocompile()\n.\nExamining Symbol TablesÂ¶\n- class symtable.SymbolTableTypeÂ¶\nAn enumeration indicating the type of a\nSymbolTable\nobject.- MODULE = \"module\"Â¶\nUsed for the symbol table of a module.\n- FUNCTION = \"function\"Â¶\nUsed for the symbol table of a function.\n- CLASS = \"class\"Â¶\nUsed for the symbol table of a class.\nThe following members refer to different flavors of annotation scopes.\n- ANNOTATION = \"annotation\"Â¶\nUsed for annotations if\nfrom __future__ import annotations\nis active.\n- TYPE_PARAMETERS = \"type parameters\"Â¶\nUsed for the symbol table of generic functions or generic classes.\n- TYPE_VARIABLE = \"type variable\"Â¶\nUsed for the symbol table of the bound, the constraint tuple or the default value of a single type variable in the formal sense, i.e., a TypeVar, a TypeVarTuple or a ParamSpec object (the latter two do not support a bound or a constraint tuple).\nAdded in version 3.13.\n- class symtable.SymbolTableÂ¶\nA namespace table for a block. The constructor is not public.\n- get_type()Â¶\nReturn the type of the symbol table. Possible values are members of the\nSymbolTableType\nenumeration.Changed in version 3.12: Added\n'annotation'\n,'TypeVar bound'\n,'type alias'\n, and'type parameter'\nas possible return values.Changed in version 3.13: Return values are members of the\nSymbolTableType\nenumeration.The exact values of the returned string may change in the future, and thus, it is recommended to use\nSymbolTableType\nmembers instead"}
{"url": "https://docs.python.org/3/library/removed.html", "title": "", "text": "Removed ModulesÂ¶\nThe modules described in this chapter have been removed from the Python standard library. They are documented here to help people find replacements.\naifc\nâ Read and write AIFF and AIFC filesasynchat\nâ Asynchronous socket command/response handlerasyncore\nâ Asynchronous socket handleraudioop\nâ Manipulate raw audio datacgi\nâ Common Gateway Interface supportcgitb\nâ Traceback manager for CGI scriptschunk\nâ Read IFF chunked datacrypt\nâ Function to check Unix passwordsdistutils\nâ Building and installing Python modulesimghdr\nâ Determine the type of an imageimp\nâ Access the import internalsmailcap\nâ Mailcap file handlingmsilib\nâ Read and write Microsoft Installer filesnis\nâ Interface to Sunâs NIS (Yellow Pages)nntplib\nâ NNTP protocol clientossaudiodev\nâ Access to OSS-compatible audio devicespipes\nâ Interface to shell pipelinessmtpd\nâ SMTP Serversndhdr\nâ Determine type of sound filespwd\nâ The shadow password databasesunau\nâ Read and write Sun AU filestelnetlib\nâ Telnet clientuu\nâ Encode and decode uuencode filesxdrlib\nâ Encode and decode XDR data"}
{"url": "https://docs.python.org/3/library/struct.html", "title": "", "text": "struct\nâ Interpret bytes as packed binary dataÂ¶\nSource code: Lib/struct.py\nThis module converts between Python values and C structs represented\nas Python bytes\nobjects. Compact format strings\ndescribe the intended conversions to/from Python values.\nThe moduleâs functions and objects can be used for two largely\ndistinct applications, data exchange with external sources (files or\nnetwork connections), or data transfer between the Python application\nand the C layer.\nNote\nWhen no prefix character is given, native mode is the default. It packs or unpacks data based on the platform and compiler on which the Python interpreter was built. The result of packing a given C struct includes pad bytes which maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. In contrast, when communicating data between external sources, the programmer is responsible for defining byte ordering and padding between elements. See Byte Order, Size, and Alignment for details.\nSeveral struct\nfunctions (and methods of Struct\n) take a buffer\nargument. This refers to objects that implement the Buffer Protocol and\nprovide either a readable or read-writable buffer. The most common types used\nfor that purpose are bytes\nand bytearray\n, but many other types\nthat can be viewed as an array of bytes implement the buffer protocol, so that\nthey can be read/filled without additional copying from a bytes\nobject.\nFunctions and ExceptionsÂ¶\nThe module defines the following exception and functions:\n- exception struct.errorÂ¶\nException raised on various occasions; argument is a string describing what is wrong.\n- struct.pack(format, v1, v2, ...)Â¶\nReturn a bytes object containing the values v1, v2, â¦ packed according to the format string format. The arguments must match the values required by the format exactly.\n- struct.pack_into(format, buffer, offset, v1, v2, ...)Â¶\nPack the values v1, v2, â¦ according to the format string format and write the packed bytes int"}
{"url": "https://docs.python.org/3/library/dbm.html", "title": "", "text": "dbm\nâ Interfaces to Unix âdatabasesâÂ¶\nSource code: Lib/dbm/__init__.py\ndbm\nis a generic interface to variants of the DBM database:\nIf none of these modules are installed, the\nslow-but-simple implementation in module dbm.dumb\nwill be used. There\nis a third party interface to\nthe Oracle Berkeley DB.\n- exception dbm.errorÂ¶\nA tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named\ndbm.error\nas the first item â the latter is used whendbm.error\nis raised.\n- dbm.whichdb(filename)Â¶\nThis function attempts to guess which of the several simple database modules available â\ndbm.sqlite3\n,dbm.gnu\n,dbm.ndbm\n, ordbm.dumb\nâ should be used to open a given file.Return one of the following values:\nNone\nif the file canât be opened because itâs unreadable or doesnât existthe empty string (\n''\n) if the fileâs format canât be guesseda string containing the required module name, such as\n'dbm.ndbm'\nor'dbm.gnu'\nChanged in version 3.11: filename accepts a path-like object.\n- dbm.open(file, flag='r', mode=0o666)Â¶\nOpen a database and return the corresponding database object.\n- Parameters:\nfile (path-like object) â\nThe database file to open.\nIf the database file already exists, the\nwhichdb()\nfunction is used to determine its type and the appropriate module is used; if it does not exist, the first submodule listed above that can be imported is used.flag (str) â\n'r'\n(default): Open existing database for reading only.'w'\n: Open existing database for reading and writing.'c'\n: Open database for reading and writing, creating it if it doesnât exist.'n'\n: Always create a new, empty database, open for reading and writing.\nmode (int) â The Unix file access mode of the file (default: octal\n0o666\n), used only when the database has to be created.\nChanged in version 3.11: file accepts a path-like object.\nThe object returned by open()\nsupports the basic\nfunctionality of mutable mappings;\nkeys and their corresponding values can be stored, retriev"}
{"url": "https://docs.python.org/3/library/unittest.mock-examples.html", "title": "", "text": "unittest.mock\nâ getting startedÂ¶\nAdded in version 3.3.\nUsing MockÂ¶\nMock Patching MethodsÂ¶\nCommon uses for Mock\nobjects include:\nPatching methods\nRecording method calls on objects\nYou might want to replace a method on an object to check that it is called with the correct arguments by another part of the system:\n>>> real = SomeClass()\n>>> real.method = MagicMock(name='method')\n>>> real.method(3, 4, 5, key='value')\n<MagicMock name='method()' id='...'>\nOnce our mock has been used (real.method\nin this example) it has methods\nand attributes that allow you to make assertions about how it has been used.\nNote\nIn most of these examples the Mock\nand MagicMock\nclasses\nare interchangeable. As the MagicMock\nis the more capable class it makes\na sensible one to use by default.\nOnce the mock has been called its called\nattribute is set to\nTrue\n. More importantly we can use the assert_called_with()\nor\nassert_called_once_with()\nmethod to check that it was called with\nthe correct arguments.\nThis example tests that calling ProductionClass().method\nresults in a call to\nthe something\nmethod:\n>>> class ProductionClass:\n... def method(self):\n... self.something(1, 2, 3)\n... def something(self, a, b, c):\n... pass\n...\n>>> real = ProductionClass()\n>>> real.something = MagicMock()\n>>> real.method()\n>>> real.something.assert_called_once_with(1, 2, 3)\nMock for Method Calls on an ObjectÂ¶\nIn the last example we patched a method directly on an object to check that it was called correctly. Another common use case is to pass an object into a method (or some part of the system under test) and then check that it is used in the correct way.\nThe simple ProductionClass\nbelow has a closer\nmethod. If it is called with\nan object then it calls close\non it.\n>>> class ProductionClass:\n... def closer(self, something):\n... something.close()\n...\nSo to test it we need to pass in an object with a close\nmethod and check\nthat it was called correctly.\n>>> real = ProductionClass()\n>>> mock = Mock()\n>>> real.closer(mock"}
{"url": "https://docs.python.org/3/library/debug.html", "title": "", "text": "Debugging and ProfilingÂ¶\nThese libraries help you with Python development: the debugger enables you to step through code, analyze stack frames and set breakpoints etc., and the profilers run code and give you a detailed breakdown of execution times, allowing you to identify bottlenecks in your programs. Auditing events provide visibility into runtime behaviors that would otherwise require intrusive debugging or patching."}
{"url": "https://docs.python.org/3/library/py_compile.html", "title": "", "text": "py_compile\nâ Compile Python source filesÂ¶\nSource code: Lib/py_compile.py\nThe py_compile\nmodule provides a function to generate a byte-code file\nfrom a source file, and another function used when the module source file is\ninvoked as a script.\nThough not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.\n- exception py_compile.PyCompileErrorÂ¶\nException raised when an error occurs while attempting to compile the file.\n- py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=-1, invalidation_mode=PycInvalidationMode.TIMESTAMP, quiet=0)Â¶\nCompile a source file to byte-code and write out the byte-code cache file. The source code is loaded from the file named file. The byte-code is written to cfile, which defaults to the PEP 3147/PEP 488 path, ending in\n.pyc\n. For example, if file is/foo/bar/baz.py\ncfile will default to/foo/bar/__pycache__/baz.cpython-32.pyc\nfor Python 3.2. If dfile is specified, it is used instead of file as the name of the source file from which source lines are obtained for display in exception tracebacks. If doraise is true, aPyCompileError\nis raised when an error is encountered while compiling file. If doraise is false (the default), an error string is written tosys.stderr\n, but no exception is raised. This function returns the path to byte-compiled file, i.e. whatever cfile value was used.The doraise and quiet arguments determine how errors are handled while compiling file. If quiet is 0 or 1, and doraise is false, the default behaviour is enabled: an error string is written to\nsys.stderr\n, and the function returnsNone\ninstead of a path. If doraise is true, aPyCompileError\nis raised instead. However if quiet is 2, no message is written, and doraise has no effect.If the path that cfile becomes (either explicitly specified or computed) is a symlink or non-regular file,"}
{"url": "https://docs.python.org/3/library/marshal.html", "title": "", "text": "marshal\nâ Internal Python object serializationÂ¶\nThis module contains functions that can read and write Python values in a binary format. The format is specific to Python, but independent of machine architecture issues (e.g., you can write a Python value to a file on a PC, transport the file to a Mac, and read it back there). Details of the format are undocumented on purpose; it may change between Python versions (although it rarely does). [1]\nThis is not a general âpersistenceâ module. For general persistence and\ntransfer of Python objects through RPC calls, see the modules pickle\nand\nshelve\n. The marshal\nmodule exists mainly to support reading and\nwriting the âpseudo-compiledâ code for Python modules of .pyc\nfiles.\nTherefore, the Python maintainers reserve the right to modify the marshal format\nin backward incompatible ways should the need arise.\nThe format of code objects is not compatible between Python versions,\neven if the version of the format is the same.\nDe-serializing a code object in the incorrect Python version has undefined behavior.\nIf youâre serializing and\nde-serializing Python objects, use the pickle\nmodule instead â the\nperformance is comparable, version independence is guaranteed, and pickle\nsupports a substantially wider range of objects than marshal.\nWarning\nThe marshal\nmodule is not intended to be secure against erroneous or\nmaliciously constructed data. Never unmarshal data received from an\nuntrusted or unauthenticated source.\nNot all Python object types are supported; in general, only objects whose value\nis independent from a particular invocation of Python can be written and read by\nthis module. The following types are supported: booleans, integers, floating-point\nnumbers, complex numbers, strings, bytes, bytearrays, tuples, lists, sets,\nfrozensets, dictionaries, and code objects (if allow_code is true),\nwhere it should be understood that\ntuples, lists, sets, frozensets and dictionaries are only supported as long as\nthe values contained ther"}
{"url": "https://docs.python.org/3/library/site.html", "title": "", "text": "site\nâ Site-specific configuration hookÂ¶\nSource code: Lib/site.py\nThis module is automatically imported during initialization. The automatic\nimport can be suppressed using the interpreterâs -S\noption.\nImporting this module normally appends site-specific paths to the module search path\nand adds callables, including help()\nto the built-in\nnamespace. However, Python startup option -S\nblocks this and this module\ncan be safely imported with no automatic modifications to the module search path\nor additions to the builtins. To explicitly trigger the usual site-specific\nadditions, call the main()\nfunction.\nChanged in version 3.3: Importing the module used to trigger paths manipulation even when using\n-S\n.\nIt starts by constructing up to four directories from a head and a tail part.\nFor the head part, it uses sys.prefix\nand sys.exec_prefix\n; empty heads\nare skipped. For the tail part, it uses the empty string and then\nlib/site-packages\n(on Windows) or\nlib/pythonX.Y[t]/site-packages\n(on Unix and macOS). (The\noptional suffix âtâ indicates the free threading build, and is\nappended if \"t\"\nis present in the sys.abiflags\nconstant.)\nFor each\nof the distinct head-tail combinations, it sees if it refers to an existing\ndirectory, and if so, adds it to sys.path\nand also inspects the newly\nadded path for configuration files.\nChanged in version 3.5: Support for the âsite-pythonâ directory has been removed.\nChanged in version 3.13: On Unix, Free threading Python installations are\nidentified by the âtâ suffix in the version-specific directory name, such as\nlib/python3.13t/\n.\nIf a file named âpyvenv.cfgâ exists one directory above sys.executable, sys.prefix and sys.exec_prefix are set to that directory and it is also checked for site-packages (sys.base_prefix and sys.base_exec_prefix will always be the ârealâ prefixes of the Python installation). If âpyvenv.cfgâ (a bootstrap configuration file) contains the key âinclude-system-site-packagesâ set to anything other than âtrueâ (case-insensit"}
{"url": "https://docs.python.org/3/library/sqlite3.html", "title": "", "text": "sqlite3\nâ DB-API 2.0 interface for SQLite databasesÂ¶\nSource code: Lib/sqlite3/\nSQLite is a C library that provides a lightweight disk-based database that doesnât require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. Itâs also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.\nThe sqlite3\nmodule was written by Gerhard HÃ¤ring. It provides an SQL interface\ncompliant with the DB-API 2.0 specification described by PEP 249, and\nrequires SQLite 3.15.2 or newer.\nThis document includes four main sections:\nTutorial teaches how to use the\nsqlite3\nmodule.Reference describes the classes and functions this module defines.\nHow-to guides details how to handle specific tasks.\nExplanation provides in-depth background on transaction control.\nSee also\n- https://www.sqlite.org\nThe SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect.\n- https://www.w3schools.com/sql/\nTutorial, reference and examples for learning SQL syntax.\n- PEP 249 - Database API Specification 2.0\nPEP written by Marc-AndrÃ© Lemburg.\nTutorialÂ¶\nIn this tutorial, you will create a database of Monty Python movies\nusing basic sqlite3\nfunctionality.\nIt assumes a fundamental understanding of database concepts,\nincluding cursors and transactions.\nFirst, we need to create a new database and open\na database connection to allow sqlite3\nto work with it.\nCall sqlite3.connect()\nto create a connection to\nthe database tutorial.db\nin the current working directory,\nimplicitly creating it if it does not exist:\nimport sqlite3\ncon = sqlite3.connect(\"tutorial.db\")\nThe returned Connection\nobject con\nrepresents the connection to the on-disk database.\nIn order to execute SQL statements and fetch results from SQL queries,\nwe will need to use a database cursor.\nCall con.cursor()\nto c"}
{"url": "https://docs.python.org/3/library/json.html", "title": "", "text": "json\nâ JSON encoder and decoderÂ¶\nSource code: Lib/json/__init__.py\nJSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax (although it is not a strict subset of JavaScript [1] ).\nNote\nThe term âobjectâ in the context of JSON processing in Python can be ambiguous. All values in Python are objects. In JSON, an object refers to any data wrapped in curly braces, similar to a Python dictionary.\nWarning\nBe cautious when parsing JSON data from untrusted sources. A malicious JSON string may cause the decoder to consume considerable CPU and memory resources. Limiting the size of data to be parsed is recommended.\nThis module exposes an API familiar to users of the standard library\nmarshal\nand pickle\nmodules.\nEncoding basic Python object hierarchies:\n>>> import json\n>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n>>> print(json.dumps(\"\\\"foo\\bar\"))\n\"\\\"foo\\bar\"\n>>> print(json.dumps('\\u1234'))\n\"\\u1234\"\n>>> print(json.dumps('\\\\'))\n\"\\\\\"\n>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n>>> from io import StringIO\n>>> io = StringIO()\n>>> json.dump(['streaming API'], io)\n>>> io.getvalue()\n'[\"streaming API\"]'\nCompact encoding:\n>>> import json\n>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))\n'[1,2,3,{\"4\":5,\"6\":7}]'\nPretty printing:\n>>> import json\n>>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))\n{\n\"4\": 5,\n\"6\": 7\n}\nCustomizing JSON object encoding:\n>>> import json\n>>> def custom_json(obj):\n... if isinstance(obj, complex):\n... return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}\n... raise TypeError(f'Cannot serialize object of {type(obj)}')\n...\n>>> json.dumps(1 + 2j, default=custom_json)\n'{\"__complex__\": true, \"real\": 1.0, \"imag\": 2.0}'\nDecoding JSON:\n>>> import json\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]')\n"}
{"url": "https://docs.python.org/3/library/tkinter.colorchooser.html", "title": "", "text": "tkinter.colorchooser\nâ Color choosing dialogÂ¶\nSource code: Lib/tkinter/colorchooser.py\nThe tkinter.colorchooser\nmodule provides the Chooser\nclass\nas an interface to the native color picker dialog. Chooser\nimplements\na modal color choosing dialog window. The Chooser\nclass inherits from\nthe Dialog\nclass.\n- class tkinter.colorchooser.Chooser(master=None, **options)Â¶\n- tkinter.colorchooser.askcolor(color=None, **options)Â¶\nCreate a color choosing dialog. A call to this method will show the window, wait for the user to make a selection, and return the selected color (or\nNone\n) to the caller.\nSee also\n- Module\ntkinter.commondialog\nTkinter standard dialog module"}
{"url": "https://docs.python.org/3/library/distribution.html", "title": "", "text": "Software Packaging and DistributionÂ¶\nThese libraries help you with publishing and installing Python software. While these modules are designed to work in conjunction with the Python Package Index, they can also be used with a local index server, or without any index server at all."}
{"url": "https://docs.python.org/3/library/functions.html", "title": "", "text": "Built-in FunctionsÂ¶\nThe Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\nBuilt-in Functions |\n|||\n|---|---|---|---|\n- abs(number, /)Â¶\nReturn the absolute value of a number. The argument may be an integer, a floating-point number, or an object implementing\n__abs__()\n. If the argument is a complex number, its magnitude is returned.\n- aiter(async_iterable, /)Â¶\nReturn an asynchronous iterator for an asynchronous iterable. Equivalent to calling\nx.__aiter__()\n.Note: Unlike\niter()\n,aiter()\nhas no 2-argument variant.Added in version 3.10.\n- all(iterable, /)Â¶\nReturn\nTrue\nif all elements of the iterable are true (or if the iterable is empty). Equivalent to:def all(iterable): for element in iterable: if not element: return False return True\n- awaitable anext(async_iterator, /)Â¶\n- awaitable anext(async_iterator, default, /)\nWhen awaited, return the next item from the given asynchronous iterator, or default if given and the iterator is exhausted.\nThis is the async variant of the\nnext()\nbuiltin, and behaves similarly.This calls the\n__anext__()\nmethod of async_iterator, returning an awaitable. Awaiting this returns the next value of the iterator. If default is given, it is returned if the iterator is exhausted, otherwiseStopAsyncIteration\nis raised.Added in version 3.10.\n- any(iterable, /)Â¶\nReturn\nTrue\nif any element of the iterable is true. If the iterable is empty, returnFalse\n. Equivalent to:def any(iterable): for element in iterable: if element: return True return False\n- ascii(object, /)Â¶\nAs\nrepr()\n, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned byrepr()\nusing\\x\n,\\u\n, or\\U\nescapes. This generates a string similar to that returned byrepr()\nin Python 2.\n- bin(integer, /)Â¶\nConvert an integer number to a binary string prefixed with â0bâ. The result is a valid Python expression. If integer is not a Pytho"}
{"url": "https://docs.python.org/3/library/xml.dom.pulldom.html", "title": "", "text": "xml.dom.pulldom\nâ Support for building partial DOM treesÂ¶\nSource code: Lib/xml/dom/pulldom.py\nThe xml.dom.pulldom\nmodule provides a âpull parserâ which can also be\nasked to produce DOM-accessible fragments of the document where necessary. The\nbasic concept involves pulling âeventsâ from a stream of incoming XML and\nprocessing them. In contrast to SAX which also employs an event-driven\nprocessing model together with callbacks, the user of a pull parser is\nresponsible for explicitly pulling events from the stream, looping over those\nevents until either processing is finished or an error condition occurs.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nChanged in version 3.7.1: The SAX parser no longer processes general external entities by default to increase security by default. To enable processing of external entities, pass a custom parser instance in:\nfrom xml.dom.pulldom import parse\nfrom xml.sax import make_parser\nfrom xml.sax.handler import feature_external_ges\nparser = make_parser()\nparser.setFeature(feature_external_ges, True)\nparse(filename, parser=parser)\nExample:\nfrom xml.dom import pulldom\ndoc = pulldom.parse('sales_items.xml')\nfor event, node in doc:\nif event == pulldom.START_ELEMENT and node.tagName == 'item':\nif int(node.getAttribute('price')) > 50:\ndoc.expandNode(node)\nprint(node.toxml())\nevent\nis a constant and can be one of:\nSTART_ELEMENT\nEND_ELEMENT\nCOMMENT\nSTART_DOCUMENT\nEND_DOCUMENT\nCHARACTERS\nPROCESSING_INSTRUCTION\nIGNORABLE_WHITESPACE\nnode\nis an object of type xml.dom.minidom.Document\n,\nxml.dom.minidom.Element\nor xml.dom.minidom.Text\n.\nSince the document is treated as a âflatâ stream of events, the document âtreeâ\nis implicitly traversed and the desired elements are found regardless of their\ndepth in the tree. In other words, one does not need to consider hierarchical\nissues such as recursive searching of the document nodes, although if the\ncontext of elements were important, one would either need to maintain som"}
{"url": "https://docs.python.org/3/library/netrc.html", "title": "", "text": "netrc\nâ netrc file processingÂ¶\nSource code: Lib/netrc.py\nThe netrc\nclass parses and encapsulates the netrc file format used by\nthe Unix ftp program and other FTP clients.\n- class netrc.netrc([file])Â¶\nA\nnetrc\ninstance or subclass instance encapsulates data from a netrc file. The initialization argument, if present, specifies the file to parse. If no argument is given, the file.netrc\nin the userâs home directory â as determined byos.path.expanduser()\nâ will be read. Otherwise, aFileNotFoundError\nexception will be raised. Parse errors will raiseNetrcParseError\nwith diagnostic information including the file name, line number, and terminating token.If no argument is specified on a POSIX system, the presence of passwords in the\n.netrc\nfile will raise aNetrcParseError\nif the file ownership or permissions are insecure (owned by a user other than the user running the process, or accessible for read or write by any other user). This implements security behavior equivalent to that of ftp and other programs that use.netrc\n. Such security checks are not available on platforms that do not supportos.getuid()\n.Changed in version 3.4: Added the POSIX permission check.\nChanged in version 3.7:\nos.path.expanduser()\nis used to find the location of the.netrc\nfile when file is not passed as argument.Changed in version 3.10:\nnetrc\ntry UTF-8 encoding before using locale specific encoding. The entry in the netrc file no longer needs to contain all tokens. The missing tokensâ value default to an empty string. All the tokens and their values now can contain arbitrary characters, like whitespace and non-ASCII characters. If the login name is anonymous, it wonât trigger the security check.\n- exception netrc.NetrcParseErrorÂ¶\nException raised by the\nnetrc\nclass when syntactical errors are encountered in source text. Instances of this exception provide three interesting attributes:- msgÂ¶\nTextual explanation of the error.\n- filenameÂ¶\nThe name of the source file.\n- linenoÂ¶\nThe line number on wh"}
{"url": "https://docs.python.org/3/library/xml.html", "title": "", "text": "XML Processing ModulesÂ¶\nSource code: Lib/xml/\nPythonâs interfaces for processing XML are grouped in the xml\npackage.\nNote\nIf you need to parse untrusted or unauthenticated data, see XML security.\nIt is important to note that modules in the xml\npackage require that\nthere be at least one SAX-compliant XML parser available. The Expat parser is\nincluded with Python, so the xml.parsers.expat\nmodule will always be\navailable.\nThe documentation for the xml.dom\nand xml.sax\npackages are the\ndefinition of the Python bindings for the DOM and SAX interfaces.\nThe XML handling submodules are:\nxml.etree.ElementTree\n: the ElementTree API, a simple and lightweight XML processor\nxml.dom\n: the DOM API definitionxml.dom.minidom\n: a minimal DOM implementationxml.dom.pulldom\n: support for building partial DOM trees\nxml.sax\n: SAX2 base classes and convenience functionsxml.parsers.expat\n: the Expat parser binding\nXML securityÂ¶\nAn attacker can abuse XML features to carry out denial of service attacks, access local files, generate network connections to other machines, or circumvent firewalls.\nExpat versions lower than 2.6.0 may be vulnerable to âbillion laughsâ,\nâquadratic blowupâ and âlarge tokensâ. Python may be vulnerable if it uses such\nolder versions of Expat as a system-provided library.\nCheck pyexpat.EXPAT_VERSION\n.\nxmlrpc\nis vulnerable to the âdecompression bombâ attack.\n- billion laughs / exponential entity expansion\nThe Billion Laughs attack â also known as exponential entity expansion â uses multiple levels of nested entities. Each entity refers to another entity several times, and the final entity definition contains a small string. The exponential expansion results in several gigabytes of text and consumes lots of memory and CPU time.\n- quadratic blowup entity expansion\nA quadratic blowup attack is similar to a Billion Laughs attack; it abuses entity expansion, too. Instead of nested entities it repeats one large entity with a couple of thousand chars over and over again. The "}
{"url": "https://docs.python.org/3/library/urllib.parse.html", "title": "", "text": "urllib.parse\nâ Parse URLs into componentsÂ¶\nSource code: Lib/urllib/parse.py\nThis module defines a standard interface to break Uniform Resource Locator (URL) strings up in components (addressing scheme, network location, path etc.), to combine the components back into a URL string, and to convert a ârelative URLâ to an absolute URL given a âbase URL.â\nThe module has been designed to match the internet RFC on Relative Uniform\nResource Locators. It supports the following URL schemes: file\n, ftp\n,\ngopher\n, hdl\n, http\n, https\n, imap\n, itms-services\n, mailto\n, mms\n,\nnews\n, nntp\n, prospero\n, rsync\n, rtsp\n, rtsps\n, rtspu\n,\nsftp\n, shttp\n, sip\n, sips\n, snews\n, svn\n, svn+ssh\n,\ntelnet\n, wais\n, ws\n, wss\n.\nCPython implementation detail: The inclusion of the itms-services\nURL scheme can prevent an app from\npassing Appleâs App Store review process for the macOS and iOS App Stores.\nHandling for the itms-services\nscheme is always removed on iOS; on\nmacOS, it may be removed if CPython has been built with the\n--with-app-store-compliance\noption.\nThe urllib.parse\nmodule defines functions that fall into two broad\ncategories: URL parsing and URL quoting. These are covered in detail in\nthe following sections.\nThis moduleâs functions use the deprecated term netloc\n(or net_loc\n),\nwhich was introduced in RFC 1808. However, this term has been obsoleted by\nRFC 3986, which introduced the term authority\nas its replacement.\nThe use of netloc\nis continued for backward compatibility.\nURL ParsingÂ¶\nThe URL parsing functions focus on splitting a URL string into its components, or on combining URL components into a URL string.\n- urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)Â¶\nParse a URL into six components, returning a 6-item named tuple. This corresponds to the general structure of a URL:\nscheme://netloc/path;parameters?query#fragment\n. Each tuple item is a string, possibly empty. The components are not broken up into smaller parts (for example, the network location is a single st"}
{"url": "https://docs.python.org/3/library/time.html", "title": "", "text": "time\nâ Time access and conversionsÂ¶\nThis module provides various time-related functions. For related\nfunctionality, see also the datetime\nand calendar\nmodules.\nAlthough this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.\nAn explanation of some terminology and conventions is in order.\nThe epoch is the point where the time starts, the return value of\ntime.gmtime(0)\n. It is January 1, 1970, 00:00:00 (UTC) on all platforms.\nThe term seconds since the epoch refers to the total number of elapsed seconds since the epoch, typically excluding leap seconds. Leap seconds are excluded from this total on all POSIX-compliant platforms.\nThe functions in this module may not handle dates and times before the epoch or far in the future. The cut-off point in the future is determined by the C library; for 32-bit systems, it is typically in 2038.\nFunction\nstrptime()\ncan parse 2-digit years when given%y\nformat code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69â99 are mapped to 1969â1999, and values 0â68 are mapped to 2000â2068.\nUTC is Coordinated Universal Time and superseded Greenwich Mean Time or GMT as the basis of international timekeeping. The acronym UTC is not a mistake but conforms to an earlier, language-agnostic naming scheme for time standards such as UT0, UT1, and UT2.\nDST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.\nThe precision of the various real-time functions m"}
{"url": "https://docs.python.org/3/library/compileall.html", "title": "", "text": "compileall\nâ Byte-compile Python librariesÂ¶\nSource code: Lib/compileall.py\nThis module provides some utility functions to support installing Python libraries. These functions compile Python source files in a directory tree. This module can be used to create the cached byte-code files at library installation time, which makes them available for use even by users who donât have write permission to the library directories.\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nCommand-line useÂ¶\nThis module can work as a script (using python -m compileall) to compile Python sources.\n- directory ...Â¶\n- file ...Â¶\nPositional arguments are files to compile or directories that contain source files, traversed recursively. If no argument is given, behave as if the command line was\n-l <directories from sys.path>\n.\n- -lÂ¶\nDo not recurse into subdirectories, only compile source code files directly contained in the named or implied directories.\n- -fÂ¶\nForce rebuild even if timestamps are up-to-date.\n- -qÂ¶\nDo not print the list of files compiled. If passed once, error messages will still be printed. If passed twice (\n-qq\n), all output is suppressed.\n- -d destdirÂ¶\nDirectory prepended to the path to each file being compiled. This will appear in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.\n- -s strip_prefixÂ¶\nRemove the given prefix from paths recorded in the\n.pyc\nfiles. Paths are made relative to the prefix.This option can be used with\n-p\nbut not with-d\n.\n- -p prepend_prefixÂ¶\nPrepend the given prefix to paths recorded in the\n.pyc\nfiles. Use-p /\nto make the paths absolute.This option can be used with\n-s\nbut not with-d\n.\n- -x regexÂ¶\nregex is used to search the full path to each file considered for compilation, and if the regex "}
{"url": "https://docs.python.org/3/library/urllib.request.html", "title": "", "text": "urllib.request\nâ Extensible library for opening URLsÂ¶\nSource code: Lib/urllib/request.py\nThe urllib.request\nmodule defines functions and classes which help in\nopening URLs (mostly HTTP) in a complex world â basic and digest\nauthentication, redirections, cookies and more.\nSee also\nThe Requests package is recommended for a higher-level HTTP client interface.\nWarning\nOn macOS it is unsafe to use this module in programs using\nos.fork()\nbecause the getproxies()\nimplementation for\nmacOS uses a higher-level system API. Set the environment variable\nno_proxy\nto *\nto avoid this problem\n(e.g. os.environ[\"no_proxy\"] = \"*\"\n).\nAvailability: not WASI.\nThis module does not work or is not available on WebAssembly. See WebAssembly platforms for more information.\nThe urllib.request\nmodule defines the following functions:\n- urllib.request.urlopen(url, data=None, [timeout, ]*, context=None)Â¶\nOpen url, which can be either a string containing a valid, properly encoded URL, or a\nRequest\nobject.data must be an object specifying additional data to be sent to the server, or\nNone\nif no such data is needed. SeeRequest\nfor details.urllib.request module uses HTTP/1.1 and includes\nConnection:close\nheader in its HTTP requests.The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). This actually only works for HTTP, HTTPS and FTP connections.\nIf context is specified, it must be a\nssl.SSLContext\ninstance describing the various SSL options. SeeHTTPSConnection\nfor more details.This function always returns an object which can work as a context manager and has the properties url, headers, and status. See\nurllib.response.addinfourl\nfor more detail on these properties.For HTTP and HTTPS URLs, this function returns a\nhttp.client.HTTPResponse\nobject slightly modified. In addition to the three new methods above, the msg attribute contains the same information as thereason\nattribute "}
{"url": "https://docs.python.org/3/library/unicodedata.html", "title": "", "text": "unicodedata\nâ Unicode DatabaseÂ¶\nThis module provides access to the Unicode Character Database (UCD) which defines character properties for all Unicode characters. The data contained in this database is compiled from the UCD version 15.1.0.\nThe module uses the same names and symbols as defined by Unicode Standard Annex #44, âUnicode Character Databaseâ. It defines the following functions:\nSee also\nThe Unicode HOWTO for more information about Unicode and how to use this module.\n- unicodedata.lookup(name)Â¶\nLook up character by name. If a character with the given name is found, return the corresponding character. If not found,\nKeyError\nis raised. For example:>>> unicodedata.lookup('LEFT CURLY BRACKET') '{'\nThe characters returned by this function are the same as those produced by\n\\N\nescape sequence in string literals. For example:>>> unicodedata.lookup('MIDDLE DOT') == '\\N{MIDDLE DOT}' True\n- unicodedata.name(chr, default=None, /)Â¶\nReturns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given,\nValueError\nis raised. For example:>>> unicodedata.name('Â½') 'VULGAR FRACTION ONE HALF' >>> unicodedata.name('\\uFFFF', 'fallback') 'fallback'\n- unicodedata.decimal(chr, default=None, /)Â¶\nReturns the decimal value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised. For example:>>> unicodedata.decimal('\\N{ARABIC-INDIC DIGIT NINE}') 9 >>> unicodedata.decimal('\\N{SUPERSCRIPT NINE}', -1) -1\n- unicodedata.digit(chr, default=None, /)Â¶\nReturns the digit value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised:>>> unicodedata.digit('\\N{SUPERSCRIPT NINE}') 9\n- unicodedata.numeric(chr, default=None, /)Â¶\nReturns the numeric value assigned to the character chr as float. If no such value is defined, default is returned, or, if not given,\nValueError\nis raised:>>> unicodedata"}
